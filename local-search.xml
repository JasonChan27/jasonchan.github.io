<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Http协议总结</title>
    <link href="/2023/04/16/Http%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/16/Http%E5%8D%8F%E8%AE%AE%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Http-基础"><a href="#一、Http-基础" class="headerlink" title="一、Http 基础"></a>一、Http 基础</h2><h2 id="1、网络协议分层"><a href="#1、网络协议分层" class="headerlink" title="1、网络协议分层"></a>1、网络协议分层</h2><p><img src="/images/http/1-1.png" alt="图一-1"></p><ul><li>物理层主要作用是定义物理设备如何传输数据</li><li>数据链路层在通信的实体间建立数据链路层（0101 之类的）</li><li>网络层为数据在结点之间传输创建逻辑链路</li><li>传输层向用户提供可靠的端到端服务，传输层向高层屏蔽了下层数据通信的细节</li><li>应用层为应用软件提供了很多服务，构建于 TCP 协议之上，屏蔽网络传输相关细节</li></ul><span id="more"></span><h2 id="2、HTTP-发展历史"><a href="#2、HTTP-发展历史" class="headerlink" title="2、HTTP 发展历史"></a>2、HTTP 发展历史</h2><h3 id="i、HTTP-x2F-0-9"><a href="#i、HTTP-x2F-0-9" class="headerlink" title="i、HTTP&#x2F;0.9"></a>i、HTTP&#x2F;0.9</h3><ul><li>只有一个命令 GET</li><li>没有 HEADER 等描述数据的信息</li><li>服务器发送完毕，就关闭 TCP 连接</li></ul><h3 id="ii、HTTP-x2F-1-0"><a href="#ii、HTTP-x2F-1-0" class="headerlink" title="ii、HTTP&#x2F;1.0"></a>ii、HTTP&#x2F;1.0</h3><ul><li>增加了很多命令（POST&#x2F;PUT 等）</li><li>增加 status code 和 header</li><li>多字符集支持、多部分发送、权限、缓存等</li></ul><h3 id="iii、HTTP-x2F-1-1"><a href="#iii、HTTP-x2F-1-1" class="headerlink" title="iii、HTTP&#x2F;1.1"></a>iii、HTTP&#x2F;1.1</h3><ul><li>持久连接</li><li>pipeline 在同一个连接里发送多个请求</li><li>增加 host（同一个物理服务器可以跑多个 web 服务）和其他一些命令</li></ul><h3 id="iv、HTTP-x2F-2"><a href="#iv、HTTP-x2F-2" class="headerlink" title="iv、HTTP&#x2F;2"></a>iv、HTTP&#x2F;2</h3><ul><li>所有数据以二进制传输（之前是字符串）</li><li>同一个连接里面发送多个请求不再需要按照顺序来，可以同时多个请求数据</li><li>头信息压缩（减少带宽使用）以及推送等提高效率的功能（服务端可以主动发起传输）</li></ul><h2 id="2、HTTP-的三次握手"><a href="#2、HTTP-的三次握手" class="headerlink" title="2、HTTP 的三次握手"></a>2、HTTP 的三次握手</h2><p>HTTP 是不存在连接这么个概念的，只有请求和响应这个概念，都是数据包，所以它需要一个传输的通道——<code>TCP connection</code>。</p><p>HTTP 在完成了三次握手之后，会创建一个 TCP connection,http 请求是在这个连接的基础上发送的。如下图所示：</p><p><img src="/images/http/1-2.png" alt="图一-2"></p><p>三次握手的时序图如下图所示：</p><p><img src="/images/http/1-3.png" alt="图一-3"></p><ol><li>客户端发送 SYN 包(SYN&#x3D;X)到服务器，并进入 SYN_SEND 状态，等待服务器确认；</li><li>服务器收到 SYN 包，必须确认客户的 SYN（ACK&#x3D;X+1），同时自己也发送一个 SYN 包（SYN&#x3D;Y），即 SYN+ACK 包，此时服务器进入 SYN_RECV 状态；</li><li>客户端收到服务器的 SYN ＋ ACK 包，向服务器发送确认包 ACK(ACK&#x3D;Y+1)，此包发送完毕，客户端和服务器进入 ESTABLISHED 状态，完成三次握手。</li></ol><p>需注意：</p><ul><li>URI(Uniform Resource Identifier，统一资源标识符)：用来唯一标识互联网上的信息资源。其包含：<ul><li>URL（Uniform Resource Loator，统一资源定位器）</li><li>URN(永久统一资源定位符：在资源被移动后还能找到)</li></ul></li><li>长链接: Chrome 的并发限制是 6 条，当一个页面有 6 个以上的请求发送时，会创建 6 个长链接 TCP connection，在控制面板 network 的 Waterfall 中可以看出。</li></ul><p>如果一个页面中有很多图片，下面的往往加载很慢，就是因为并发只有 6 个，后面的需要等待前面的执行完毕。同时，会复用前面的 TCP 连接 Connection: keep-alive</p><h2 id="3、HTTP-报文格式"><a href="#3、HTTP-报文格式" class="headerlink" title="3、HTTP 报文格式"></a>3、HTTP 报文格式</h2><p>HTTP 的请求报文和响应报文格式如下图所示：</p><p><img src="/images/http/1-4.jpg" alt="图一-4"></p><h3 id="i、请求报文"><a href="#i、请求报文" class="headerlink" title="i、请求报文"></a>i、请求报文</h3><p>一个 HTTP 请求报文由请求行（request line）、请求头部（header）、空行（blank line）和请求数据（request-body）4 个部分组成：</p><ul><li>请求头。由请求方法字段、URL 字段和 HTTP 协议版本字段 3 个字段组成，它们用空格分隔。例如，GET &#x2F;index.html HTTP&#x2F;1.1。<ul><li>HTTP 协议的请求方法有 GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT。</li></ul></li><li>请求头部。由关键字&#x2F;值对组成，每行一对，关键字和值用英文冒号“:”分隔。请求头部通知服务器有关于客户端请求的信息，典型的请求头有：<ul><li>User-Agent：产生请求的浏览器类型。</li><li>Accept：客户端可识别的内容类型列表。</li><li>Host：请求的主机名，允许多个域名同处一个 IP 地址，即虚拟主机。</li></ul></li><li>空行。最后一个请求头之后是一个空行，发送回车符和换行符，通知服务器以下不再有请求头。</li><li>请求数据。请求数据不在 GET 方法中使用，而是在 POST 方法中使用。POST 方法适用于需要客户填写表单的场合。</li></ul><h3 id="ii、响应报文"><a href="#ii、响应报文" class="headerlink" title="ii、响应报文"></a>ii、响应报文</h3><p>HTTP 响应也由四个部分组成，分别是：状态行（status line）、消息报头（header）、空行（blank line）和响应正文（response-body）。HTTP 响应的格式与请求的格式十分类似，唯一的区别是在于第一行中用状态信息（status line）代替了请求信息（request line）。</p><p>状态行格式如：<code>HTTP-Version Status-Code Reason-Phrase CRLF</code></p><p>其中，</p><ul><li>HTTP-Version 表示服务器 HTTP 协议的版本</li><li>Status-Code 表示服务器发回的响应状态代码。状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：<ul><li>1xx：指示信息–表示请求已接收，继续处理。</li><li>2xx：成功–表示请求已被成功接收、理解、接受。</li><li>3xx：重定向–要完成请求必须进行更进一步的操作。</li><li>4xx：客户端错误–请求有语法错误或请求无法实现。</li><li>5xx：服务器端错误–服务器未能实现合法的请求。</li></ul></li><li>Reason-Phrase 表示状态代码的文本描述。</li></ul><p>常见状态代码、状态描述的说明：</p><ul><li>200 OK：客户端请求成功。</li><li>400 Bad Request：客户端请求有语法错误，不能被服务器所理解。</li><li>401 Unauthorized：请求未经授权，这个状态代码必须和 WWW-Authenticate 报头域一起使用。</li><li>403 Forbidden：服务器收到请求，但是拒绝提供服务。</li><li>404 Not Found：请求资源不存在，举个例子：输入了错误的 URL。</li><li>500 Internal Server Error：服务器发生不可预期的错误。</li><li>503 Server Unavailable：服务器当前不能处理客户端的请求，一段时间后可能恢复正常，举个例子：HTTP&#x2F;1.1 200 OK（CRLF）。</li></ul><h3 id="iii、HTTP-协议常见请求-x2F-响应头"><a href="#iii、HTTP-协议常见请求-x2F-响应头" class="headerlink" title="iii、HTTP 协议常见请求&#x2F;响应头"></a>iii、HTTP 协议常见请求&#x2F;响应头</h3><ul><li>Content-Type:请求的与实体对应的 MIME 信息</li><li>Accept：指定客户端能接受的内容类型</li><li>Origin：最初的请求来源于哪儿，主要用于 POST 请求<ul><li>origin 的提出，本身就是在 HTML5 中跨域操作所引入的。 其具体流程是，当一个链接或者 XMLHttpRequest 去请求跨域操作，浏览器事实上的确向目标服务器发起了连接请求，并且携带这 origin。 当服务器返回时，浏览器将检查 response 中是否包含 Access-Control-Allow-Origin 字段，当缺少这个字段时，浏览器将 abort，abort 的意思是不显示，不产生事件，就好像没有请求过，甚至在 network 区域里面都看不到。 当存在这个 header 时，浏览器将检查当前请求所在域是否在这个 access-control-allow-origin 所允许的域内，如果是，继续下去，如果不存在，abort！</li></ul></li><li>Cookie：发送给服务端的 cookie 的值</li><li>Cache-Control：指定缓存响应机制（public&#x2F;private&#x2F;no-cache）</li><li>private 是指，只允许发送请求的域名进行缓存，其他代理的不允许</li><li>User-Agent：用户信息</li><li>X-Forwarded-For：请求端真实的 IP</li><li>Access-Control-Allow-Origin：允许特定的域名来访问（跨域使用）</li><li>Last-Modified：请求资源的最后响应时间，在服务端设置后，对应的在 Request Headers 中，会携带 If-Modified-Since 头</li><li>Etag：通过数据签名，进行是否缓存验证，在服务端设置后，对应的在 Request Headers 中，会携带 If-None-Match 头</li><li>Connection: 通知浏览器保持当前 HTTP 连接，以便在策略允许范围内进行连接复用</li><li>Keep-Alive: 保持连接的策略</li></ul><h2 id="二、Http-特性"><a href="#二、Http-特性" class="headerlink" title="二、Http 特性"></a>二、Http 特性</h2><h2 id="1、CORS-跨域请求"><a href="#1、CORS-跨域请求" class="headerlink" title="1、CORS 跨域请求"></a>1、CORS 跨域请求</h2><h3 id="i、浏览器同域限制"><a href="#i、浏览器同域限制" class="headerlink" title="i、浏览器同域限制"></a>i、浏览器同域限制</h3><p>如果服务端没有设置头信息 Access-Control-Allow-Origin，在前端跨域请求时，虽然客户端的请求还会被服务端正常接收，但是浏览器会把服务端返回的数据忽略掉，并在 console 中报错，这是浏览器的同源策略。</p><p>解决方案一是服务端设置<code>Access-Control-Allow-Origin</code>响应头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>  <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8888&quot;</span>, <span class="hljs-comment">// 设置后，则对‘http://127.0.0.1:8888’来源的请求放开同域限制，从而浏览器可以实现跨于请求</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>解决方案二是使用 jsonp：</p><ul><li>利用动态创建一个 script 标签，因为 script 标签是没有同源策略限制的，是可以跨域的</li><li>把这个 script 标签的 src 指向我们请求的服务端地址，这个地址会携带一个参数：callback，一个回调函数，服务端会把数据通过这个回调函数返回给客户端，但是客户端没有这个函数怎么接收呢？所以在发送请求之前，要在全局（window）注册这样一个方法，利用这个方法，来获得数据。</li></ul><p>举个例子，通过 jsonp 请求获取 name 的值：</p><p>客户端代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-comment">// 注册一个回调函数getName</span></span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-property">getName</span> = <span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;获取到的name是：&quot;</span>, res);</span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 通过script标签请求服务端的资源 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:8887?callback=getName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务端代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;url&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;request come&quot;</span>, request.<span class="hljs-property">url</span>);<br>    <span class="hljs-keyword">const</span> urlObj = url.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// url解析后的结果：&#123; query :&#123; callback: &#x27;getName&#x27; &#125;, ... &#125;</span><br>    <span class="hljs-keyword">const</span> callback = urlObj.<span class="hljs-property">query</span>.<span class="hljs-property">callback</span>;<br>    <span class="hljs-keyword">if</span> (callback === <span class="hljs-string">&quot;getName&quot;</span>) &#123;<br>      <span class="hljs-comment">// 如果是客户端约定的getName回调函数，则返回对应的资源</span><br>      response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;getName(&#x27;Jason&#x27;)&quot;</span>);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8887</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8887&quot;</span>);<br></code></pre></td></tr></table></figure><p>可以看到浏览器控制台的输入： <code>获取到的name是： Jason</code>，这样就通过 jsonp 的方式绕过浏览器的同源限制，从而实现了跨域请求。但需要注意的是，jsonp 只支持<code>get</code>请求。</p><h3 id="ii、预请求"><a href="#ii、预请求" class="headerlink" title="ii、预请求"></a>ii、预请求</h3><p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）。只要同时满足以下两大条件，就属于简单请求。</p><ol><li>请求方法是以下三种方法之一：<ul><li>HEAD</li><li>GET</li><li>POST</li></ul></li><li>HTTP 的头信息不超出以下几种字段：<ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值 application&#x2F;x-www-form-urlencoded、multipart&#x2F;form-data、text&#x2F;plain</li></ul></li></ol><p>对于简单请求，浏览器直接发出 CORS 请求。</p><p>而非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为”预检”请求（preflight）。非简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者 Content-Type 字段的类型是 application&#x2F;json。</p><p>除了 Origin 字段也就是 Access-Control-Allow-Origin 外，预请求的头信息包括两个特殊字段：</p><ul><li>Access-Control-Request-Method</li><li>Access-Control-Request-Headers</li></ul><p><code>Access-Control-Request-Method</code>字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法，比如 PUT。<code>Access-Control-Request-Headers</code>字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段，比如 X-Test-Cors。</p><p>举个例子，在服务端对预请求的限制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;url&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-keyword">const</span> urlObj = url.<span class="hljs-title function_">parse</span>(request.<span class="hljs-property">url</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// url解析后的结果：&#123; query :&#123; callback: &#x27;getName&#x27; &#125;, ... &#125;</span><br>    <span class="hljs-keyword">const</span> callback = urlObj.<span class="hljs-property">query</span>.<span class="hljs-property">callback</span>;<br>    <span class="hljs-keyword">if</span> (response.<span class="hljs-property">headers</span>.<span class="hljs-property">origin</span> == <span class="hljs-string">&quot;http://127.0.0.1:8888&quot;</span>) &#123;<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Access-Control-Allow-Origin&quot;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8888&quot;</span>,<br>        <span class="hljs-string">&quot;Access-Control-Allow-Methods&quot;</span>: <span class="hljs-string">&quot;POST, PUT, DELETE&quot;</span>, <span class="hljs-comment">// 允许的methed</span><br>        <span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>: <span class="hljs-string">&quot;X-Test-Cors&quot;</span>, <span class="hljs-comment">// 允许的请求头</span><br>        <span class="hljs-string">&quot;Access-Control-Allow-Headers&quot;</span>: <span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-comment">// 允许的请求头</span><br>        <span class="hljs-string">&quot;Access-Control-Max-Age&quot;</span>: <span class="hljs-string">&quot;1000&quot;</span>, <span class="hljs-comment">// 在这个时间段内，只需要一次预请求</span><br>      &#125;);<br>    &#125;<br>    response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8887</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8887&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="2、缓存"><a href="#2、缓存" class="headerlink" title="2、缓存"></a>2、缓存</h2><h3 id="i、Cache-Control"><a href="#i、Cache-Control" class="headerlink" title="i、Cache-Control"></a>i、Cache-Control</h3><p>Cache-Control 通用消息头字段，被用于在 http 请求和响应中，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。</p><p>语法指令分类及含义如下：</p><ul><li>可缓存性<ul><li>public。表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容。（例如：1.该响应没有 max-age 指令或 Expires 消息头；2. 该响应对应的请求方法是 POST 。）</li><li>private。表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容，比如：对应用户的本地浏览器。</li><li>no-cache。在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证 (协商缓存验证)。</li><li>no-store。缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。</li></ul></li><li>到期<ul><li>max-age&#x3D;<seconds>。设置缓存存储的最大周期，超过这个时间缓存被认为过期 (单位秒)。</li><li>s-maxage&#x3D;<seconds>。覆盖 max-age 或者 Expires 头，但是仅适用于共享缓存 (比如各个代理)，私有缓存会忽略它。</li><li>max-stale[&#x3D;<seconds>]。表明客户端愿意接收一个已经过期的资源。可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间。</li></ul></li><li>重新验证和重新加载<ul><li>must-revalidate。一旦资源过期（比如已经超过 max-age），在成功向原始服务器验证之前，缓存不能用该资源响应后续请求。</li><li>proxy-revalidate。与 must-revalidate 作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略。</li><li>immutable。表示响应正文不会随时间而改变。资源（如果未过期）在服务器上不发生改变，因此客户端不应发送重新验证请求头（例如 If-None-Match 或 If-Modified-Since）来检查更新，即使用户显式地刷新页面。</li></ul></li><li>其它<ul><li>no-transform。不得对资源进行转换或转变。Content-Encoding、Content-Range、Content-Type 等 HTTP 头不能由代理修改。</li><li>only-if-cached。表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</li></ul></li></ul><h3 id="ii、缓存验证-Last-Modified-和-Etag-的使用"><a href="#ii、缓存验证-Last-Modified-和-Etag-的使用" class="headerlink" title="ii、缓存验证 Last-Modified 和 Etag 的使用"></a>ii、缓存验证 Last-Modified 和 Etag 的使用</h3><p>浏览器使用 Cache-Control 命中缓存的机制如下图所示：</p><p><img src="/images/http/2-1.png" alt="图二-1"></p><p>验证缓存有两种：Last-Modified 和 Etag</p><h5 id="1-Last-Modified"><a href="#1-Last-Modified" class="headerlink" title="1) Last-Modified"></a>1) Last-Modified</h5><ul><li>表示上次修改的时间</li><li>配合<code>If-Modified-Since</code>或<code>If-Unmodified-Since</code>使用</li><li>对比上次修改时间以验证资源是否需要更新</li></ul><p>举个例子，使用<em>Last-Modified</em>验证缓存：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> html = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br>      <span class="hljs-keyword">const</span> ifModifiedSince = request.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;if-modified-since&quot;</span>];<br>      <span class="hljs-keyword">if</span> (ifModifiedSince === <span class="hljs-string">&quot;Sun, 16 Apr 2023 10:50:27 GMT&quot;</span>) &#123;<br>        response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">304</span>, &#123;<br>          <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>          <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=20000000, no-cache&quot;</span>,<br>          <span class="hljs-string">&quot;Last-Modified&quot;</span>: <span class="hljs-string">&quot;Sun, 16 Apr 2023 10:50:27 GMT&quot;</span>,<br>        &#125;);<br>        response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>          <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>          <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=20000000, no-cache&quot;</span>,<br>          <span class="hljs-string">&quot;Last-Modified&quot;</span>: <span class="hljs-string">&quot;Sun, 16 Apr 2023 10:50:27 GMT&quot;</span>,<br>        &#125;);<br>        response.<span class="hljs-title function_">end</span>(html);<br>      &#125;<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8888&quot;</span>);<br></code></pre></td></tr></table></figure><p>上例客户端第一次请求<code>http://127.0.0.1:8888/</code>，则会返回 test.html，且响应头返回了<code>Last-Modified: Sun, 16 Apr 2023 18:48:50 GMT</code>标头，如下图：</p><p><img src="/images/http/2-2.jpg" alt="图二-2"></p><p>当第二次请求时，请求头会携带上上次请求服务端返回的<code>Last-Modified</code>的值，如<code>If-Modified-Since: Sun, 16 Apr 2023 18:48:50 GMT</code>。</p><p>服务端会将该资源的修改时间与此头进行对比，如果相同，说明资源未改变，则响应 304，告诉客户端该资源要使用缓存资源。如下图：</p><p><img src="/images/http/2-3.jpg" alt="图二-3"></p><h5 id="2-Etag"><a href="#2-Etag" class="headerlink" title="2) Etag"></a>2) Etag</h5><ul><li>表示数据签名</li><li>配合<code>If-Match</code>或<code>If-Non-Match</code>使用</li><li>对比资源的签名以判断是否使用缓存</li></ul><p>举个例子，使用<em>Etag</em>验证缓存：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> html = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br>      <span class="hljs-keyword">const</span> ifNoneMatch = request.<span class="hljs-property">headers</span>[<span class="hljs-string">&quot;if-none-match&quot;</span>];<br>      <span class="hljs-keyword">if</span> (ifNoneMatch === <span class="hljs-string">&quot;777&quot;</span>) &#123;<br>        response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">304</span>, &#123;<br>          <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>          <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=20000000, no-cache&quot;</span>,<br>          <span class="hljs-title class_">Etag</span>: <span class="hljs-string">&quot;777&quot;</span>,<br>        &#125;);<br>        response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&quot;</span>);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>          <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>          <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;max-age=20000000, no-cache&quot;</span>,<br>          <span class="hljs-title class_">Etag</span>: <span class="hljs-string">&quot;777&quot;</span>,<br>        &#125;);<br>        response.<span class="hljs-title function_">end</span>(html);<br>      &#125;<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8888&quot;</span>);<br></code></pre></td></tr></table></figure><p>上例客户端第一次请求<code>http://127.0.0.1:8888/</code>，则会返回 test.html，且响应头返回了<code>Etag: 777</code>标头，如下图：</p><p><img src="/images/http/2-4.jpg" alt="图二-4"></p><p>当第二次请求时，请求头会携带上上次请求服务端返回的<code>Etag</code>的值，如<code>Etag: 777</code>。</p><p>服务端会将该资源计算后的<code>Etag</code>值与此头进行对比，如果相同，说明资源未改变，则响应 304，告诉客户端该资源要使用缓存资源。如下图：</p><p><img src="/images/http/2-5.jpg" alt="图二-5"></p><h2 id="3、cookie-和-session"><a href="#3、cookie-和-session" class="headerlink" title="3、cookie 和 session"></a>3、cookie 和 session</h2><h3 id="i、cookie"><a href="#i、cookie" class="headerlink" title="i、cookie"></a>i、cookie</h3><p>Cookie 是一个 HTTP 请求标头，其中含有先前由服务器通过 Set-Cookie 标头投放或通过 JavaScript 的 Document.cookie 方法设置，然后存储到客户端的 HTTP cookie，浏览器下次请求会自动带上。cookie 是个键值对，可以设置多个。</p><p>举个例子，通过 Set-Cookie 设置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> html = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>        <span class="hljs-string">&quot;Set-Cookie&quot;</span>: [<span class="hljs-string">&quot;id=123; max-age=2&quot;</span>, <span class="hljs-string">&quot;abc=456;domain=test.com&quot;</span>],<br>      &#125;);<br>      response.<span class="hljs-title function_">end</span>(html);<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8888&quot;</span>);<br></code></pre></td></tr></table></figure><p>客户端访问<code>http://127.0.0.1:8888/</code>后，服务端回返回<em>Set-Cookie</em>标头，<code>id=123; max-age=2</code>会被存储到客户端，而<code>abc=456;domain=test.com</code>没被存储（跨域），如下图所示：</p><p><img src="/images/http/2-6.jpg" alt="图二-6"></p><p>cookie 的属性：</p><ul><li>max-age 和 expire 设置过期时间</li><li>Secure 只在 https 的时候发送</li><li>HttpOnly: 禁止 JavaScript 通过 document.cookie 访问</li></ul><h3 id="ii、session"><a href="#ii、session" class="headerlink" title="ii、session"></a>ii、session</h3><p>session 主要的作用就是用来记录用户状态，表明用户身份的，session 的存储方式也有多样，最为传统的就是服务端保存 session 的内容，客户端浏览器 cookie 保存 sessionid，服务端通过客户端每次 http 请求带上的 cookie 中的 sessionid 去找到对应此用户的 session 内容。当然我之前也发过一篇文章讲到过通过 etag 来做为 sessionid，识别用户身份。</p><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-comment">//全局sessions存放所有的session</span><br><span class="hljs-keyword">var</span> sessions = &#123;&#125;;<br><span class="hljs-keyword">var</span> key = <span class="hljs-string">&quot;session_id&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">EXPIRES</span> = <span class="hljs-number">20</span> * <span class="hljs-number">60</span> * <span class="hljs-number">1000</span>; <span class="hljs-comment">//过期时长</span><br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>    req.<span class="hljs-property">cookies</span> = <span class="hljs-title function_">parseCookie</span>(req.<span class="hljs-property">headers</span>.<span class="hljs-property">cookie</span>); <span class="hljs-comment">//解析客户端的cookie，,暂存在req.cookies上</span><br>    <span class="hljs-keyword">var</span> id = req.<span class="hljs-property">cookies</span>[key]; <span class="hljs-comment">//取出每个用户唯一的id口令</span><br>    <span class="hljs-comment">//更新session状态</span><br>    <span class="hljs-keyword">if</span> (!id) &#123;<br>      req.<span class="hljs-property">session</span> = <span class="hljs-title function_">generate</span>(); <span class="hljs-comment">//生成新的session</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">var</span> session = sessions[id]; <span class="hljs-comment">//从全局sessions中取出对应id的session，判断session状态</span><br>      <span class="hljs-keyword">if</span> (session) &#123;<br>        <span class="hljs-keyword">if</span> (session.<span class="hljs-property">cookie</span>.<span class="hljs-property">expire</span> &gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()) &#123;<br>          <span class="hljs-comment">//更新超时时间</span><br>          session.<span class="hljs-property">cookie</span>.<span class="hljs-property">expire</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() + <span class="hljs-variable constant_">EXPIRES</span>;<br>          req.<span class="hljs-property">session</span> = session;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">//超时了，删除旧的数据，重新生成</span><br>          <span class="hljs-keyword">delete</span> sessions[id];<br>          req.<span class="hljs-property">session</span> = <span class="hljs-title function_">generate</span>();<br>        &#125;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//sessions中不存在该id的session（id口令匹配错误或客户端保存着id，但服务器端因超时导致session已取消）,重新生成</span><br>        req.<span class="hljs-property">session</span> = <span class="hljs-title function_">generate</span>();<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//业务处理，返回客户端</span><br>    <span class="hljs-title function_">handle</span>(req, res);<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-comment">//生成新的session,并存储于sessions</span><br><span class="hljs-keyword">var</span> generate = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> session = &#123;&#125;;<br>  session.<span class="hljs-property">id</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>(); <span class="hljs-comment">//id为当前时间加上随机值</span><br>  session.<span class="hljs-property">cookie</span> = &#123;<br>    <span class="hljs-attr">expire</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>() + <span class="hljs-variable constant_">EXPIRES</span>, <span class="hljs-comment">//cookie为当前时间加上超时时长</span><br>  &#125;;<br>  sessions[session.<span class="hljs-property">id</span>] = session;<br>  <span class="hljs-keyword">return</span> session; <span class="hljs-comment">//返回当前新建的session</span><br>&#125;;<br><br><span class="hljs-comment">//业务处理</span><br><span class="hljs-keyword">var</span> handle = <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!req.<span class="hljs-property">session</span>.<span class="hljs-property">isVisit</span>) &#123;<br>    sessions[req.<span class="hljs-property">session</span>.<span class="hljs-property">id</span>].<span class="hljs-property">isVisit</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">//修改服务器相应的session状态</span><br>    res.<span class="hljs-title function_">setHeader</span>(<span class="hljs-string">&quot;Set-Cookie&quot;</span>, <span class="hljs-title function_">serialize</span>(key, req.<span class="hljs-property">session</span>.<span class="hljs-property">id</span>)); <span class="hljs-comment">//头部写入session的id</span><br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span> &#125;);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;h1&gt;第一次登陆&lt;/h1&gt;&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span> &#125;);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;h1&gt;再次登陆&lt;/h1&gt;&quot;</span>);<br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">//解析客户端传来的cookie</span><br><span class="hljs-keyword">var</span> parseCookie = <span class="hljs-keyword">function</span> (<span class="hljs-params">cookie</span>) &#123;<br>  <span class="hljs-keyword">var</span> cookies = &#123;&#125;;<br>  <span class="hljs-keyword">if</span> (!cookie) &#123;<br>    <span class="hljs-comment">//为空，返回cookies</span><br>    <span class="hljs-keyword">return</span> cookies;<br>  &#125;<br>  <span class="hljs-comment">//存在cookie，则解析客户端的cookie，存储于cookies给服务端使用</span><br>  <span class="hljs-keyword">var</span> list = cookie.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;;&quot;</span>); <span class="hljs-comment">//将Cookie值：key1=value; key2=value2转变为数组的形式</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; list.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> pair = list[i].<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>    cookies[pair[<span class="hljs-number">0</span>].<span class="hljs-title function_">trim</span>()] = pair[<span class="hljs-number">1</span>].<span class="hljs-title function_">trim</span>(); <span class="hljs-comment">//trim用于删除字符串头尾的空格</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> cookies;<br>&#125;;<br><br><span class="hljs-comment">//格式化cookie</span><br><span class="hljs-keyword">var</span> serialize = <span class="hljs-keyword">function</span> (<span class="hljs-params">name, val, opt</span>) &#123;<br>  <span class="hljs-keyword">var</span> pairs = [name + <span class="hljs-string">&quot;=&quot;</span> + <span class="hljs-built_in">encodeURIComponent</span>(val)];<br>  opt = opt || &#123;&#125;;<br><br>  <span class="hljs-keyword">if</span> (opt.<span class="hljs-property">path</span>) pair.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Path=&quot;</span> + opt.<span class="hljs-property">path</span>); <span class="hljs-comment">//还可以设置其他选项Domain、Expires等</span><br>  <span class="hljs-keyword">if</span> (opt.<span class="hljs-property">maxAge</span>) pairs.<span class="hljs-title function_">push</span>(<span class="hljs-string">&quot;Max-Age=&quot;</span> + opt.<span class="hljs-property">maxAge</span>); <span class="hljs-comment">//告诉浏览器多久后过期</span><br>  <span class="hljs-keyword">return</span> pairs.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;;&quot;</span>); <span class="hljs-comment">//将数组拼接成用分号连接的字符串</span><br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="4、HTTP-长连接"><a href="#4、HTTP-长连接" class="headerlink" title="4、HTTP 长连接"></a>4、HTTP 长连接</h2><p>在 HTTP&#x2F;1.0 中，默认使用的是短连接。也就是说，浏览器和服务器每进行一次 HTTP 操作，就建立一次连接，但任务结束就中断连接。如果客户端浏览器访问的某个 HTML 或其他类型的 Web 页中包含有其他的 Web 资源，如 JavaScript 文件、图像文件、CSS 文件等；当浏览器每遇到这样一个 Web 资源，就会建立一个 HTTP 会话。</p><p>但从 HTTP&#x2F;1.1 起，默认使用长连接，用以保持连接特性。使用长连接的 HTTP 协议，会在响应头有加入这行代码：<code>Connection:keep-alive</code>。</p><p>在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输 HTTP 数据的 TCP 连接不会关闭，如果客户端再次访问这个服务器上的网页，会继续使用这一条已经建立的连接。Keep-Alive 不会永久保持连接，它有一个保持时间，可以在不同的服务器中设定这个时间。实现长连接要客户端和服务端都支持长连接。</p><p>Chrome 的并发限制是 6 条，当一个页面有 6 个以上的请求发送时，会创建 6 个长链接 TCP connection，在控制面板 network 的 Waterfall 中可以看出。如果一个页面中有很多图片，下面的往往加载很慢，就是因为并发只有 6 个，后面的需要等待前面的执行完毕。同时，会复用前面的 TCP 连接 Connection: keep-alive</p><h2 id="5、数据协商"><a href="#5、数据协商" class="headerlink" title="5、数据协商"></a>5、数据协商</h2><p>在客户端发送给服务端一个请求的时候，客户端会声明通过这个请求拿到的数据格式以及数据相关的一些限制要求。服务端会有很多不同类型的数据返回，它会根据请求的这个声明做出一个判断，根据请求头信息来区分返回数据。</p><p>请求：</p><ul><li>Accept：用来声明我想要什么样的数据，Accept 指定数据类型。<ul><li>这个数据类型会根据 MineType 的声明进行一个限制, 来告诉服务端想要的数据类型</li></ul></li><li>Accept-Encoding：代表数据是一个怎样的编码方式来进行传输<ul><li>主要用来限制服务端如何来进行数据的压缩，如：gzip, deflate, br 等</li></ul></li><li>Accept-Language：用来展示不同的语言<ul><li>一般根据这个头判断返回是中文还是英文，根据设计方案不同，如果还包含其他语言也是可以的</li></ul></li><li>User-Agent：用来判断浏览器相关信息<ul><li>一般移动端和 PC 端浏览器是不一样的，可以根据它来适配不同格式的页面</li></ul></li></ul><p>返回：</p><ul><li>Content-Type：对应请求中的 Accept 中的数据格式<ul><li>Content-Type 从 Accept 中选择一种作为最终数据的返回格式</li><li>在返回的时候就要明确声明返回的数据格式，用于客户端的判断显示</li></ul></li><li>Content-Encoding：对应请求中的 Accept-Encoding<ul><li>用于声明返回数据使用的压缩算法</li></ul></li><li>Content-Language：对应请求中的 Accept-Language<ul><li>用于声明返回数据中是否和请求中的语言一致</li></ul></li></ul><h2 id="6、Redirect"><a href="#6、Redirect" class="headerlink" title="6、Redirect"></a>6、Redirect</h2><p>URL 重定向（也称为 URL 转发）是一种为页面、表单或者整个 Web 站点&#x2F;应用提供多个 URL 地址的技术。HTTP 对此操作有一种特殊类型的响应，称为 HTTP 重定向（HTTP redirect）。</p><p>重定向可实现许多目标：</p><ul><li>站点维护或停机期间的临时重定向。</li><li>永久重定向将在更改站点的 URL 后，保留现有的链接&#x2F;书签、上传文件时表示进度的页面等。</li></ul><p>举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;request come&quot;</span>, request.<span class="hljs-property">url</span>);<br><br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">302</span>, &#123;<br>        <span class="hljs-comment">// or 301</span><br>        <span class="hljs-title class_">Location</span>: <span class="hljs-string">&quot;/new&quot;</span>,<br>      &#125;);<br>      response.<span class="hljs-title function_">end</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/new&quot;</span>) &#123;<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>      &#125;);<br>      response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;&lt;div&gt;this is content&lt;/div&gt;&quot;</span>);<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8888&quot;</span>);<br></code></pre></td></tr></table></figure><p>上例客户端访问<code>http://127.0.0.1:8888/</code>后，服务端返回 302 状态码，并指定标头<em>Location: &#x2F;new</em>，随后浏览器则重定向一个新的资源请求，最后返回<code>/new</code>页面。如下图所示：</p><p><img src="/images/http/2-7.jpg" alt="图二-7"></p><p>服务端也可以指定状态码 301，代表永久重定向，这样浏览器则不会请求<code>http://127.0.0.1:8888/</code>，而会直接去请求<code>/new</code>页面资源。</p><h2 id="7、CSP"><a href="#7、CSP" class="headerlink" title="7、CSP"></a>7、CSP</h2><p>内容安全策略（CSP）用于检测和减轻用于 Web 站点的特定类型的攻击，例如 XSS (en-US) 和数据注入等。</p><p>该安全策略的实现基于一个称作<em>Content-Security-Policy</em>的 HTTP 首部。</p><p>举个例子，</p><p>客户端代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is content<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 资源地址为百度页面的某个js文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://dss0.bdstatic.com/5aV1bjqh_Q23odCf/static/superman/js/lib/jquery-1-edb203c114.10.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务端代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;request come&quot;</span>, request.<span class="hljs-property">url</span>);<br><br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> html = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Security-Policy&quot;</span>: <span class="hljs-string">&quot;default-src &#x27;self&#x27;&quot;</span>, <span class="hljs-comment">// &#x27;script-src \&#x27;self\&#x27;; form-action \&#x27;self\&#x27;; report-uri /report&#x27;</span><br>      &#125;);<br>      response.<span class="hljs-title function_">end</span>(html);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/javascript&quot;</span>,<br>      &#125;);<br>      response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;console.log(&quot;loaded script&quot;)&#x27;</span>);<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8888&quot;</span>);<br></code></pre></td></tr></table></figure><p>服务端通过设置<em>Content-Security-Policy</em>标头为<code>default-src \&#39;self\&#39;</code>，客户端访问<code>http://127.0.0.1:8888/</code>后，当首页请求非本域名的资源时，浏览器将会忽略此请求，并报错，如下图所示：</p><p><img src="/images/http/2-8.jpg" alt="图二-8"></p><p><img src="/images/http/2-9.jpg" alt="图二-9"></p><h2 id="三、Nginx-代理及-HTTP2"><a href="#三、Nginx-代理及-HTTP2" class="headerlink" title="三、Nginx 代理及 HTTP2"></a>三、Nginx 代理及 HTTP2</h2><h2 id="1、Nginx-的基本配置"><a href="#1、Nginx-的基本配置" class="headerlink" title="1、Nginx 的基本配置"></a>1、Nginx 的基本配置</h2><p>在 nginx 的配置文件中，可以这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs conf">server &#123;<br>  listen       80;<br>  # listen       [::]:80 default_server;<br>  server_name  test.com; // 浏览器中访问的host name<br><br>  # return 302 https://$server_name$request_uri;<br><br>  location / &#123;<br>    proxy_pass http://127.0.0.1:8888; // 要代理到什么地方<br>    proxy_set_header Host $host; // 访问test.com时的请求头host的值<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，当浏览器访问<code>test.com</code>时，nginx 会代理到<code>http://127.0.0.1:8888</code>。</p><h2 id="2、Nginx-的代理缓存"><a href="#2、Nginx-的代理缓存" class="headerlink" title="2、Nginx 的代理缓存"></a>2、Nginx 的代理缓存</h2><p>Nginx 只需要两个指令即可启用代理缓存，分别是<em>proxy_cache_path</em>和<em>proxy_cache</em>。proxy_cache_path 指令设置缓存的路径，proxy_cache 指令用来激活它。</p><p>在 nginx 的配置文件中，这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs conf">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;<br><br>server &#123;<br>  listen       80;<br>  # listen       [::]:80 default_server;<br>  server_name  test.com; // 浏览器中访问的host name<br><br>  # return 302 https://$server_name$request_uri;<br><br>  location / &#123;<br>    proxy_cache my_cache;<br>    proxy_pass http://127.0.0.1:8888; // 要代理到什么地方<br>    proxy_set_header Host $host; // 访问test.com时的请求头host的值<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就实现了代理缓存。</p><p>举个例子进行测试：</p><p>客户端代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>This is content, and data is: <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">var</span> index = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">      <span class="hljs-keyword">function</span> <span class="hljs-title function_">doRequest</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> data = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;data&quot;</span>);</span><br><span class="language-javascript">        data.<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;&quot;</span>;</span><br><span class="language-javascript">        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/data&quot;</span>, &#123;</span><br><span class="language-javascript">          <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-comment">// &#x27;X-Test-Cache&#x27;: index++ // 用来控制代理缓存所设的自定义字段</span></span><br><span class="language-javascript">          &#125;,</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">          .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resp</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> resp.<span class="hljs-title function_">text</span>();</span><br><span class="language-javascript">          &#125;)</span><br><span class="language-javascript">          .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;</span><br><span class="language-javascript">            data.<span class="hljs-property">innerText</span> = text;</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript">      <span class="hljs-comment">// 请求资源data，并将内容渲染到页面上</span></span><br><span class="language-javascript">      <span class="hljs-title function_">doRequest</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>服务端代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fs&quot;</span>);<br><br><span class="hljs-comment">// 延迟返回</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">wait</span> = (<span class="hljs-params">seconds</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(resolve, seconds * <span class="hljs-number">1000</span>);<br>  &#125;);<br>&#125;;<br>http<br>  .<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">request, response</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;request come&quot;</span>, request.<span class="hljs-property">url</span>);<br><br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>      <span class="hljs-keyword">const</span> html = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&quot;test.html&quot;</span>, <span class="hljs-string">&quot;utf8&quot;</span>);<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/html&quot;</span>,<br>      &#125;);<br>      response.<span class="hljs-title function_">end</span>(html);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (request.<span class="hljs-property">url</span> === <span class="hljs-string">&quot;/data&quot;</span>) &#123;<br>      response.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<br>        <span class="hljs-comment">//   &#x27;Cache-Control&#x27;: &#x27;max-age=2, s-maxage=20, private&#x27;, // 可控制代理缓存</span><br>        <span class="hljs-comment">//   &#x27;Vary&#x27;: &#x27;X-Test-Cache&#x27; // 代表只有浏览器的请求头X-Test-Cache和之前请求的值一样，才会缓存</span><br>      &#125;);<br>      <span class="hljs-comment">// 延迟2s返回内容success</span><br>      <span class="hljs-title function_">wait</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> response.<span class="hljs-title function_">end</span>(<span class="hljs-string">&quot;success&quot;</span>));<br>    &#125;<br>  &#125;)<br>  .<span class="hljs-title function_">listen</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server listening on 8888&quot;</span>);<br></code></pre></td></tr></table></figure><p>因配置了 Nginx 代理缓存，上例客户端第一次访问<code>http://127.0.0.1:8888/</code>后，会去请求 data 资源并 2 后渲染到页面，但第二次访问后，会立即返回已经渲染好内容的页面，说明代理缓存生效。</p><p>当然，可通过配置<em>Cache-Control</em>标头来控制代理缓存：</p><ul><li>s-maxage：代理缓存的生效时间，同 max-age 的作用。</li><li>private：只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容，比如：对应用户的本地浏览器。</li><li>no-store：缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。</li></ul><h2 id="3、使用-Nginx-部署-HTTPS-服务"><a href="#3、使用-Nginx-部署-HTTPS-服务" class="headerlink" title="3、使用 Nginx 部署 HTTPS 服务"></a>3、使用 Nginx 部署 HTTPS 服务</h2><p>在 nginx 的配置文件中，这样配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs conf">proxy_cache_path cache levels=1:2 keys_zone=my_cache:10m;<br><br>server &#123;<br>    listen  80 default_server;<br>    listen  [::]:80 default_server;<br>    server_name test.com;<br>    return 302 https://$server_name$request_uri; // 如果访问http则自动跳转到https<br>&#125;<br><br>server &#123;<br>  listen       443;<br>  # listen       [::]:80 default_server;<br>  server_name  test.com; // 浏览器中访问的host name<br><br>  # return 302 https://$server_name$request_uri;<br><br>  ssl on;<br>  ssl_certificate_key certs/localhost-privkey.pem;<br>  ssl_certificate certs/localhost-cert.pem;<br><br>  location / &#123;<br>    proxy_cache my_cache;<br>    proxy_pass http://127.0.0.1:8888; // 要代理到什么地方<br>    proxy_set_header Host $host; // 访问test.com时的请求头host的值<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、HTTP2"><a href="#4、HTTP2" class="headerlink" title="4、HTTP2"></a>4、HTTP2</h2><p>HTTP2 的优势：</p><ul><li>信道复用</li><li>分帧传输：同一个连接可并发地发送请求</li><li>Server Push：服务端可主动推送客户端</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端实践</tag>
      
      <tag>复习总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack 实践总结</title>
    <link href="/2023/04/14/webpack%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2023/04/14/webpack%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、webpack-原理"><a href="#一、webpack-原理" class="headerlink" title="一、webpack 原理"></a>一、webpack 原理</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a><strong>1</strong>、概念</h3><blockquote><p><strong>webpack</strong> 是一个用于现代 JavaScript 应用程序的 _静态模块打包工具_。当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a>，然后将你项目中所需的每一个模块组合成一个或多个 _bundles_，它们均为静态资源，用于展示你的内容。</p></blockquote><p>也就是将各种类型的资源，包括图片、css、js 等，转译、组合、拼接、生成 JS 格式的 bundler 文件，官网首页的动画很形象地表达了这一点：</p><p><img src="/./images/23-4-14/webpack-concept.jpg" alt="webpack-concept"></p><span id="more"></span><h3 id="2、核心流程"><a href="#2、核心流程" class="headerlink" title="2、核心流程"></a>2、核心流程</h3><p>webpack 的执行过程核心完成了内容转换和资源合并两种功能，实现上可包含三个阶段：初始化阶段、构建阶段、生成阶段。如下图所示：</p><p><img src="/./images/23-4-14/webpack-flow-chart.png" alt="webpack-flow-chart"></p><h5 id="i-初始化阶段"><a href="#i-初始化阶段" class="headerlink" title="i. 初始化阶段"></a>i. 初始化阶段</h5><ol><li><p><strong>初始化参数</strong>：从配置文件、 配置对象、Shell 参数中读取，与默认配置结合得出最终的参数：</p><ul><li><p>将 <code>process.args + webpack.config.js</code> 合并成用户配置</p></li><li><p>调用 <code>validateSchema</code> 校验配置</p></li><li><p>调用 <code>getNormalizedWebpackOptions + applyWebpackOptionsBaseDefaults</code> 合并出最终配置</p></li></ul></li><li><p><strong>创建编译器对象</strong>：用上一步得到的参数创建 <code>Compiler</code> 对象</p></li><li><p><strong>初始化编译环境</strong>：包括注入内置插件、注册各种模块工厂、初始化 RuleSet 集合、加载配置的插件等：</p><ul><li><p>遍历用户定义的 <code>plugins</code> 集合，执行插件的 <code>apply</code> 方法</p></li><li><p>调用 <code>new WebpackOptionsApply().process</code> 方法，加载各种内置插件</p></li></ul></li><li><p><strong>开始编译</strong>：执行 <code>compiler</code> 对象的 <code>run</code> 方法</p></li><li><p><strong>确定入口</strong>：根据配置中的 <code>entry</code> 找出所有的入口文件，调用 <code>compilition.addEntry</code> 将入口文件转换为 <code>dependence</code> 对象</p></li></ol><h5 id="ii-构建阶段"><a href="#ii-构建阶段" class="headerlink" title="ii. 构建阶段"></a>ii. 构建阶段</h5><ol><li>**编译模块(make)**：根据 <code>entry</code> 对应的 <code>dependence</code> 创建 <code>module</code> 对象，调用 <code>loader</code> 将模块转译为标准 JS 内容，调用 JS 解释器将内容转换为 AST 对象，从中找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理：<ul><li>调用 <code>handleModuleCreate</code> ，根据文件类型构建 <code>module</code> 子类</li><li>调用 loader-runner 仓库的 <code>runLoaders</code> 转译 <code>module</code> 内容，通常是从各类资源类型转译为 JavaScript 文本</li><li>调用 acorn 将 JS 文本解析为 AST</li><li>遍历 AST，触发各种钩子<ul><li>在 <code>HarmonyExportDependencyParserPlugin</code> 插件监听 <code>exportImportSpecifier</code> 钩子，解读 JS 文本对应的资源依赖</li><li>调用 <code>module</code> 对象的 <code>addDependency</code> 将依赖对象加入到 <code>module</code> 依赖列表中</li></ul></li><li>AST 遍历完毕后，调用 <code>module.handleParseResult</code> 处理模块依赖</li><li>对于 <code>module</code> 新增的依赖，调用 <code>handleModuleCreate</code> ，控制流回到第一步</li><li>所有依赖都解析完毕后，构建阶段结束</li></ul></li><li><strong>完成模块编译</strong>：上一步递归处理所有能触达到的模块后，得到了每个模块被翻译后的内容以及它们之间的<strong>依赖关系图</strong></li></ol><h5 id="iii-生成阶段"><a href="#iii-生成阶段" class="headerlink" title="iii. 生成阶段"></a>iii. 生成阶段</h5><ol><li>**输出资源(seal)**：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>Chunk</code>，再把每个 <code>Chunk</code> 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会：<ul><li>构建本次编译的 <code>ChunkGraph</code> 对象；</li><li>遍历 <code>compilation.modules</code> 集合，将 <code>module</code> 按 <code>entry/动态引入</code> 的规则分配给不同的 <code>Chunk</code> 对象；</li><li><code>compilation.modules</code> 集合遍历完毕后，得到完整的 <code>chunks</code> 集合对象，调用 <code>createXxxAssets</code> 方法</li><li><code>createXxxAssets</code> 遍历 <code>module/chunk</code> ，调用 <code>compilation.emitAssets</code> 方法将 <code>assets</code> 信息记录到 <code>compilation.assets</code> 对象中</li></ul></li><li>**写入文件系统(emitAssets)**：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统：<ul><li>触发 <code>seal</code> 回调，控制流回到 <code>compiler</code> 对象</li><li><code>compiler</code> 对象调用<code>outputFileSystem.writeFile</code>输出文件</li></ul></li></ol><h5 id="iv-资源形态流转"><a href="#iv-资源形态流转" class="headerlink" title="iv. 资源形态流转"></a>iv. 资源形态流转</h5><p><img src="/./images/23-4-14/webpack-resource.png" alt="webpack-resource"></p><p>原理详细可参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&amp;mid=2247483744&amp;idx=1&amp;sn=d7128a76eed20746cd8c5100f0899138&amp;chksm=cf00bc19f877350f17844b283fa0f39daa111864aa69f0be8ce05d3809c51496da43de018a17&amp;scene=178&amp;cur_album_id=1856066636953272321#rd">https://mp.weixin.qq.com/s?__biz=Mzg3OTYwMjcxMA==&amp;mid=2247483744&amp;idx=1&amp;sn=d7128a76eed20746cd8c5100f0899138&amp;chksm=cf00bc19f877350f17844b283fa0f39daa111864aa69f0be8ce05d3809c51496da43de018a17&amp;scene=178&amp;cur_album_id=1856066636953272321#rd</a></p><h3 id="3、依赖图-dependency-graph"><a href="#3、依赖图-dependency-graph" class="headerlink" title="3、依赖图(dependency graph)"></a>3、依赖图(dependency graph)</h3><p>Dependency Graph 概念在 webpack 官网是这样解释的：</p><blockquote><p>每当一个文件依赖另一个文件时，webpack 都会将文件视为直接存在 _依赖关系_。这使得 webpack 可以获取非代码资源，如 images 或 web 字体等。并会把它们作为 <em>依赖</em> 提供给应用程序。</p><p>当 webpack 处理应用程序时，它会根据命令行参数中或配置文件中定义的模块列表开始处理。 从入口开始，webpack 会递归的构建一个 _依赖关系图_，这个依赖图包含着应用程序中所需的每个模块，然后将所有模块打包为少量的 <em>bundle</em> —— 通常只有一个 —— 可由浏览器加载。</p></blockquote><p>就是 webpack 处理应用代码时，会从开发者提供的 entry 开始递归地组建起包含所有模块的 <strong>dependency graph</strong>，之后再将这些 module 打包为 bundles 。</p><p>经过上述<a href="#2%E3%80%81%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B">webpack 核心流程</a>可知，Dependency Graph 贯穿 webpack 整个运行周期，从[构建阶段](#ii. 构建阶段)的模块解析，到[生成阶段](#iii. 生成阶段)的 chunk 生成，以及 tree-shaking 功能都高度依赖于 Dependency Graph ，是 webpack 资源构建的一个非常核心的数据结构。</p><p>先了解 webpack 几个重要的概念：</p><ul><li><p><code>Module</code>：资源在 webpack 内部的映射对象，包含了资源的路径、上下文、依赖、内容等信息</p></li><li><p><code>Dependency</code> ：在模块中引用其它模块，例如 <code>import &quot;a.js&quot;</code> 语句，webpack 会先将引用关系表述为 Dependency 子类并关联 module 对象，等到当前 module 内容都解析完毕之后，启动下次循环开始将 Dependency 对象转换为适当的 Module 子类。</p></li><li><p><code>Chunk</code> ：用于组织输出结构的对象，webpack 分析完所有模块资源的内容，构建出完整的 Dependency Graph 之后，会根据用户配置及 Dependency Graph 内容构建出一个或多个 chunk 实例，每个 chunk 与最终输出的文件大致上是一一对应的。</p></li></ul><p>下面开始介绍 Dependency Graph 的内在数据结构、依赖关系收集过程及构建 ChunkGraph 过程。</p><h5 id="i-数据结构"><a href="#i-数据结构" class="headerlink" title="i. 数据结构"></a>i. 数据结构</h5><p>Webpack 5.0 之后则实现了一套相对复杂的类结构记录模块间依赖关系，如下图所示：</p><p><img src="/./images/23-4-14/module-graph.png" alt="module-graph"></p><p>可知，将模块依赖相关的逻辑从 Dependence&#x2F;Module 解耦为一套独立的类型结构，主要类型有：</p><ul><li><p><code>ModuleGraph</code> ：记录 Dependency Graph 信息的容器，一方面保存了构建过程中涉及到的所有 <code>module</code> 、<code>dependency</code> 对象，以及这些对象互相之间的引用；另一方面提供了各种工具方法，方便使用者迅速读取出 <code>module</code> 或 <code>dependency</code> 附加的信息</p></li><li><p><code>ModuleGraphConnection</code> ：记录模块间引用关系的数据结构，内部通过 <code>originModule</code> 属性记录引用关系中的父模块，通过 <code>module</code> 属性记录子模块。此外还提供了一系列函数工具用于判断对应的引用关系的有效性</p></li><li><p><code>ModuleGraphModule</code> ：<code>Module</code> 对象在 Dependency Graph 体系下的补充信息，包含模块对象的 <code>incomingConnections</code> —— 指向模块本身的 ModuleGraphConnection 集合，即谁引用了模块自己；<code>outgoingConnections</code> —— 该模块对外的依赖，即该模块引用了其他那些模块。</p></li></ul><p>需要注意的是：</p><ul><li><p><code>ModuleGraph</code> 对象通过 <code>_dependencyMap</code> 属性记录 <code>Dependency</code> 对象与 <code>ModuleGraphConnection</code> 连接对象之间的映射关系，后续的处理中可以基于这层映射迅速找到 <code>Dependency</code> 实例对应的引用与被引用者</p></li><li><p><code>ModuleGraph</code> 对象通过 <code>_moduleMap</code> 在 <code>module</code> 基础上附加 <code>ModuleGraphModule</code> 信息，而 <code>ModuleGraphModule</code> 最大的作用就是记录了模块的引用与被引用关系，后续的处理可以基于该属性找到 <code>module</code> 实例的所有依赖与被依赖关系</p></li></ul><h5 id="ii-依赖收集过程"><a href="#ii-依赖收集过程" class="headerlink" title="ii. 依赖收集过程"></a>ii. 依赖收集过程</h5><p><code>ModuleGraph</code>、<code>ModuleGraphConnection</code>、<code>ModuleGraphModule</code> 三者协作，在 webpack [构建过程(make 阶段)](#ii. 构建阶段)中逐步收集模块间的依赖关系，可以参考<a href="#2%E3%80%81%E6%A0%B8%E5%BF%83%E6%B5%81%E7%A8%8B">webpack 核心流程</a>的流程图，可知，依赖关系收集过程主要发生在两个节点：</p><ul><li><p><code>addDependency</code> ：webpack 从模块内容中解析出引用关系后，创建适当的 <code>Dependency</code> 子类并调用该方法记录到 <code>module</code> 实例</p></li><li><p><code>handleModuleCreation</code> ：模块解析完毕后，webpack 遍历父模块的依赖集合，调用该方法创建 <code>Dependency</code> 对应的子模块对象，之后调用 <code>compilation.moduleGraph.setResolvedModule</code> 方法将父子引用信息记录到 <code>moduleGraph</code> 对象上</p></li></ul><p><code>setResolvedModule</code> 方法的逻辑大致为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ModuleGraph</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">Map&lt;Dependency, ModuleGraphConnection&gt;</span>&#125; */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dependencyMap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">Map&lt;Module, ModuleGraphModule&gt;</span>&#125; */</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_moduleMap</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>();<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Module</span>&#125; originModule the referencing module</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Dependency</span>&#125; dependency the referencing dependency</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Module</span>&#125; module the referenced module</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@returns</span> &#123;<span class="hljs-type">void</span>&#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-title function_">setResolvedModule</span>(<span class="hljs-params">originModule, dependency, <span class="hljs-variable language_">module</span></span>) &#123;<br>    <span class="hljs-keyword">const</span> connection = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModuleGraphConnection</span>(<br>      originModule,<br>      dependency,<br>      <span class="hljs-variable language_">module</span>,<br>      <span class="hljs-literal">undefined</span>,<br>      dependency.<span class="hljs-property">weak</span>,<br>      dependency.<span class="hljs-title function_">getCondition</span>(<span class="hljs-variable language_">this</span>)<br>    );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dependencyMap</span>.<span class="hljs-title function_">set</span>(dependency, connection);<br>    <span class="hljs-keyword">const</span> connections = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_getModuleGraphModule</span>(<span class="hljs-variable language_">module</span>).<span class="hljs-property">incomingConnections</span>;<br>    connections.<span class="hljs-title function_">add</span>(connection);<br>    <span class="hljs-keyword">const</span> mgm = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">_getModuleGraphModule</span>(originModule);<br>    <span class="hljs-keyword">if</span> (mgm.<span class="hljs-property">outgoingConnections</span> === <span class="hljs-literal">undefined</span>) &#123;<br>      mgm.<span class="hljs-property">outgoingConnections</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>();<br>    &#125;<br>    mgm.<span class="hljs-property">outgoingConnections</span>.<span class="hljs-title function_">add</span>(connection);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上例代码主要更改了 <code>_dependencyMap</code> 及 <code>moduleGraphModule</code> 的出入 <code>connections</code> 属性，以此收集当前模块的上下游依赖关系。</p><p>可以看个简单例子，对于如下图的依赖关系：</p><p><img src="/./images/23-4-14/module-graph-demo.png" alt="module-graph-demo"></p><p>Webpack 启动后，在构建阶段递归调用 <code>compilation.handleModuleCreation</code> 函数，逐步补齐 Dependency Graph 结构，最终可能生成如下数据结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ModuleGraph</span>: &#123;<br>    <span class="hljs-attr">_dependencyMap</span>: <span class="hljs-title class_">Map</span>(<span class="hljs-number">3</span>)&#123;<br>        &#123;<br>            <span class="hljs-title class_">EntryDependency</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125; =&gt; <span class="hljs-title class_">ModuleGraphConnection</span>&#123;<br>                <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125;,<br>                <span class="hljs-comment">// 入口模块没有引用者，故设置为 null</span><br>                <span class="hljs-attr">originModule</span>: <span class="hljs-literal">null</span><br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-title class_">HarmonyImportSideEffectDependency</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/a.js&quot;</span>&#125; =&gt; <span class="hljs-title class_">ModuleGraphConnection</span>&#123;<br>                <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/a.js&quot;</span>&#125;,<br>                <span class="hljs-attr">originModule</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125;<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class="hljs-title class_">HarmonyImportSideEffectDependency</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/b.js&quot;</span>&#125; =&gt; <span class="hljs-title class_">ModuleGraphConnection</span>&#123;<br>                <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/b.js&quot;</span>&#125;,<br>                <span class="hljs-attr">originModule</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125;<br>            &#125;<br>        &#125;<br>    &#125;,<br><br>    <span class="hljs-attr">_moduleMap</span>: <span class="hljs-title class_">Map</span>(<span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125; =&gt; <span class="hljs-title class_">ModuleGraphModule</span>&#123;<br>            <span class="hljs-attr">incomingConnections</span>: <span class="hljs-title class_">Set</span>(<span class="hljs-number">1</span>) [<br>                <span class="hljs-comment">// entry 模块，对应 originModule 为null</span><br>                <span class="hljs-title class_">ModuleGraphConnection</span>&#123; <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125;, <span class="hljs-attr">originModule</span>:<span class="hljs-literal">null</span> &#125;<br>            ],<br>            <span class="hljs-attr">outgoingConnections</span>: <span class="hljs-title class_">Set</span>(<span class="hljs-number">2</span>) [<br>                <span class="hljs-comment">// 从 index 指向 a 模块</span><br>                <span class="hljs-title class_">ModuleGraphConnection</span>&#123; <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/a.js&quot;</span>&#125;, <span class="hljs-attr">originModule</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125; &#125;,<br>                <span class="hljs-comment">// 从 index 指向 b 模块</span><br>                <span class="hljs-title class_">ModuleGraphConnection</span>&#123; <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/b.js&quot;</span>&#125;, <span class="hljs-attr">originModule</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125; &#125;<br>            ]<br>        &#125;,<br>        <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/a.js&quot;</span>&#125; =&gt; <span class="hljs-title class_">ModuleGraphModule</span>&#123;<br>            <span class="hljs-attr">incomingConnections</span>: <span class="hljs-title class_">Set</span>(<span class="hljs-number">1</span>) [<br>                <span class="hljs-title class_">ModuleGraphConnection</span>&#123; <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/a.js&quot;</span>&#125;, <span class="hljs-attr">originModule</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125; &#125;<br>            ],<br>            <span class="hljs-comment">// a 模块没有其他依赖，故 outgoingConnections 属性值为 undefined</span><br>            <span class="hljs-attr">outgoingConnections</span>: <span class="hljs-literal">undefined</span><br>        &#125;,<br>        <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/b.js&quot;</span>&#125; =&gt; <span class="hljs-title class_">ModuleGraphModule</span>&#123;<br>            <span class="hljs-attr">incomingConnections</span>: <span class="hljs-title class_">Set</span>(<span class="hljs-number">1</span>) [<br>                <span class="hljs-title class_">ModuleGraphConnection</span>&#123; <span class="hljs-attr">module</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/b.js&quot;</span>&#125;, <span class="hljs-attr">originModule</span>: <span class="hljs-title class_">NormalModule</span>&#123;<span class="hljs-attr">request</span>: <span class="hljs-string">&quot;./src/index.js&quot;</span>&#125; &#125;<br>            ],<br>            <span class="hljs-comment">// b 模块没有其他依赖，故 outgoingConnections 属性值为 undefined</span><br>            <span class="hljs-attr">outgoingConnections</span>: <span class="hljs-literal">undefined</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从上面的 Dependency Graph 可以看出，本质上 <code>ModuleGraph._moduleMap</code> 已经形成了一个有向无环图结构，其中字典 <code>_moduleMap</code> 的 key 为图的节点，对应 value <code>ModuleGraphModule</code> 结构中的 <code>outgoingConnections</code> 属性为图的边，则上例中从起点 <code>index.js</code> 出发沿 <code>outgoingConnections</code> 向前可遍历出图的所有顶点。</p><h5 id="iii-构建-ChunkGraph"><a href="#iii-构建-ChunkGraph" class="headerlink" title="iii. 构建 ChunkGraph"></a>iii. 构建 ChunkGraph</h5><p>Webpack 主体流程中，make 构建阶段结束之后会进入 <code>seal</code> 阶段，开始梳理以何种方式组织输出内容。在<code>seal</code> 阶段与 Dependency Graph 类似也引入了一套全新的基于 <code>ChunkGraph</code> 的图结构实现资源生成算法。</p><p>在 compilation.seal 函数中，首先根据默认规则 —— 每个 entry 对应组织为一个 chunk ，之后调用 <code>webpack/lib/buildChunkGraph.js</code> 文件定义的 <code>buildChunkGraph</code> 方法，遍历 <code>make</code> 阶段生成的 <code>moduleGraph</code> 对象从而将 module 依赖关系转化为 <code>chunkGraph</code> 对象。</p><h3 id="4、插件架构"><a href="#4、插件架构" class="headerlink" title="4、插件架构"></a>4、插件架构</h3><p>webpack 的插件体系是一种基于 Tapable 库实现的强耦合架构，它在特定时机触发钩子时会附带上足够的上下文信息，插件定义的钩子回调中，能也只能与这些上下文背后的数据结构、接口交互产生 side effect，进而影响到编译状态和后续流程。</p><h5 id="i-什么是插件"><a href="#i-什么是插件" class="headerlink" title="i. 什么是插件"></a>i. 什么是插件</h5><p>插件通常是一个带有 apply 函数的类，Webpack 会在启动后按照注册的顺序逐次调用插件对象的 apply 函数，同时传入编译器对象 compiler ，插件开发者可以以此为起点触达到 webpack 内部定义的任意钩子，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomePlugin</span> &#123;<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">thisCompilation</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;SomePlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">compilation</span>) =&gt;</span> &#123;&#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中 <code>thisCompilation</code> 为 tapable 仓库提供的钩子对象；<code>tap</code> 为订阅函数，用于注册回调。</p><h5 id="ii-Tapable-库"><a href="#ii-Tapable-库" class="headerlink" title="ii. Tapable 库"></a>ii. Tapable 库</h5><p>Tapable 是 Webpack 插件架构的核心支架，本质上就是围绕着 订阅&#x2F;发布 模式叠加各种特化逻辑，适配 webpack 体系下复杂的事件源-处理器之间交互需求，比如说有些场景需要支持将前一个处理器的结果传入下一个回调处理器；有些场景需要支持异步并行调用这些回调处理器。</p><p>Tapable 使用时通常需要经历如下步骤：</p><ul><li>创建钩子实例</li><li>调用订阅接口注册回调，包括：<code>tap、tapAsync、tapPromise</code></li><li>调用发布接口触发回调，包括：<code>call、callAsync、promise</code></li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-comment">// 1. 创建钩子实例</span><br><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>();<br><br><span class="hljs-comment">// 2. 调用订阅接口注册回调</span><br>sleep.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 3. 调用发布接口触发回调</span><br>sleep.<span class="hljs-title function_">call</span>();<br><br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// callback A</span><br></code></pre></td></tr></table></figure><p>Tabable 提供的钩子类型有：</p><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>SyncHook</td><td>同步钩子</td></tr><tr><td>SyncBailHook</td><td>同步熔断钩子</td></tr><tr><td>SyncWaterfallHook</td><td>同步瀑布流钩子</td></tr><tr><td>SyncLoopHook</td><td>同步循环钩子</td></tr><tr><td>AsyncParallelHook</td><td>异步并行钩子</td></tr><tr><td>AsyncParallelBailHook</td><td>异步并行熔断钩子</td></tr><tr><td>AsyncSeriesHook</td><td>异步串行钩子</td></tr><tr><td>AsyncSeriesBailHook</td><td>异步串行熔断钩子</td></tr><tr><td>AsyncSeriesLoopHook</td><td>异步串行循环钩子</td></tr><tr><td>AsyncSeriesWaterfallHook</td><td>异步串行瀑布流钩子</td></tr></tbody></table><ol><li><p>SyncHook</p><p><code>SyncHook</code> 触发后会按照注册的顺序逐个调用回调，且不关心这些回调的返回值。</p><p>实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 实现逻辑</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">syncCall</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> callbacks = [fn1, fn2, fn3];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; callbacks.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> cb = callbacks[i];<br>    <span class="hljs-title function_">cb</span>();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Somebody</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">sleep</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 触发回调</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">call</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Somebody</span>();<br><br><span class="hljs-comment">// 注册回调</span><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>&#125;);<br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback B&quot;</span>);<br>&#125;);<br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback C&quot;</span>);<br>&#125;);<br><br>person.<span class="hljs-title function_">sleep</span>();<br><span class="hljs-comment">// 输出结果：</span><br><span class="hljs-comment">// callback A</span><br><span class="hljs-comment">// callback B</span><br><span class="hljs-comment">// callback C</span><br></code></pre></td></tr></table></figure><p><code>SyncHook</code> 触发回调也可以选择异步风格的 <code>callAsync</code> ，与 <code>call</code> 区别是 <code>callAsync</code> 需要传入 <code>callback</code> 函数，用于处理回调队列可能抛出的异常：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// call 风格</span><br><span class="hljs-keyword">try</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">call</span>();<br>&#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>  <span class="hljs-comment">// 错误处理逻辑</span><br>&#125;<br><span class="hljs-comment">// callAsync 风格</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">callAsync</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-comment">// 错误处理逻辑</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>使用<code>callAsync</code>函数来触发回调的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Somebody</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">sleep</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>(),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//   触发回调</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">callAsync</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`interrupt with &quot;<span class="hljs-subst">$&#123;err.message&#125;</span>&quot;`</span>);<br>      &#125;<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Somebody</span>();<br><br><span class="hljs-comment">// 注册回调</span><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;我就是要报错&quot;</span>);<br>&#125;);<br><span class="hljs-comment">// 第一个回调出错后，后续回调不会执行</span><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback B&quot;</span>);<br>&#125;);<br><br>person.<span class="hljs-title function_">sleep</span>();<br><br><span class="hljs-comment">// 输出结果：</span><br><span class="hljs-comment">// callback A</span><br><span class="hljs-comment">// interrupt with &quot;我就是要报错&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>SyncBailHook</p><p><code>bail</code> 类型钩子的特点是在回调队列中，若任一回调返回了非 <code>undefined</code> 的值，则中断后续处理，直接返回该值。</p><p>实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">bailCall</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> callbacks = [fn1, fn2, fn3];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> callbacks) &#123;<br>    <span class="hljs-keyword">const</span> cb = callbacks[i];<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-title function_">cb</span>(lastResult);<br>    <span class="hljs-keyword">if</span> (result !== <span class="hljs-literal">undefined</span>) &#123;<br>      <span class="hljs-comment">// 熔断</span><br>      <span class="hljs-keyword">return</span> result;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">undefined</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncBailHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Somebody</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">sleep</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncBailHook</span>(),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">call</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Somebody</span>();<br><br><span class="hljs-comment">// 注册回调</span><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>  <span class="hljs-comment">// 熔断点</span><br>  <span class="hljs-comment">// 返回非 undefined 的任意值都会中断回调队列</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;返回值：jason&quot;</span>;<br>&#125;);<br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback B&quot;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-title function_">sleep</span>());<br><br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// callback A</span><br><span class="hljs-comment">// 返回值：jason</span><br></code></pre></td></tr></table></figure></li><li><p>SyncWaterfallHook</p><p><code>waterfall</code> 钩子的执行逻辑跟 lodash 的 <code>flow</code> 函数有点像，大致上就是会将前一个函数的返回值作为参数传入下一个函数。</p><p>实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waterfallCall</span>(<span class="hljs-params">arg</span>) &#123;<br>  <span class="hljs-keyword">const</span> callbacks = [fn1, fn2, fn3];<br>  <span class="hljs-keyword">let</span> lastResult = arg;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> callbacks) &#123;<br>    <span class="hljs-keyword">const</span> cb = callbacks[i];<br>    <span class="hljs-comment">// 上次执行结果作为参数传入下一个函数</span><br>    lastResult = <span class="hljs-title function_">cb</span>(lastResult);<br>  &#125;<br>  <span class="hljs-keyword">return</span> lastResult;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncWaterfallHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Somebody</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">sleep</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncWaterfallHook</span>([<span class="hljs-string">&quot;msg&quot;</span>]),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">call</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Somebody</span>();<br><br><span class="hljs-comment">// 注册回调</span><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`call 调用传入： <span class="hljs-subst">$&#123;arg&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;arg&#125;</span> jason`</span>;<br>&#125;);<br><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`A 回调返回： <span class="hljs-subst">$&#123;arg&#125;</span>`</span>);<br>  <span class="hljs-keyword">return</span> arg;<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;最终结果：&quot;</span> + person.<span class="hljs-title function_">sleep</span>());<br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// call 调用传入： hello</span><br><span class="hljs-comment">// A 回调返回： hello jason</span><br><span class="hljs-comment">// 最终结果：hello jason</span><br></code></pre></td></tr></table></figure></li><li><p>SyncLoopHook</p><p><code>loop</code> 型钩子的特点是循环执行直到所有回调都返回 <code>undefined</code> ，不过这里循环的维度是单个回调函数，例如有回调队列 <code>[fn1, fn2, fn3]</code> ，<code>loop</code> 钩子先执行 <code>fn1</code> ，如果此时 <code>fn1</code> 返回了非 <code>undefined</code> 值，则继续执行 <code>fn1</code> 直到返回 <code>undefined</code> 后才向前推进执行 <code>fn2</code> 。</p><p>实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loopCall</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> callbacks = [fn1, fn2, fn3];<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> callbacks) &#123;<br>    <span class="hljs-keyword">const</span> cb = callbacks[i];<br>    <span class="hljs-comment">// 重复执行</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-title function_">cb</span>() !== <span class="hljs-literal">undefined</span>) &#123;&#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncLoopHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Somebody</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">sleep</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncLoopHook</span>(),<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">sleep</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">call</span>();<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> person = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Somebody</span>();<br><span class="hljs-keyword">let</span> times = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 注册回调</span><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  ++times;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`第 <span class="hljs-subst">$&#123;times&#125;</span> 次执行回调A`</span>);<br>  <span class="hljs-keyword">if</span> (times &lt; <span class="hljs-number">4</span>) &#123;<br>    <span class="hljs-keyword">return</span> times;<br>  &#125;<br>&#125;);<br><br>person.<span class="hljs-property">hooks</span>.<span class="hljs-property">sleep</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">(<span class="hljs-params">arg</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`执行回调B`</span>);<br>&#125;);<br><br>person.<span class="hljs-title function_">sleep</span>();<br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">// 第 1 次执行回调A</span><br><span class="hljs-comment">// 第 2 次执行回调A</span><br><span class="hljs-comment">// 第 3 次执行回调A</span><br><span class="hljs-comment">// 第 4 次执行回调A</span><br><span class="hljs-comment">// 执行回调B</span><br></code></pre></td></tr></table></figure></li><li><p>AsyncSeriesHook</p><p><code>Async</code> 开头的异步钩子，支持在回调函数中执行异步操作：</p><p>实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncSeriesCall</span>(<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> callbacks = [fn1, fn2, fn3];<br>  <span class="hljs-comment">//   执行回调 1</span><br>  <span class="hljs-title function_">fn1</span>(<span class="hljs-function">(<span class="hljs-params">err1</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (err1) &#123;<br>      <span class="hljs-title function_">callback</span>(err1);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">//   执行回调 2</span><br>      <span class="hljs-title function_">fn2</span>(<span class="hljs-function">(<span class="hljs-params">err2</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (err2) &#123;<br>          <span class="hljs-title function_">callback</span>(err2);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-comment">//   执行回调 3</span><br>          <span class="hljs-title function_">fn3</span>(<span class="hljs-function">(<span class="hljs-params">err3</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (err3) &#123;<br>              <span class="hljs-title function_">callback</span>(err2);<br>            &#125;<br>          &#125;);<br>        &#125;<br>      &#125;);<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">AsyncSeriesHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>();<br><br><span class="hljs-comment">// 注册回调</span><br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">(<span class="hljs-params">cb</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A 异步操作结束&quot;</span>);<br>    <span class="hljs-comment">// 回调结束时，调用 cb 通知 tapable 当前回调已结束</span><br>    <span class="hljs-title function_">cb</span>();<br>  &#125;, <span class="hljs-number">100</span>);<br>&#125;);<br><br>hook.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback B&quot;</span>);<br>&#125;);<br><br>hook.<span class="hljs-title function_">callAsync</span>();<br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// callback A</span><br><span class="hljs-comment">// callback A 异步操作结束</span><br><span class="hljs-comment">// callback B</span><br></code></pre></td></tr></table></figure><p>除了 <code>callback</code> 风格外，也可以使用 <code>promise</code> 风格调用 <code>tap/call</code> 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">AsyncSeriesHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>();<br><br><span class="hljs-comment">// 注册回调</span><br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A 异步操作结束&quot;</span>);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">100</span>);<br>  &#125;);<br>&#125;);<br><br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback B&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>&#125;);<br><br>hook.<span class="hljs-title function_">promise</span>();<br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// callback A</span><br><span class="hljs-comment">// callback A 异步操作结束</span><br><span class="hljs-comment">// callback B</span><br></code></pre></td></tr></table></figure></li><li><p>AsyncParallelHook</p><p>与 <code>AsyncSeriesHook</code> 类似，<code>AsyncParallelHook</code> 也支持异步风格的回调，不过 <code>AsyncParallelHook</code> 是以并行方式，同时执行回调队列里面的所有回调。</p><p>实现原理如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">asyncParallelCall</span>(<span class="hljs-params">callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> callbacks = [fn1, fn2];<br>  <span class="hljs-comment">// 内部维护了一个计数器</span><br>  <span class="hljs-keyword">var</span> _counter = <span class="hljs-number">2</span>;<br><br>  <span class="hljs-keyword">var</span> _done = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">_callback</span>();<br>  &#125;;<br>  <span class="hljs-keyword">if</span> (_counter &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 按序执行回调</span><br>  <span class="hljs-keyword">var</span> _fn0 = callbacks[<span class="hljs-number">0</span>];<br>  <span class="hljs-title function_">_fn0</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">_err0</span>) &#123;<br>    <span class="hljs-keyword">if</span> (_err0) &#123;<br>      <span class="hljs-keyword">if</span> (_counter &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 出错时，忽略后续回调，直接退出</span><br>        <span class="hljs-title function_">_callback</span>(_err0);<br>        _counter = <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (--_counter === <span class="hljs-number">0</span>) <span class="hljs-title function_">_done</span>();<br>    &#125;<br>  &#125;);<br>  <span class="hljs-keyword">if</span> (_counter &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>  <span class="hljs-comment">// 不需要等待前面回调结束，直接开始执行下一个回调</span><br>  <span class="hljs-keyword">var</span> _fn1 = callbacks[<span class="hljs-number">1</span>];<br>  <span class="hljs-title function_">_fn1</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">_err1</span>) &#123;<br>    <span class="hljs-keyword">if</span> (_err1) &#123;<br>      <span class="hljs-keyword">if</span> (_counter &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-title function_">_callback</span>(_err1);<br>        _counter = <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (--_counter === <span class="hljs-number">0</span>) <span class="hljs-title function_">_done</span>();<br>    &#125;<br>  &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">AsyncParallelHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">const</span> hook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncParallelHook</span>([<span class="hljs-string">&quot;hello&quot;</span>]);<br><br><span class="hljs-comment">// 注册回调</span><br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A 异步操作结束&quot;</span>);<br>      <span class="hljs-title function_">resolve</span>();<br>    &#125;, <span class="hljs-number">100</span>);<br>  &#125;);<br>&#125;);<br><br>hook.<span class="hljs-title function_">tapPromise</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback B&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>&#125;);<br><br>hook.<span class="hljs-title function_">promise</span>();<br><span class="hljs-comment">// 运行结果：</span><br><span class="hljs-comment">// callback A</span><br><span class="hljs-comment">// callback B</span><br><span class="hljs-comment">// callback A 异步操作结束</span><br></code></pre></td></tr></table></figure></li><li><p>其它钩子</p><ul><li><code>AsyncParallelBailHook</code> ：异步 + 并行 + 熔断，启动后同时执行所有回调，但任意回调有返回值时，忽略剩余未执行完的回调，直接返回该结果</li><li><code>AsyncSeriesBailHook</code> ：异步 + 串行 + 熔断，启动后按序逐个执行回调，过程中若有任意回调返回非 undefined 值，则停止后续调用，直接返回该结果</li><li><code>AsyncSeriesLoopHook</code>： 异步 + 串行 + 循环，启动后按序逐个执行回调，若有任意回调返回非 <code>undefined</code> 值，则重复执行该回调直到返回 <code>undefined</code> 后，才继续执行下一个回调</li></ul></li><li><p>动态编译</p><p>Tapable 所谓的同步、异步、bail、waterfall、loop 等回调规则都是基于动态编译能力实现的。</p><p>当用户执行钩子发布函数 <code>call/callAsync/promise</code> 时，tapable 会根据钩子类型、参数、回调队列等信息动态生成执行函数，例如对于下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncHook</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>();<br><br>sleep.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback A&quot;</span>);<br>&#125;);<br>sleep.<span class="hljs-title function_">call</span>();<br></code></pre></td></tr></table></figure><p>调用 <code>sleep.call</code> 时，tapable 内部处理大致流程如下图：</p><p><img src="/./images/23-4-14/tapable%E5%8A%A8%E6%80%81%E7%BC%96%E8%AF%91.png" alt="tapable动态编译"></p><p><code>SyncHook</code> (其他钩子类似) 调用 <code>call</code> 后，<code>Hook</code> 基类收集上下文信息并调用 <code>createCall</code> 及子类传入的 <code>compiler</code> 函数；<code>compiler</code> 调用 <code>HookCodeFactory</code> 进而使用 <code>new Function</code> 方法动态拼接出回调执行函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">(<span class="hljs-keyword">function</span> <span class="hljs-title function_">anonymous</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-string">&quot;use strict&quot;</span>;<br>  <span class="hljs-keyword">var</span> _context;<br>  <span class="hljs-keyword">var</span> _x = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_x</span>;<br>  <span class="hljs-keyword">var</span> _fn0 = _x[<span class="hljs-number">0</span>];<br>  <span class="hljs-title function_">_fn0</span>();<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>高级特性：Intercept</p><p>除了通常的 <code>tap/call</code> 之外，tapable 还提供了简易的中间件机制 —— <code>intercept</code> 接口，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>();<br><br>sleep.<span class="hljs-title function_">intercept</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;test&quot;</span>,<br>  <span class="hljs-attr">context</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;before call&quot;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">loop</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;before loop&quot;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">tap</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;before each callback&quot;</span>);<br>  &#125;,<br>  <span class="hljs-title function_">register</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;every time call tap&quot;</span>);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>intercept</code> 支持注册如下类型的中间件：</p><table><thead><tr><th></th><th>签名</th><th>解释</th></tr></thead><tbody><tr><td>call</td><td>(…args) &#x3D;&gt; void</td><td>调用 call&#x2F;callAsync&#x2F;promise 时触发</td></tr><tr><td>tap</td><td>(tap: Tap) &#x3D;&gt; void</td><td>调用 call 类函数后，每次调用回调之前触发</td></tr><tr><td>loop</td><td>(…args) &#x3D;&gt; void</td><td>仅 loop 型的钩子有效，在循环开始之前触发</td></tr><tr><td>register</td><td>(tap: Tap) &#x3D;&gt; Tap | undefined</td><td>调用 tap&#x2F;tapAsync&#x2F;tapPromise 时触发</td></tr></tbody></table><p>其中 <code>register</code> 在每次调用 tap 时被调用；其他三种中间件的触发时机大致如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> _context;<br><span class="hljs-keyword">const</span> callbacks = [fn1, fn2];<br><span class="hljs-keyword">var</span> _interceptors = <span class="hljs-variable language_">this</span>.<span class="hljs-property">interceptors</span>;<br><span class="hljs-comment">// 调用 call 函数，立即触发</span><br>_interceptors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">intercept</span>) =&gt;</span> intercept.<span class="hljs-title function_">call</span>(_context));<br><span class="hljs-keyword">var</span> _loop;<br><span class="hljs-keyword">var</span> cursor = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>  _loop = <span class="hljs-literal">false</span>;<br>  <span class="hljs-comment">// 每次循环开始时触发 `loop`</span><br>  _interceptors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">intercept</span>) =&gt;</span> intercept.<span class="hljs-title function_">loop</span>(_context));<br>  <span class="hljs-comment">// 触发 `tap`</span><br>  <span class="hljs-keyword">var</span> _fn0 = callbacks[<span class="hljs-number">0</span>];<br>  _interceptors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">intercept</span>) =&gt;</span> intercept.<span class="hljs-title function_">tap</span>(_context, _fn0));<br>  <span class="hljs-keyword">var</span> _result0 = <span class="hljs-title function_">_fn0</span>();<br>  <span class="hljs-keyword">if</span> (_result0 !== <span class="hljs-literal">undefined</span>) &#123;<br>    _loop = <span class="hljs-literal">true</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">var</span> _fn1 = callbacks[<span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 再次触发 `tap`</span><br>    _interceptors.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">intercept</span>) =&gt;</span> intercept.<span class="hljs-title function_">tap</span>(_context, _fn1));<br>    <span class="hljs-keyword">var</span> _result1 = <span class="hljs-title function_">_fn1</span>();<br>    <span class="hljs-keyword">if</span> (_result1 !== <span class="hljs-literal">undefined</span>) &#123;<br>      _loop = <span class="hljs-literal">true</span>;<br>    &#125;<br>  &#125;<br>&#125; <span class="hljs-keyword">while</span> (_loop);<br></code></pre></td></tr></table></figure><p><code>intercept</code> 特性在 webpack 内主要被用作进度提示，如 <code>webpack/lib/ProgressPlugin</code> 插件中，分别对 <code>compiler.hooks.emit</code> 、<code>compiler.hooks.afterEmit</code> 钩子应用了记录进度的中间件函数。</p></li><li><p>高级特性：HookMap</p><p>Tapable 还有一个特性值得注意的特性 —— <code>HookMap</code> 。<code>HookMap</code> 提供了一种集合操作能力，能够降低创建与使用的复杂度，用法比较简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">SyncHook</span>, <span class="hljs-title class_">HookMap</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;tapable&quot;</span>);<br><br><span class="hljs-keyword">const</span> sleep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HookMap</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>());<br><br><span class="hljs-comment">// 通过 for 函数过滤集合中的特定钩子</span><br>sleep.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;statement&quot;</span>).<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;callback for statement&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// 触发 statement 类型的钩子</span><br>sleep.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;statement&quot;</span>).<span class="hljs-title function_">call</span>();<br></code></pre></td></tr></table></figure><p>在 webpack 中，HookMap 集中在 <code>webpack/lib/parser.js</code> 文件中，<code>parser</code> 文件主要完成将资源内容解析为 AST 集合，解析完成后遍历 AST 并以钩子方式对外通知遍历到的内容。例如遇到表达式的时候触发 <code>Parser.hooks.expression</code> 钩子，问题是 AST 结构和内容都很复杂，如果所有情景都以独立的钩子实现，那代码量工作量会急剧膨胀。这种场景就很适合用 <code>HookMap</code> 解决。</p></li></ol><h5 id="iii-Webpack-插件架构"><a href="#iii-Webpack-插件架构" class="headerlink" title="iii. Webpack 插件架构"></a>iii. Webpack 插件架构</h5><p>综上，webpack 为开发者提供了基于 tapable 钩子的插件方案：</p><ol><li>编译过程的特定节点以钩子形式，通知插件此刻正在发生什么事情；</li><li>通过 tapable 提供的回调机制，以参数方式传递上下文信息；</li><li>在上下文参数对象中附带了很多存在 side effect 的交互接口，插件可以通过这些接口改变</li></ol><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compiler</span> &#123;<br>  <span class="hljs-comment">// 在构造函数中，先初始化钩子对象</span><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-attr">thisCompilation</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>, <span class="hljs-string">&quot;params&quot;</span>]),<br>    &#125;;<br>  &#125;<br><br>  <span class="hljs-title function_">compile</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 特定时机触发特定钩子</span><br>    <span class="hljs-keyword">const</span> compilation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Compilation</span>();<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">thisCompilation</span>.<span class="hljs-title function_">call</span>(compilation);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Compiler</code> 类型内部定义了 <code>thisCompilation</code> 钩子，并在 <code>compilation</code> 创建完毕后发布事件消息，插件开发者就可以基于这个钩子获取到最新创建出的 <code>compilation</code> 对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SomePlugin</span> &#123;<br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">thisCompilation</span>.<span class="hljs-title function_">tap</span>(<span class="hljs-string">&quot;SomePlugin&quot;</span>, <span class="hljs-function">(<span class="hljs-params">compilation, params</span>) =&gt;</span> &#123;<br>      <span class="hljs-comment">// 上下文信息： compilation、params</span><br>    &#125;);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>钩子回调传递的 <code>compilation/params</code> 参数就是 webpack 希望传递给插件的上下文信息，也是插件能拿到的输入。不同钩子会传递不同的上下文对象，这一点在钩子被创建的时候就定下来了，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Compiler</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span> = &#123;<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">SyncBailHook&lt;Compilation&gt;</span>&#125; */</span><br>      <span class="hljs-attr">shouldEmit</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">SyncBailHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;Stats&gt;</span>&#125; */</span><br>      <span class="hljs-attr">done</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;stats&quot;</span>]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;&gt;</span>&#125; */</span><br>      <span class="hljs-attr">additionalPass</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;Compiler&gt;</span>&#125; */</span><br>      <span class="hljs-attr">beforeRun</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compiler&quot;</span>]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;Compiler&gt;</span>&#125; */</span><br>      <span class="hljs-attr">run</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compiler&quot;</span>]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;Compilation&gt;</span>&#125; */</span><br>      <span class="hljs-attr">emit</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;string, Buffer&gt;</span>&#125; */</span><br>      <span class="hljs-attr">assetEmitted</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;file&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>]),<br>      <span class="hljs-comment">/** <span class="hljs-doctag">@type</span> &#123;<span class="hljs-type">AsyncSeriesHook&lt;Compilation&gt;</span>&#125; */</span><br>      <span class="hljs-attr">afterEmit</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncSeriesHook</span>([<span class="hljs-string">&quot;compilation&quot;</span>]),<br>    &#125;;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>常见的参数对象有 <code>compilation/module/stats/compiler/file/chunks</code> 等，在钩子回调中可以通过改变这些对象的状态，影响 webpack 的编译逻辑。</p><p>所以，如果想顺利编写出符合需求的插件，还需要了解学习更多 webpack 内置对象的功能、特点、接口等内容。</p><h5 id="iv-了解-Webpack-内置对象的钩子"><a href="#iv-了解-Webpack-内置对象的钩子" class="headerlink" title="iv. 了解 Webpack 内置对象的钩子"></a>iv. 了解 Webpack 内置对象的钩子</h5><p>可以从钩子的触发时机、传递参数、示例代码来进行了解，从而知道如何去编写符合需求的插件。</p><ol><li><p>触发时机</p><p><code>compiler</code> 对象逐次触发如下钩子：</p><p><img src="/./images/23-4-14/compiler-hook.png" alt="compiler-hook"></p><p><code>compilation</code> 对象逐次触发如下钩子：</p><p><img src="/./images/23-4-14/compilation-hook.png" alt="compilation-hook"></p></li><li><p>传递参数</p><p>传递参数与具体的钩子强相关，官网对这方面没有做出进一步解释，我的做法是直接在源码里面搜索调用语句，例如对于 <code>compilation.hooks.optimizeTree</code> ，可以在 webpack 源码中搜索 <code>hooks.optimizeTree.call</code> 关键字，就可以找到调用代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// lib/compilation.js#2297</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">hooks</span>.<span class="hljs-property">optimizeTree</span>.<span class="hljs-title function_">callAsync</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">chunks</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">modules</span>, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;&#125;);<br></code></pre></td></tr></table></figure><p>结合代码所在的上下文，可以判断出此时传递的是经过优化的 <code>chunks</code> 及 <code>modules</code> 集合。</p></li><li><p>示例代码</p><p>可以带着目的去查询其他插件中如何使用这些钩子。例如，在 <code>compilation.seal</code> 函数内部有 <code>optimizeModules</code> 和 <code>afterOptimizeModules</code> 这一对看起来很对偶的钩子，<code>optimizeModules</code> 从字面上可以理解为用于优化已经编译出的 <code>modules</code> ，那 <code>afterOptimizeModules</code> 呢？</p><p>从 webpack 源码中唯一搜索到的用途是 <code>ProgressPlugin</code> ，大体上逻辑如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">compilation.<span class="hljs-property">hooks</span>.<span class="hljs-property">afterOptimizeModules</span>.<span class="hljs-title function_">intercept</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ProgressPlugin&quot;</span>,<br>  <span class="hljs-title function_">call</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">handler</span>(percentage, <span class="hljs-string">&quot;sealing&quot;</span>, title);<br>  &#125;,<br>  <span class="hljs-title function_">done</span>(<span class="hljs-params"></span>) &#123;<br>    progressReporters.<span class="hljs-title function_">set</span>(compiler, <span class="hljs-literal">undefined</span>);<br>    <span class="hljs-title function_">handler</span>(percentage, <span class="hljs-string">&quot;sealing&quot;</span>, title);<br>  &#125;,<br>  <span class="hljs-title function_">result</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">handler</span>(percentage, <span class="hljs-string">&quot;sealing&quot;</span>, title);<br>  &#125;,<br>  <span class="hljs-title function_">error</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">handler</span>(percentage, <span class="hljs-string">&quot;sealing&quot;</span>, title);<br>  &#125;,<br>  <span class="hljs-title function_">tap</span>(<span class="hljs-params">tap</span>) &#123;<br>    <span class="hljs-comment">// p is percentage from 0 to 1</span><br>    <span class="hljs-comment">// args is any number of messages in a hierarchical matter</span><br>    progressReporters.<span class="hljs-title function_">set</span>(compilation.<span class="hljs-property">compiler</span>, <span class="hljs-function">(<span class="hljs-params">p, ...args</span>) =&gt;</span> &#123;<br>      <span class="hljs-title function_">handler</span>(percentage, <span class="hljs-string">&quot;sealing&quot;</span>, title, tap.<span class="hljs-property">name</span>, ...args);<br>    &#125;);<br>    <span class="hljs-title function_">handler</span>(percentage, <span class="hljs-string">&quot;sealing&quot;</span>, title, tap.<span class="hljs-property">name</span>);<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>基本上可以猜测出，<code>afterOptimizeModules</code> 的设计初衷就是用于通知优化行为的结束。</p><p>webpack 插件的<code>apply</code> 虽然是一个函数，但是从设计上就只有输入，webpack 不 care 输出，所以在插件中只能通过调用类型实体的各种方法来或者更改实体的配置信息，变更编译行为。例如：</p><ul><li><p>compilation.addModule ：添加模块，可以在原有的 module 构建规则之外，添加自定义模块</p></li><li><p>compilation.emitAsset：直译是“提交资产”，功能可以理解将内容写入到特定路径</p></li><li><p>compilation.addEntry：添加入口，功能上与直接定义 <code>entry</code> 配置相同</p></li><li><p>等等…</p></li></ul></li></ol><h3 id="5、编写-loader"><a href="#5、编写-loader" class="headerlink" title="5、编写 loader"></a>5、编写 loader</h3><h5 id="i-什么是-loader"><a href="#i-什么是-loader" class="headerlink" title="i. 什么是 loader"></a>i. 什么是 loader</h5><p>Webpack Loader 最核心的功能是实现内容转换器 —— 将各式各样的资源转化为标准 JavaScript 内容格式，如：</p><ul><li><code>css-loader</code> 将 css 转换为 <code>__WEBPACK_DEFAULT_EXPORT__ = &quot;.a&#123; xxx &#125;&quot;</code> 格式</li><li><code>html-loader</code> 将 html 转换为 <code>__WEBPACK_DEFAULT_EXPORT__ = &quot;&lt;!DOCTYPE xxx&quot;</code> 格式</li><li><code>vue-loader</code> 更复杂一些，会将 <code>.vue</code> 文件转化为多个 JavaScript 函数，分别对应 template、js、css、custom block</li></ul><p>做这种内容转换，本质上是因为 Webpack 只认识符合 JavaScript 规范的文本(Webpack 5 之后增加了其它 parser)：在构建(make)阶段，解析模块内容时会调用 <code>acorn</code> 将文本转换为 AST 对象，进而分析代码结构，分析模块依赖；这一套逻辑对图片、json、Vue SFC 等场景就不 work 了，就需要 Loader 介入将资源转化成 Webpack 可以理解的内容形态。</p><h5 id="ii-了解-loader"><a href="#ii-了解-loader" class="headerlink" title="ii. 了解 loader"></a>ii. 了解 loader</h5><ol><li><p>结构</p><p>Loader 通常是一个函数，结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source, sourceMap?, data?</span>) &#123;<br>  <span class="hljs-comment">// source 为 loader 的输入，可能是文件内容，也可能是上一个 loader 处理结果</span><br>  <span class="hljs-keyword">return</span> source;<br>&#125;;<br></code></pre></td></tr></table></figure><p>Loader 函数接收三个参数，分别为：</p><ul><li><code>source</code>：资源输入，对于第一个执行的 loader 为资源文件的内容；后续执行的 loader 则为前一个 loader 的执行结果</li><li><code>sourceMap</code>: 可选参数，代码的 sourcemap 结构</li><li><code>data</code>: 可选参数，其它需要在 Loader 链中传递的信息，比如 posthtml&#x2F;posthtml-loader 就会通过这个参数传递参数的 AST 对象</li></ul><p>其中 <code>source</code> 是最重要的参数，大多数 Loader 要做的事情就是将 <code>source</code> 转译为另一种形式的 <code>output</code>。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">rawLoader</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> json = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(source)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\u2028/g</span>, <span class="hljs-string">&quot;\\u2028&quot;</span>)<br>    .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\u2029/g</span>, <span class="hljs-string">&quot;\\u2029&quot;</span>);<br><br>  <span class="hljs-keyword">const</span> esModule =<br>    <span class="hljs-keyword">typeof</span> options.<span class="hljs-property">esModule</span> !== <span class="hljs-string">&quot;undefined&quot;</span> ? options.<span class="hljs-property">esModule</span> : <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;esModule ? <span class="hljs-string">&quot;export default&quot;</span> : <span class="hljs-string">&quot;module.exports =&quot;</span>&#125;</span> <span class="hljs-subst">$&#123;json&#125;</span>;`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码的作用是将文本内容包裹成 JavaScript 模块，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// source</span><br>I am <span class="hljs-title class_">Tecvan</span><br><br><span class="hljs-comment">// output</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-string">&quot;I am Tecvan&quot;</span><br></code></pre></td></tr></table></figure><p>经过模块化包装之后，这段文本内容转身变成 Webpack 可以处理的资源模块，其它 module 也就能引用、使用它了。</p></li><li><p>返回多个结果</p><p>除了通过 <code>return</code> 语句返回处理结果，除此之外 Loader 还可以以 <code>callback</code> 方式返回更多信息，供下游 Loader 或者 Webpack 本身使用，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">content, map</span>) &#123;<br>  <span class="hljs-comment">// ...</span><br>  linter.<span class="hljs-title function_">printOutput</span>(linter.<span class="hljs-title function_">lint</span>(content));<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, content, map);<br>&#125;<br></code></pre></td></tr></table></figure><p>通过 <code>this.callback(null, content, map)</code> 语句同时返回转译后的内容与 sourcemap 内容。<code>callback</code> 的完整签名如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">callback</span>(<br>    <span class="hljs-comment">// 异常信息，Loader 正常运行时传递 null 值即可</span><br>    <span class="hljs-attr">err</span>: <span class="hljs-title class_">Error</span> | <span class="hljs-literal">null</span>,<br>    <span class="hljs-comment">// 转译结果</span><br>    <span class="hljs-attr">content</span>: string | <span class="hljs-title class_">Buffer</span>,<br>    <span class="hljs-comment">// 源码的 sourcemap 信息</span><br>    sourceMap?: <span class="hljs-title class_">SourceMap</span>,<br>    <span class="hljs-comment">// 任意需要在 Loader 间传递的值。经常用来传递 ast 对象，避免重复解析</span><br>    data?: any<br>);<br></code></pre></td></tr></table></figure></li><li><p>异步处理</p><p>涉及到异步或 CPU 密集操作时，Loader 中还可以以异步形式返回处理结果，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> less <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;less&quot;</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">lessLoader</span>(<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-comment">// 1. 获取异步回调函数</span><br>  <span class="hljs-keyword">const</span> callback = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">async</span>();<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">let</span> result;<br><br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-comment">// 2. 调用less 将模块内容转译为 css</span><br>    result = <span class="hljs-keyword">await</span> (options.<span class="hljs-property">implementation</span> || less).<span class="hljs-title function_">render</span>(<br>      data,<br>      lessOptions<br>    );<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-comment">// ...</span><br>  &#125;<br><br>  <span class="hljs-keyword">const</span> &#123; css, imports &#125; = result;<br><br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-comment">// 3. 转译结束，返回结果</span><br>  <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, css, map);<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> lessLoader;<br></code></pre></td></tr></table></figure><p><code>this.async</code> 返回的异步回调函数签名与上面第 3 小节介绍的 <code>this.callback</code> 相同。</p></li><li><p>缓存</p><p>Loader 中执行的各种资源内容转译操作通常都是 CPU 密集型 —— 这放在单线程的 Node 场景下可能导致性能问题。</p><p>默认情况下 Webpack 会缓存 Loader 的执行结果直到资源或资源依赖发生变化，开发者需要对此有个基本的理解，必要时可以通过 <code>this.cachable</code> 显式声明不作缓存，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">cacheable</span>(<span class="hljs-literal">false</span>);<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> output;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p>上下文与 side effect</p><p>除了作为内容转换器外，Loader 运行过程还可以通过一些上下文接口，有限制地影响 Webpack 编译过程，从而产生内容转换之外的副作用。</p><p>上下文信息可通过 <code>this</code> 获取，<code>this</code> 对象由 <code>NormolModule.createLoaderContext</code> 函数在调用 Loader 前创建，常用的接口包括：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> loaderContext = &#123;<br>  <span class="hljs-comment">// 获取当前 Loader 的配置信息</span><br>  <span class="hljs-attr">getOptions</span>: <span class="hljs-function">(<span class="hljs-params">schema</span>) =&gt;</span> &#123;&#125;,<br>  <span class="hljs-comment">// 添加警告</span><br>  <span class="hljs-attr">emitWarning</span>: <span class="hljs-function">(<span class="hljs-params">warning</span>) =&gt;</span> &#123;&#125;,<br>  <span class="hljs-comment">// 添加错误信息，注意这不会中断 Webpack 运行</span><br>  <span class="hljs-attr">emitError</span>: <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;&#125;,<br>  <span class="hljs-comment">// 解析资源文件的具体路径</span><br>  <span class="hljs-title function_">resolve</span>(<span class="hljs-params">context, request, callback</span>) &#123;&#125;,<br>  <span class="hljs-comment">// 直接提交文件，提交的文件不会经过后续的chunk、module处理，直接输出到 fs</span><br>  <span class="hljs-attr">emitFile</span>: <span class="hljs-function">(<span class="hljs-params">name, content, sourceMap, assetInfo</span>) =&gt;</span> &#123;&#125;,<br>  <span class="hljs-comment">// 添加额外的依赖文件</span><br>  <span class="hljs-comment">// watch 模式下，依赖文件发生变化时会触发资源重新编译</span><br>  <span class="hljs-title function_">addDependency</span>(<span class="hljs-params">dep</span>) &#123;&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">try</span> &#123;<br>  result = <span class="hljs-keyword">await</span> (options.<span class="hljs-property">implementation</span> || less).<span class="hljs-title function_">render</span>(data, lessOptions);<br>&#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-keyword">const</span> &#123; css, imports &#125; = result;<br><br>imports.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addDependency</span>(path.<span class="hljs-title function_">normalize</span>(item));<br>&#125;);<br></code></pre></td></tr></table></figure><p>代码中首先调用 <code>less</code> 编译文件内容，之后遍历所有 <code>import</code> 语句，也就是上例 <code>result.imports</code> 数组，一一调用 <code>this.addDependency</code> 函数将 import 到的其它资源都注册为依赖，之后这些其它资源文件发生变化时都会触发重新编译。</p></li><li><p>loader 链式调用</p><p>使用上，可以为某种资源文件配置多个 Loader，Loader 之间按照配置的顺序从前到后(pitch)，再从后到前依次执行，从而形成一套内容转译工作流。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>针对 <code>.less</code> 后缀的文件设定了：less、css、style 三个 loader 协作处理资源文件，按照定义的顺序，Webpack 解析 less 文件内容后先传入 less-loader；less-loader 返回的结果再传入 css-loader 处理；css-loader 的结果再传入 style-loader；最终以 style-loader 的处理结果为准。</p><p>三个 Loader 分别完成内容转化工作的一部分，形成从右到左的调用链条。链式调用这种设计有两个好处，一是保持单个 Loader 的单一职责，一定程度上降低代码的复杂度；二是细粒度的功能能够被组装成复杂而灵活的处理链条，提升单个 Loader 的可复用性。</p></li><li><p>loader pitch</p><p>Webpack 允许在这个函数上挂载名为 <code>pitch</code> 的函数，运行时 pitch 会比 Loader 本身更早执行，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> loader = <span class="hljs-keyword">function</span> (<span class="hljs-params">source</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;后执行&quot;</span>);<br>  <span class="hljs-keyword">return</span> source;<br>&#125;;<br><br>loader.<span class="hljs-property">pitch</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">requestString</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;先执行&quot;</span>);<br>&#125;;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = loader;<br></code></pre></td></tr></table></figure><p>pitch 函数的完整签名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * remainingRequest: 当前 loader 之后的资源请求字符串</span><br><span class="hljs-comment"> *previousRequest: 在执行当前 loader 之前经历过的 loader 列表</span><br><span class="hljs-comment"> * data: 与 Loader 函数的 data 相同，用于传递需要在 Loader 传播的信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">pitch</span>(<span class="hljs-params"></span><br><span class="hljs-params">  remainingRequest: string,</span><br><span class="hljs-params">  previousRequest: string,</span><br><span class="hljs-params">  data = &#123;&#125;</span><br><span class="hljs-params"></span>): <span class="hljs-keyword">void</span> &#123;&#125;<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/i</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于<code>css-loader.pitch</code> 中拿到的参数依次为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// css-loader 之后的 loader 列表及资源路径</span><br>remainingRequest = less-loader!./xxx.<span class="hljs-property">less</span><br><span class="hljs-comment">// css-loader 之前的 loader 列表</span><br>previousRequest = style-loader<br><span class="hljs-comment">// 默认值</span><br>data = &#123;&#125;<br></code></pre></td></tr></table></figure></li><li><p>调度逻辑</p><p>实现上，Loader 链条执行过程分三个阶段：pitch、解析资源、执行，如下图所示：</p><p><img src="/./images/23-4-14/loader-pitch.png" alt="loader-pitch"></p><p><code>pitch</code> 阶段按配置顺序从左到右逐个执行 <code>loader.pitch</code> 函数(如果有的话)，开发者可以在 <code>pitch</code> 返回任意值中断后续的链路的执行：</p><p><img src="/./images/23-4-14/loader-pitch-interapt.png" alt="loader-pitch-interapt"></p></li></ol><h5 id="iii-开发-loader-技巧"><a href="#iii-开发-loader-技巧" class="headerlink" title="iii. 开发 loader 技巧"></a>iii. 开发 loader 技巧</h5><ol><li><p>开发工具</p><p>Webpack 为 Loader 开发者提供了两个实用工具，在诸多开源 Loader 中出现频率极高：</p><ul><li>webpack&#x2F;loader-utils：提供了一系列诸如读取配置、requestString 序列化与反序列化、计算 hash 值之类的工具函数</li><li>webpack&#x2F;schema-utils：参数校验工具</li></ul><p>获取并校验配置的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// css-loader/src/index.js</span><br><span class="hljs-keyword">import</span> &#123; getOptions &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;loader-utils&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; validate &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;schema-utils&quot;</span>;<br><span class="hljs-keyword">import</span> schema <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./options.json&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">content, map, meta</span>) &#123;<br>  <span class="hljs-keyword">const</span> rawOptions = <span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>);<br><br>  <span class="hljs-title function_">validate</span>(schema, rawOptions, &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;CSS Loader&quot;</span>,<br>    <span class="hljs-attr">baseDataPath</span>: <span class="hljs-string">&quot;options&quot;</span>,<br>  &#125;);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用 <code>schema-utils</code> 做校验时需要提前声明配置模板，通常会处理成一个额外的 json 文件，例如上例中的 <code>&quot;./options.json&quot;</code>。</p><p>拼接输出文件名的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; getOptions, interpolateName &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;loader-utils&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">loader</span>(<span class="hljs-params">content</span>) &#123;<br>  <span class="hljs-keyword">const</span> context = options.<span class="hljs-property">context</span> || <span class="hljs-variable language_">this</span>.<span class="hljs-property">rootContext</span>;<br>  <span class="hljs-keyword">const</span> name = options.<span class="hljs-property">name</span> || <span class="hljs-string">&quot;[contenthash].[ext]&quot;</span>;<br><br>  <span class="hljs-comment">// 拼接最终输出的名称</span><br>  <span class="hljs-keyword">const</span> url = <span class="hljs-title function_">interpolateName</span>(<span class="hljs-variable language_">this</span>, name, &#123;<br>    context,<br>    content,<br>    <span class="hljs-attr">regExp</span>: options.<span class="hljs-property">regExp</span>,<br>  &#125;);<br><br>  <span class="hljs-keyword">let</span> outputPath = url;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">let</span> publicPath = <span class="hljs-string">`__webpack_public_path__ + <span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(outputPath)&#125;</span>`</span>;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options.<span class="hljs-property">emitFile</span> === <span class="hljs-string">&quot;undefined&quot;</span> || options.<span class="hljs-property">emitFile</span>) &#123;<br>    <span class="hljs-comment">// ...</span><br><br>    <span class="hljs-comment">// 提交、写出文件</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">emitFile</span>(outputPath, content, <span class="hljs-literal">null</span>, assetInfo);<br>  &#125;<br>  <span class="hljs-comment">// ...</span><br><br>  <span class="hljs-keyword">const</span> esModule =<br>    <span class="hljs-keyword">typeof</span> options.<span class="hljs-property">esModule</span> !== <span class="hljs-string">&quot;undefined&quot;</span> ? options.<span class="hljs-property">esModule</span> : <span class="hljs-literal">true</span>;<br><br>  <span class="hljs-comment">// 返回模块化内容</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;</span></span><br><span class="hljs-subst"><span class="hljs-string">    esModule ? <span class="hljs-string">&quot;export default&quot;</span> : <span class="hljs-string">&quot;module.exports =&quot;</span></span></span><br><span class="hljs-subst"><span class="hljs-string">  &#125;</span> <span class="hljs-subst">$&#123;publicPath&#125;</span>;`</span>;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> raw = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>上述代码使用 <code>loader-utils</code> 提供的 <code>interpolateName</code> 在 <code>file-loader</code> 中获取资源写出的路径及名称，核心逻辑：</p><ul><li><p>根据 Loader 配置，调用 <code>interpolateName</code> 方法拼接目标文件的完整路径</p></li><li><p>调用上下文 <code>this.emitFile</code> 接口，写出文件</p></li><li><p>返回 <code>module.exports = $&#123;publicPath&#125;</code> ，其它模块可以引用到该文件路径</p></li></ul></li><li><p>单元测试</p><p>Webpack Loader 场景下常用的单元测试流程，以 Jest · Delightful JavaScript Testing 为例：</p><ol><li>创建在 Webpack 实例，并运行 Loader</li><li>获取 Loader 执行结果，比对、分析判断是否符合预期</li><li>判断执行过程中是否出错</li></ol><p>先在 node 环境下运行调用 Webpack 接口，用代码而非命令行执行编译，很多框架都会采用这种方式。以 posthtml&#x2F;posthtml-loader 为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// posthtml-loader/test/helpers/compiler.js 文件</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fixture, config, options</span>) &#123;<br>  config = &#123;<br>    <span class="hljs-comment">/*...*/</span><br>  &#125;;<br><br>  options = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(&#123; <span class="hljs-attr">output</span>: <span class="hljs-literal">false</span> &#125;, options);<br><br>  <span class="hljs-comment">// 创建 Webpack 实例</span><br>  <span class="hljs-keyword">const</span> compiler = <span class="hljs-title function_">webpack</span>(config);<br><br>  <span class="hljs-comment">// 以 MemoryFS 方式输出构建结果，避免写磁盘</span><br>  <span class="hljs-keyword">if</span> (!options.<span class="hljs-property">output</span>) compiler.<span class="hljs-property">outputFileSystem</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemoryFS</span>();<br><br>  <span class="hljs-comment">// 执行，并以 promise 方式返回结果</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span><br>    compiler.<span class="hljs-title function_">run</span>(<span class="hljs-function">(<span class="hljs-params">err, stats</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (err) <span class="hljs-title function_">reject</span>(err);<br>      <span class="hljs-comment">// 异步返回执行结果</span><br>      <span class="hljs-title function_">resolve</span>(stats);<br>    &#125;)<br>  );<br>&#125;;<br></code></pre></td></tr></table></figure><p>它会在启动测试之前创建并运行 Webpack 实例。用 <code>compiler.outputFileSystem = new MemoryFS()</code> 语句将 Webpack 设定成输出到内存，能避免写盘操作，提升编译速度。</p><p>下一步是比对结果，上例运行结束之后会以 <code>resolve(stats)</code> 方式返回执行结果，<code>stats</code> 对象中几乎包含了编译过程所有信息，包括耗时、产物、模块、chunks、errors、warnings 等等。</p><p>可以从 <code>stats</code> 对象中读取编译最终输出的产物，例如 style-loader 的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// style-loader/src/test/helpers/readAsset.js 文件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">readAsset</span>(<span class="hljs-params">compiler, stats, assets</span>) =&gt; &#123;<br>  <span class="hljs-keyword">const</span> usedFs = compiler.<span class="hljs-property">outputFileSystem</span><br>  <span class="hljs-keyword">const</span> outputPath = stats.<span class="hljs-property">compilation</span>.<span class="hljs-property">outputOptions</span>.<span class="hljs-property">path</span><br>  <span class="hljs-keyword">const</span> queryStringIdx = targetFile.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;?&#x27;</span>)<br><br>  <span class="hljs-keyword">if</span> (queryStringIdx &gt;= <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// 解析出输出文件路径</span><br>    asset = asset.<span class="hljs-title function_">substr</span>(<span class="hljs-number">0</span>, queryStringIdx)<br>  &#125;<br><br>  <span class="hljs-comment">// 读文件内容</span><br>  <span class="hljs-keyword">return</span> usedFs.<span class="hljs-title function_">readFileSync</span>(path.<span class="hljs-title function_">join</span>(outputPath, targetFile)).<span class="hljs-title function_">toString</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码首先计算 asset 输出的文件路径，之后调用 outputFileSystem 的 <code>readFile</code> 方法读取文件内容。</p><p>接下来，有两种分析内容的方法：</p><ul><li>调用 Jest 的 <code>expect(xxx).toMatchSnapshot()</code> 断言判断当前运行结果是否与之前的运行结果一致，从而确保多次修改的结果一致性，很多框架都大量用了这种方法</li><li>解读资源内容，判断是否符合预期，例如 less-loader 的单元测试中会对同一份代码跑两次 less 编译，一次由 Webpack 执行，一次直接调用 <code>less</code> 库，之后分析两次运行结果是否相同</li></ul><p>最后，还需要判断编译过程是否出现异常，同样可以从 <code>stats</code> 对象解析：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> getErrors = <span class="hljs-function">(<span class="hljs-params">stats</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> errors = stats.<span class="hljs-property">compilation</span>.<span class="hljs-property">errors</span>.<span class="hljs-title function_">sort</span>();<br>  <span class="hljs-keyword">return</span> errors.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> e.<span class="hljs-title function_">toString</span>());<br>&#125;;<br></code></pre></td></tr></table></figure><p>大多数情况下都希望编译没有错误，此时只要判断结果数组是否为空即可。某些情况下可能需要判断是否抛出特定异常，此时可以 <code>expect(xxx).toMatchSnapshot()</code> 断言，用快照对比更新前后的结果。</p></li><li><p>调试</p><p>开发 Loader 的过程中，有一些小技巧能够提升调试效率，包括：</p><ul><li>使用 ndb 工具实现断点调试</li><li>使用 <code>npm link</code> 将 Loader 模块链接到测试项目</li><li>使用 <code>resolveLoader</code> 配置项将 Loader 所在的目录加入到测试项目中，如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">resolveLoader</span>: &#123;<br>    <span class="hljs-attr">modules</span>: [<span class="hljs-string">&quot;node_modules&quot;</span>, <span class="hljs-string">&quot;./loaders/&quot;</span>],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li></ol><h2 id="二、项目优化"><a href="#二、项目优化" class="headerlink" title="二、项目优化"></a>二、<strong>项目优化</strong></h2><h3 id="1、优化方面"><a href="#1、优化方面" class="headerlink" title="1、优化方面"></a>1、<strong>优化方面</strong></h3><ul><li><p>页面性能优化</p><ul><li><p>缩小打包文件体积：可以通过 Tree Shaking 和 Code Splitting 等技术，去除应用程序中未使用的代码和模块，减小打包后文件的体积。</p></li><li><p>优化加载速度：可以使用 Webpack 的懒加载功能，在需要时再加载某些模块或代码，提高应用程序的加载速度。</p></li><li><p>按需加载：可以使用 Webpack 的按需加载功能，根据路由或事件等条件，动态加载模块或代码，提高应用程序的加载速度。</p></li><li><p>压缩代码：压缩打包后的代码，可以减少文件大小，提高加载速度。webpack 4.x 版本开始，默认情况下会在生产模式下进行代码压缩。</p></li><li><p>使用 CDN：可以将静态资源文件放到 CDN 上，以减轻服务器的负载，提高访问速度。</p></li></ul></li><li><p>构建速度优化</p><ul><li>使用缓存：可以使用 Webpack 的缓存功能，将已经打包好的模块或代码缓存起来，减少重复打包的时间。如：使用 Webpack 的 cache-loader 或 hard-source-webpack-plugin 插件，将已经打包好的模块或代码缓存起来，减少重复打包的时间。</li><li>并行打包，发挥多核 CPU 能力：可以使用 Webpack 的 HappyPack 插件，将打包任务分解成多个子任务并行处理，提高打包速度。</li></ul></li></ul><h3 id="2、Tree-Shaking"><a href="#2、Tree-Shaking" class="headerlink" title="2、Tree Shaking"></a>2、Tree Shaking</h3><blockquote><p>Tree Shaking 依赖于 ES6 模块语法<code>import</code> 和<code>export</code>，在 webpack 中它的功能是默认开启的。</p></blockquote><p>需要注意：</p><ul><li>Tree Shaking 只能移除没有副作用的代码，如果代码中存在副作用，那么这部分代码将无法被移除。</li><li>在 vue2.x 项目中，对公共组件的引入，要单独引入，而不是通过 index 文件统一暴露其内部的组件。<ul><li>如，要<code>import TestComponents1 from &#39;/src/components/TestComponents1.vue&#39;</code>这样单独引入组件，而不是<code>import &#123; TestComponents1 &#125; from &#39;/src/components&#39;</code>。</li></ul></li></ul><h3 id="3、Code-Splitting"><a href="#3、Code-Splitting" class="headerlink" title="3、Code Splitting"></a>3、Code Splitting</h3><p>SplitChunksPlugin 是 Webpack 4 之后引入的分包方案(此前为 <code>CommonsChunkPlugin</code>)，它能够基于一些启发式的规则将 Module 编排进不同的 Chunk 序列，并最终将应用代码分门别类打包出多份产物，从而实现分包功能。</p><h5 id="i-内置的默认规则"><a href="#i-内置的默认规则" class="headerlink" title="i. 内置的默认规则"></a>i. 内置的默认规则</h5><p><code>SplitChunksPlugin</code> 内置了 <code>default</code> 与 <code>defaultVendors</code> 两个配置组，提供一些开箱即用的特性：</p><ul><li><code>node_modules</code> 资源会命中 <code>defaultVendors</code> 规则，并被单独打包</li><li>只有包体超过 20kb 的 Chunk 才会被单独打包</li><li>加载 Async Chunk 所需请求数不得超过 30</li><li>加载 Initial Chunk 所需请求数不得超过 30</li></ul><p>即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-attr">minSize</span>: <span class="hljs-number">20000</span>,<br>      <span class="hljs-attr">maxAsyncRequests</span>: <span class="hljs-number">30</span>,<br>      <span class="hljs-attr">maxInitialRequests</span>: <span class="hljs-number">30</span>,<br>      <span class="hljs-attr">cacheGroups</span>: &#123;<br>        <span class="hljs-attr">defaultVendors</span>: &#123;<br>          <span class="hljs-attr">idHint</span>: <span class="hljs-string">&quot;vendors&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">test</span>: <span class="hljs-regexp">/[\\/]node_modules[\\/]/i</span>,<br>          <span class="hljs-attr">priority</span>: -<span class="hljs-number">10</span>,<br>        &#125;,<br>        <span class="hljs-attr">default</span>: &#123;<br>          <span class="hljs-attr">idHint</span>: <span class="hljs-string">&quot;&quot;</span>,<br>          <span class="hljs-attr">reuseExistingChunk</span>: <span class="hljs-literal">true</span>,<br>          <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">priority</span>: -<span class="hljs-number">20</span>,<br>        &#125;,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>这两个配置组能帮助我们：</p><ul><li>将所有 <code>node_modules</code> 中的资源单独打包到 <code>vendors-xxx-xx.js</code> 命名的产物</li><li>对引用次数大于等于 2 的模块，也就是被多个 Chunk 引用的模块，单独打包</li></ul><h5 id="ii-分包场景"><a href="#ii-分包场景" class="headerlink" title="ii. 分包场景"></a>ii. 分包场景</h5><ol><li><p>根据 Module 使用频率分包。</p><p>可通过 <code>optimization.splitChunks.minChunks</code> 设定最小引用次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">splitChunks</span>: &#123;<br>      <span class="hljs-comment">// 设定引用次数&gt;=2的模块才进行分包</span><br>      <span class="hljs-attr">minChunks</span>: <span class="hljs-number">2</span>,<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>假如，代码包含四个模块，形成如下模块关系图：</p><p><img src="/./images/23-4-14/640.png" alt="640"></p><p>对于 <code>common</code> 模块来说，分别被三个不同的 Chunk 引入，此时引用次数为 3，命中 <code>optimization.splitChunks.minChunks = 2</code> 规则，因此该模块<strong>可能</strong>会被单独分包：</p><ul><li>entry-a.js</li><li>entry-b.js</li><li>async-module.js</li><li>common.js</li></ul></li><li><p>限制分包数量。</p><p>在满足 <code>minChunks</code> 基础上，还可以通过 <code>maxInitialRequest/maxAsyncRequests</code> 配置项限定分包数量，配置项语义：</p><ul><li>maxInitialRequest：用于设置 Initial Chunk 最大并行请求数</li><li>maxAsyncRequests：用于设置 Async Chunk 最大并行请求数</li></ul><p>这里所说的“请求数”，是指加载一个 Chunk 时所需同步加载的分包数。</p><p>如，而对于下述模块关系：</p><p><img src="/./images/23-4-14/642.png" alt="642"></p><p>若 <code>minChunks = 2</code> ，则 <code>common-1</code> 、<code>common-2</code> 同时命中 <code>minChunks</code> 规则被分别打包。而浏览器请求 <code>entry-b</code> 时需要同时请求 <code>common-1</code> 、<code>common-2</code> 两个分包，并行数为 2 + 1 &#x3D; 3，此时若 <code>maxInitialRequest = 2</code>，则分包数超过阈值，<code>SplitChunksPlugin</code> 会放弃 <code>common-1</code> 、<code>common-2</code> 中体积较小的分包。</p><p><code>syncRequest</code> 逻辑与此类似。</p><p>并行请求数关键逻辑总结如下：</p><ul><li>Initial Chunk 本身算一个请求</li><li>Async Chunk 不算并行请求</li><li>通过 <code>runtimeChunk</code> 拆分出的 runtime 不算并行请求</li><li>如果同时有两个 Chunk 满足拆分规则，但是 <code>maxInitialRequests</code>(或 <code>maxAsyncRequest</code>) 的值只能允许再拆分一个模块，那么体积更大的模块会被优先拆解</li></ul></li><li><p>限制分包体积</p><p>在满足 <code>minChunks</code> 与 <code>maxInitialRequests</code> 的基础上，<code>SplitChunksPlugin</code> 还会进一步判断 Chunk 包大小决定是否分包，这一规则相关的配置项非常多：</p><ul><li><code>minSize</code>：超过这个尺寸的 Chunk 才会正式被分包</li><li><code>maxSize</code>：超过这个尺寸的 Chunk 会尝试继续做分包</li><li><code>maxAsyncSize</code>：与 <code>maxSize</code> 功能类似，但只对异步引入的模块生效</li><li><code>maxInitialSize</code>：与 <code>maxSize</code> 类似，但只对 <code>entry</code> 配置的入口模块生效</li><li><code>enforceSizeThreshold</code>：超过这个尺寸的 Chunk 会被强制分包，忽略上述其它 size 限制</li></ul><p>同样以下图模块关系为例：</p><p><img src="/./images/23-4-14/640.png" alt="640"></p><p>若此时 Webpack 配置的 <code>minChunks</code> 大于 2，且 <code>maxInitialRequests</code> 也同样大于 2。如果 <code>common</code> 模块的体积大于上述说明的 <code>minxSize</code> 配置项则分包成功，<code>commont</code> 会被分离为单独的 Chunk，否则会被合并入原来的 3 个 Chunk。</p></li><li><p>总结</p><p>那么，结合前面介绍的 1-3，<code>SplitChunksPlugin</code> 的主体流程如下：</p><ul><li><p><code>SplitChunksPlugin</code> 尝试将命中 <code>minChunks</code> 规则的 Module 统一抽到一个额外的 Chunk 对象；</p></li><li><p>判断该 Chunk 是否满足 <code>maxInitialRequests</code> 阈值，若满足则进行下一步</p></li><li><p>判断该 Chunk 资源的体积是否大于上述配置项 <code>minSize</code> 声明的下限阈值；</p><ul><li>如果体积<strong>小于</strong> <code>minSize</code> 则取消这次分包，对应的 Module 依然会被合并入原来的 Chunk</li><li>如果 Chunk 体积<strong>大于</strong> <code>minSize</code> 则判断是否超过 <code>maxSize</code>、<code>maxAsyncSize</code>、<code>maxInitialSize</code> 声明的上限阈值，如果超过则尝试将该 Chunk 继续分割成更小的部分</li></ul></li></ul></li></ol><h5 id="iii-缓存组"><a href="#iii-缓存组" class="headerlink" title="iii. 缓存组"></a>iii. 缓存组</h5><p>除上述 <code>minChunks</code>、<code>maxInitialRequest</code>、<code>minSize</code> 等基础规则外，<code>SplitChunksPlugin</code> 还提供了 <code>cacheGroups</code> 配置项用于为不同文件组设置不同的规则。</p><p><code>cacheGroups</code> 支持一些与分组逻辑强相关的属性，包括：</p><ul><li>test：接受正则表达式、函数及字符串，所有符合 <code>test</code> 判断的 Module 或 Chunk 都会被分到该组</li><li>type：接受正则表达式、函数及字符串，与 <code>test</code> 类似均用于筛选分组命中的模块，区别是它判断的依据是文件类型而不是文件名，例如 <code>type = &#39;json&#39;</code> 会命中所有 JSON 文件</li><li>idHint：字符串型，用于设置 Chunk ID，它还会被追加到最终产物文件名中，例如 <code>idHint = &#39;vendors&#39;</code> 时，输出产物文件名形如 <code>vendors-xxx-xxx.js</code></li><li>priority：数字型，用于设置该分组的优先级，若模块命中多个缓存组，则优先被分到 <code>priority</code> 更大的组</li></ul><h5 id="iv-最佳实践"><a href="#iv-最佳实践" class="headerlink" title="iv. 最佳实践"></a>iv. 最佳实践</h5><ul><li>尽量将 第三方库 和 公共逻辑的代码(如果包够大) 拆为独立分包</li><li>保持按路由分包，减少首屏资源负载</li><li><code>optimization.splitChunks.chunks</code> 配置项用于设置 <code>SplitChunksPlugin</code> 的工作范围，我们应该尽量保持 <code>chunks = &#39;all&#39;</code> 从而最大程度优化分包逻辑</li></ul><h3 id="4、懒加载或按需加载"><a href="#4、懒加载或按需加载" class="headerlink" title="4、懒加载或按需加载"></a>4、懒加载或按需加载</h3><p>懒加载和按需加载都可以通过 Webpack 的 Code Splitting 功能来实现。Code Splitting 可以将一个大的 JavaScript 文件拆分成多个小的 JavaScript 文件，然后按需加载这些文件，从而实现按需加载和懒加载的效果。</p><p>如下示例，实现了按需加载一个 echart.js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  clickHandler = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;./echart.js&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params"><span class="hljs-variable language_">module</span></span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> print = <span class="hljs-variable language_">module</span>.<span class="hljs-property">default</span>;<br>      <span class="hljs-title function_">print</span>();<br>    &#125;);<br>  &#125;;<br><br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.clickHandler&#125;</span>&gt;</span></span><br><span class="language-xml">        点我按需加载echart.js文件</span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>路由懒加载同样原理。</p><h3 id="5、使用缓存提升构建速度"><a href="#5、使用缓存提升构建速度" class="headerlink" title="5、使用缓存提升构建速度"></a>5、<strong>使用缓存提升构建速度</strong></h3><h5 id="i-持久化缓存"><a href="#i-持久化缓存" class="headerlink" title="i. 持久化缓存"></a>i. 持久化缓存</h5><p>webpack 之后，Vite、SnowPack 等以性能著称的同类框架在业内掀起不小波澜，为此，Webpack5 引入了持久化缓存，以用于提升运行性能。</p><p>Webpack5 会将首次构建结果持久化到本地文件系统， 如 Module、Chunk、ModuleGraph 等对象序列化后保存到硬盘中，在下次执行构建时跳过执行 Loader 链、解析 AST、解析依赖等非常消耗性能的操作，直接复用 module、chunk 的构建结果，以提升编译性能。</p><p>可简单通过如下代码，即可开启：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">cache</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;filesystem&quot;</span>,<br>  &#125;,<br>  <span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="ii-使用缓存"><a href="#ii-使用缓存" class="headerlink" title="ii. 使用缓存"></a>ii. 使用缓存</h5><p><code>cache</code> 提供的<a href="https://webpack.js.org/configuration/cache">配置项列表</a>，下面列出几个比较常用的配置项：</p><ul><li><p><code>cache.type</code>：缓存类型，支持 <code>&#39;memory&#39; | &#39;filesystem&#39;</code>，需要设置 <code>filesystem</code> 才能开启持久缓存</p></li><li><p><code>cache.cacheDirectory</code>：缓存文件存放的路径，默认为 <code>node_modules/.cache/webpack</code></p></li><li><p><code>cache.buildDependencies</code>：额外的依赖文件，当这些文件内容发生变化时，缓存会完全失效而执行完整的编译构建，通常可设置为项目配置文件，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">cache</span>: &#123;<br>    <span class="hljs-attr">buildDependencies</span>: &#123;<br>      <span class="hljs-attr">config</span>: [path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;webpack.dll_config.js&quot;</span>)],<br>    &#125;,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>cache.managedPaths</code>：受控目录，Webpack 构建时会跳过新旧代码哈希值与时间戳的对比，直接使用缓存副本，默认值为 <code>[&#39;./node_modules&#39;]</code></p></li><li><p><code>cache.profile</code>：是否输出缓存处理过程的详细日志，默认为 <code>false</code></p></li><li><p><code>cache.maxAge</code>：缓存失效时间，默认值为 <code>5184000000</code></p></li></ul><p>使用时通常关注上述配置项即可。</p><h5 id="iii-webpack4-中的缓存"><a href="#iii-webpack4-中的缓存" class="headerlink" title="iii. webpack4 中的缓存"></a>iii. webpack4 中的缓存</h5><p>webpack4 中已经内置使用内存实现的临时缓存功能，但必须在 <code>watch</code> 模式下使用，进程退出后立即失效，实用性不高。但在 Webpack 4 及之前版本中可以使用一些 <code>loader</code> 自带的缓存功能提升构建性能，例如 <code>babel-loader</code>、<code>eslint-loader</code>、<code>cache-loader</code> 。</p><p>开启<code>babel-loader</code>缓存：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.m?js$/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">cacheDirectory</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>开启<code>eslint-loader</code>缓存：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;eslint-loader&quot;</span>,<br>        <span class="hljs-attr">options</span>: &#123;<br>          <span class="hljs-attr">cache</span>: <span class="hljs-literal">true</span>,<br>        &#125;,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>除 <code>babel-loader</code>、<code>eslint-loader</code> 这类特化 loader 自身携带的缓存功能外，Webpack 4 中还可以使用 <code>cache-loader</code> 实现与 Webpack 5 相似的通用持久化缓存功能，使用上只需将 <code>cache-loader</code> 配置在 <code>loader</code> 数组首位，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> webpack = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;webpack&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;cache-loader&quot;</span>, <span class="hljs-string">&quot;babel-loader&quot;</span>, <span class="hljs-string">&quot;eslint-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-comment">// ...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>与 Webpack 5 自带的持久化缓存不同，<code>cache-loader</code> 仅 Loader 执行结果有效，缓存范围与深度不如内置的缓存功能，所以性能收益相对较低，但在 Webpack 4 版本下已经不失为一种简单而有效的性能优化手段。</p><h3 id="6、利用多进程提升构建速度"><a href="#6、利用多进程提升构建速度" class="headerlink" title="6、利用多进程提升构建速度"></a>6、<strong>利用多进程提升构建速度</strong></h3><p>并行的本质则是在同一时间内并发执行多个运算，提升单位时间计算效率，两者都是计算机科学常见的提升性能优化手段。</p><p>受限于 Node.js 的单线程架构，原生 Webpack 对所有资源文件做的所有解析、转译、合并操作本质上都是在同一个线程内串行执行，CPU 利用率极低，因此，理所当然地社区出现了一些基于多进程方式运行 Webpack，或 Webpack 构建过程某部分工作的方案，例如：</p><ul><li>HappyPack：多进程方式运行资源加载逻辑</li><li>Thread-loader：Webpack 官方出品，同样以多进程方式运行资源加载逻辑</li><li>TerserWebpackPlugin：支持多进程方式执行代码压缩、uglify 功能</li><li>Parallel-Webpack：多进程方式运行多个 Webpack 构建实例</li></ul><h5 id="i-Happypack"><a href="#i-Happypack" class="headerlink" title="i. Happypack"></a>i. Happypack</h5><p>基本用法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-comment">// 使用 happypack/loader 替换原来的 Loader 配置</span><br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;happypack/loader&quot;</span>,<br>        <span class="hljs-comment">// use: [</span><br>        <span class="hljs-comment">//  &#123;</span><br>        <span class="hljs-comment">//      loader: &#x27;babel-loader&#x27;,</span><br>        <span class="hljs-comment">//      options: &#123;</span><br>        <span class="hljs-comment">//          presets: [&#x27;@babel/preset-env&#x27;]</span><br>        <span class="hljs-comment">//      &#125;</span><br>        <span class="hljs-comment">//  &#125;,</span><br>        <span class="hljs-comment">//  &#x27;eslint-loader&#x27;</span><br>        <span class="hljs-comment">// ]</span><br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HappyPack</span>(&#123;<br>      <span class="hljs-attr">loaders</span>: [<br>        &#123;<br>          <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>          <span class="hljs-attr">option</span>: &#123;<br>            <span class="hljs-attr">presets</span>: [<span class="hljs-string">&quot;@babel/preset-env&quot;</span>],<br>          &#125;,<br>        &#125;,<br>        <span class="hljs-string">&quot;eslint-loader&quot;</span>,<br>      ],<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述简单示例只能以相同的 Loader 序列处理同种文件类型，实际应用中还可以为不同的文件配置多个 相应的加载器数组，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">HappyPack</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;happypack&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js?$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;happypack/loader?id=js&quot;</span>,<br>      &#125;,<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>        <span class="hljs-attr">use</span>: <span class="hljs-string">&quot;happypack/loader?id=styles&quot;</span>,<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HappyPack</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;js&quot;</span>,<br>      <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&quot;babel-loader&quot;</span>, <span class="hljs-string">&quot;eslint-loader&quot;</span>],<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HappyPack</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;styles&quot;</span>,<br>      <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>默认情况下，HappyPack 插件实例各自管理自身所消费的进程，导致整体需要维护一个数量庞大的进程池，反而带来新的性能损耗。</p><p>为此，HappyPack 提供了一套简单易用的共享进程池功能，使用上只需创建 <code>HappyPack.ThreadPool</code> 实例并通过 <code>size</code> 参数限定进程总量，之后将该实例配置到各个 HappyPack 插件的 <code>threadPool</code> 属性上即可，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;os&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HappyPack</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;happypack&quot;</span>);<br><span class="hljs-keyword">const</span> happyThreadPool = <span class="hljs-title class_">HappyPack</span>.<span class="hljs-title class_">ThreadPool</span>(&#123;<br>  <span class="hljs-attr">size</span>: os.<span class="hljs-title function_">cpus</span>().<span class="hljs-property">length</span> - <span class="hljs-number">1</span>,<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HappyPack</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;js&quot;</span>,<br>      <span class="hljs-attr">threadPool</span>: happyThreadPool,<br>      <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&quot;babel-loader&quot;</span>, <span class="hljs-string">&quot;eslint-loader&quot;</span>],<br>    &#125;),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">HappyPack</span>(&#123;<br>      <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;styles&quot;</span>,<br>      <span class="hljs-attr">threadPool</span>: happyThreadPool,<br>      <span class="hljs-attr">loaders</span>: [<span class="hljs-string">&quot;style-loader&quot;</span>, <span class="hljs-string">&quot;css-loader&quot;</span>, <span class="hljs-string">&quot;less-loader&quot;</span>],<br>    &#125;),<br>  ],<br>&#125;;<br></code></pre></td></tr></table></figure><p>使用共享进程池功能后，HappyPack 会预先创建好一组共享的 <code>HappyThread</code> 对象，所有插件实例的资源转译需求最终都会通过 <code>HappyThread</code> 对象转发到空闲进程做处理，从而保证整体进程数量可控。</p><h5 id="ii-Thread-loader"><a href="#ii-Thread-loader" class="headerlink" title="ii. Thread-loader"></a>ii. Thread-loader</h5><p>使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;thread-loader&quot;</span>, <span class="hljs-string">&quot;babel-loader&quot;</span>, <span class="hljs-string">&quot;eslint-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="iii-Parallel-Webpack"><a href="#iii-Parallel-Webpack" class="headerlink" title="iii. Parallel-Webpack"></a>iii. Parallel-Webpack</h5><p>Thread-loader、HappyPack 这类组件所提供的并行能力都仅作用于执行加载器 —— Loader 的过程，对后续 AST 解析、依赖收集、打包、优化代码等过程均没有影响，理论收益还是比较有限的。对此，社区还提供了另一种并行度更高，以多个独立进程运行 Webpack 实例的方案 —— Parallel-Webpack。</p><p>使用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = [<br>  &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;pageA.js&quot;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./dist&quot;</span>,<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;pageA.js&quot;</span>,<br>    &#125;,<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;pageB.js&quot;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;./dist&quot;</span>,<br>      <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;pageB.js&quot;</span>,<br>    &#125;,<br>  &#125;,<br>];<br></code></pre></td></tr></table></figure><p>执行命令 <code>npx parallel-webpack</code> 即可完成构建，上面的示例配置会同时打包出 <code>pageA.js</code> 与 <code>pageB.js</code> 两份产物。</p><h5 id="iv-并行压缩"><a href="#iv-并行压缩" class="headerlink" title="iv. 并行压缩"></a>iv. 并行压缩</h5><p>Webpack 下通常使用 Uglify-js、Uglify-es、Terser 做代码混淆压缩，三者都不同程度上原生实现了多进程并行压缩功能。</p><p>以 Terser 为例，插件 TerserWebpackPlugin 默认已开启并行压缩能力，通常情况下保持默认配置即 <code>parallel = true</code> 即可获得最佳的性能收益。开发者也可以通过 <code>parallel</code> 参数关闭或设定具体的并行进程数量，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">TerserPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;terser-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">optimization</span>: &#123;<br>    <span class="hljs-attr">minimize</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">minimizer</span>: [<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerserPlugin</span>(&#123;<br>        <span class="hljs-attr">parallel</span>: <span class="hljs-number">2</span>, <span class="hljs-comment">// number | boolean</span><br>      &#125;),<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><p>上述配置即可设定最大并行进程数为 2。</p><h5 id="v-最佳实践"><a href="#v-最佳实践" class="headerlink" title="v. 最佳实践"></a>v. 最佳实践</h5><p>理论上，并行确实能够提升系统运行效率，但 Node 单线程架构下，所谓的并行计算都只能依托与派生子进程执行，而创建进程这个动作本身就有不小的消耗 —— 大约 600ms，因此建议读者按实际需求斟酌使用上述多进程方案。</p><p>对于小型项目，构建成本可能很低，但引入多进程技术反而导致整体成本增加。</p><p>对于大型项目，由于 HappyPack 官方已经明确表示不维护，所以建议尽量使用 Thread-loader 组件提升 Make 阶段性能。生产环境下还可配合 terser-webpack-plugin 的并行压缩功能，提升整体效率。</p><h3 id="7、提升编译性能"><a href="#7、提升编译性能" class="headerlink" title="7、提升编译性能"></a>7、提升编译性能</h3><h5 id="i-使用最近版本"><a href="#i-使用最近版本" class="headerlink" title="i. 使用最近版本"></a>i. 使用最近版本</h5><p>从 Webpack V3，到 V4，再到最新的 V5 版本，虽然构建功能在不断叠加增强，但性能反而不断优化提升。</p><ul><li>V3 到 V4 重写 Chunk 依赖逻辑，将原来的父子树状关系调整为 <code>ChunkGroup</code> 表达的有序图关系，提升代码分包效率</li><li>V4 到 V5 引入 <code>cache</code> 功能，支持将模块、模块关系图、产物等核心要素持久化缓存到硬盘，减少重复工作</li></ul><h5 id="ii-缩小资源搜索范围"><a href="#ii-缩小资源搜索范围" class="headerlink" title="ii. 缩小资源搜索范围"></a>ii. 缩小资源搜索范围</h5><p>Webpack 默认提供了一套同时兼容 CMD、AMD、ESM 等模块化方案的资源搜索规则 —— <a href="https://github.com/webpack/enhanced-resolve">enhanced-resolve</a>，它能将各种模块导入语句准确定位到模块对应的物理资源路径。</p><p>如：</p><ul><li><code>import &#39;lodash&#39;</code> 这一类引入 npm 包的语句会被 <code>enhanced-resolve</code> 定位到对应包体文件路径 <code>node_modules/lodash/index.js</code> ；</li><li><code>import &#39;./a&#39;</code> 这类不带文件后缀名的语句则可能被定位到 <code>./a.js</code> 文件；</li><li><code>import &#39;``@/a&#39;</code> 这类化名路径的引用则可能被定位到 <code>$PROJECT_ROOT/src/a.js</code> 文件。</li></ul><p>这类增强资源搜索体验的特性背后涉及许多 IO 操作，本身可能引起较大的性能消耗，开发者可根据实际情况调整 <code>resolve</code> 配置，缩小资源搜索范围：</p><ol><li><p><code>resolve.extensions</code>配置</p><p>如，在 Webpack 5 中，<code>resolve.extensions</code> 默认值为 <code>[&#39;.js&#39;, &#39;.json&#39;, &#39;.wasm&#39;]</code> ，这意味着 Webpack 在针对不带后缀名的引入语句时可能需要执行三次判断逻辑才能完成文件搜索，所以可以考虑如下优化：</p><ul><li>修改 <code>resolve.extensions</code> 配置项，减少匹配次数</li><li>代码中尽量补齐文件后缀名</li><li>设置 <code>resolve.enforceExtension = true</code> ，强制要求开发者提供明确的模块后缀名，这种做法侵入性太强，不太推荐</li></ul></li><li><p><code>resolve.modules</code>配置</p><p>如，当 Webpack 遇到 <code>import &#39;lodash&#39;</code> 这样的 npm 包导入语句时，会尝试先当前项目的 <code>node_modules</code> 搜索资源，如果找不到则按目录层级尝试逐级向上查找 <code>node_modules</code> 目录，如果依然找不到则最终尝试在全局 <code>node_modules</code> 中搜索。（可参考<a href="https://souche.yuque.com/beijing-myye7/wireless/sbeg5w#2cfc019c%EF%BC%89">https://souche.yuque.com/beijing-myye7/wireless/sbeg5w#2cfc019c）</a></p><p>所以，我们通常会尽量保持 <code>node_modules</code> 资源的高度内聚，控制在有限的一两个层级上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">modules</span>: [path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;node_modules&quot;</span>)],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><code>resolve.mainFiles</code>配置</p><p>与 <code>resolve.extensions</code> 类似，<code>resolve.mainFiles</code> 配置项用于定义文件夹默认文件名，例如对于 <code>import &#39;./dir&#39;</code> 请求，假设 <code>resolve.mainFiles = [&#39;index&#39;, &#39;home&#39;]</code> ，Webpack 会按依次测试 <code>./dir/index</code> 与 <code>./dir/home</code> 文件是否存在。</p><p>所以，应控制 <code>resolve.mainFiles</code> 数组数量，减少匹配次数。</p></li></ol><h5 id="iii-跳过文件编译"><a href="#iii-跳过文件编译" class="headerlink" title="iii. 跳过文件编译"></a>iii. 跳过文件编译</h5><p>第三方依赖 npm 包默认提供了提前打包好，不需要做二次编译的资源版本，此时可以使用 <code>module.noParse</code> 配置项跳过这些 npm 包，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">noParse</span>: <span class="hljs-regexp">/vue|lodash|react/</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="iv-最小化-Loader-作用范围"><a href="#iv-最小化-Loader-作用范围" class="headerlink" title="iv. 最小化 Loader 作用范围"></a>iv. 最小化 Loader 作用范围</h5><p>Loader 在执行内容转换的过程可能需要做大量的 CPU 运算操作，例如 babel-loader、eslint-loader、vue-loader 等，因此开发者有必要根据实际需求，通过 <code>module.rules.include</code>、<code>module.rules.exclude</code> 等配置项限定 Loader 的执行范围，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br>        <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span>,<br>        <span class="hljs-comment">// include: path.join(__dirname, &#x27;./src&#x27;),</span><br>        <span class="hljs-attr">use</span>: [<span class="hljs-string">&quot;babel-loader&quot;</span>, <span class="hljs-string">&quot;eslint-loader&quot;</span>],<br>      &#125;,<br>    ],<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="v-最小化-watch-监控范围"><a href="#v-最小化-watch-监控范围" class="headerlink" title="v. 最小化 watch 监控范围"></a>v. 最小化 watch 监控范围</h5><p>在 watch 模式下(通过 <code>npx webpack --watch</code> 命令启动)，Webpack 会持续监听项目所有代码文件，发生变化时重新构建最新产物。不过，通常情况下前端项目中某些资源并不会频繁更新，例如 <code>node_modules</code> ，此时可以设置 <code>watchOptions.ignored</code> 属性忽略这些文件，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// webpack.config.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">//...</span><br>  <span class="hljs-attr">watchOptions</span>: &#123;<br>    <span class="hljs-attr">ignored</span>: <span class="hljs-regexp">/node_modules/</span>,<br>  &#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="vi-跳过-TS-类型检查"><a href="#vi-跳过-TS-类型检查" class="headerlink" title="vi. 跳过 TS 类型检查"></a>vi. 跳过 TS 类型检查</h5><p>TypeScript 类型检查涉及 AST 解析、遍历以及其它非常消耗 CPU 的操作，会给工程化流程引入性能负担，必要时开发者可选择关闭编译主进程中的类型检查功能，同步用 <code>fork-ts-checker-webpack-plugin</code> 插件将其剥离到单独进程执行，例如对于 <code>ts-loader</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">ForkTsCheckerWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;fork-ts-checker-webpack-plugin&quot;</span>);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>      &#123;<br>        <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>        <span class="hljs-attr">use</span>: [<br>          &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>              <span class="hljs-attr">transpileOnly</span>: <span class="hljs-literal">true</span>,<br>            &#125;,<br>          &#125;,<br>        ],<br>      &#125;,<br>    ],<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">ForkTsCheckerWebpackPlugin</span>()],<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="vii-慎用-source-map"><a href="#vii-慎用-source-map" class="headerlink" title="vii. 慎用 source-map"></a>vii. 慎用 source-map</h5><p><code>source-map</code> 是一种将经过编译、压缩、混淆的代码代码映射回源码的技术，它能够帮助开发者迅速定位到更有意义、更结构化的源码中，方便调试。不过，同样的 <code>source-map</code> 操作本身也有很大性能开销，建议读者根据实际场景慎重选择最合适的 <code>source-map</code> 方案。</p><p>针对 <code>source-map</code> 功能，Webpack 提供了 <code>devtool</code> 选项，可以配置 <code>eval</code>、<code>source-map</code>、<code>cheap-source-map</code> 等值，不考虑其它因素的情况下，最佳实践：</p><ul><li>开发环境使用 <code>eval</code> ，确保最佳编译速度</li><li>生产环境使用 <code>source-map</code>，获取最高质量</li></ul><h3 id="8、babel-plugin-lodash、lodash-webpack-plugin"><a href="#8、babel-plugin-lodash、lodash-webpack-plugin" class="headerlink" title="8、babel-plugin-lodash、lodash-webpack-plugin"></a>8、babel-plugin-lodash、lodash-webpack-plugin</h3><p>&#96;&#96;babel-plugin-lodash<code>和</code>lodash-webpack-plugin&#96;都是用于优化 Lodash 库的 Webpack 插件。（详细用法参考<a href="https://souche.yuque.com/beijing-myye7/wireless/8b92718db0d47f4340d10e88890584d6#ToDcW%EF%BC%89">https://souche.yuque.com/beijing-myye7/wireless/8b92718db0d47f4340d10e88890584d6#ToDcW）</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端实践</tag>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PC 端和移动端共用一套代码的可行性分析</title>
    <link href="/2022/10/31/PC%E7%AB%AF%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%B1%E7%94%A8%E4%B8%80%E5%A5%97%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90/"/>
    <url>/2022/10/31/PC%E7%AB%AF%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%B1%E7%94%A8%E4%B8%80%E5%A5%97%E4%BB%A3%E7%A0%81%E7%9A%84%E5%8F%AF%E8%A1%8C%E6%80%A7%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-可行性分析"><a href="#一、-可行性分析" class="headerlink" title="一、 可行性分析"></a>一、 可行性分析</h2><p>想要对 pc 和移动端共用一套代码来维护，其实做的就是对 pc 端和移动端一些差别的兼容处理，也就是<code>响应式设计</code>。</p><p>响应式设计，主要是通过 css 的媒体查询，百分比流式布局，栅格系统等来对不同屏幕尺寸进行响应处理。一般对简单的博客、企业门户类型的展示型网站会使用较多，带来了诸多优点，比如：组件复用，减少维护成本；减少了与业务的耦合度等。</p><p>但同时，如果对于我们以功能为主的应用场景来说，会存在如下缺点：</p><span id="more"></span><ul><li><p>对前端来说</p><ul><li>设计需求复杂时，前端的开发成本并没有减轻。比如：对车型等表单组件，可能需要两套代码的适配，根据媒体查询或者 ua 检测来异步加载不同端的组件以及样式文件，或者对信息的展示做一些取舍，这样处理逻辑并不会减少，反而降低了代码的清晰度，增加维护的成本。</li><li>针对不同端的差异所做处理的所有 css 及 js 代码，都会下载到客户端，在网络加载方面增加了资源量。比如，如上所说，会加载两套组件的代码，这增加了网络的的加载压力，导致用户体验不够流畅。</li><li>当考虑用一个项目一套资源来维护公用业务时，当在其它项目需要引入它时，会加载它整个项目的资源，包括了可能在当前项目也会用的资源，比如：react, vue, axios, lodash，多加载了重复性代码，这样第一次加载其页面，会变得不够流畅。</li></ul></li><li><p>对产品来说，需要考虑两端的实现可行性。比如：在移动端的业务流程可能需要简化，而 pc 端需要展示完成的业务流程及功能，这在代码开发的可行性上不一定能够完美实现，需要考虑。</p></li><li><p>对设计来说，需要考虑两端的风格统一性，以及组件在不同端的交互设计。因为响应式设计的优点之一就是给用户带来的熟悉感，风格统一。而且，对一些复杂的组件，在不同端的展示方式不一样，但需要在交互上尽量做到不同端的一致性。</p></li><li><p>对后端来说，可能需要额外的配合处理。比如对 token 的一致性处理等。</p></li></ul><p>综上，如果我们开发以展示性为主的新项目时，优先考虑响应式方案，用一套资源来维护；如果开发以复杂功能性为主的新应用时，建议对 pc 端和移动端用两套代码维护。</p><p>不过，可以探讨下如果用响应式实现一些大型应用时，需要考虑些哪些，选用什么技术栈，如何对不同端的差异性做处理，以及如何进行性能相关的优化。</p><h2 id="二、-用响应式方案实现项目"><a href="#二、-用响应式方案实现项目" class="headerlink" title="二、 用响应式方案实现项目"></a>二、 用响应式方案实现项目</h2><p>用响应式实现复杂应用，需要考虑几个方面，比如选用什么技术栈，如何实现对不同端的差异性处理，以及在用户体验性上是否可行，如何能做到最优。</p><h4 id="1、技术栈选用"><a href="#1、技术栈选用" class="headerlink" title="1、技术栈选用"></a>1、技术栈选用</h4><p>前端技术栈选型，主要考虑到业务匹配度，团队人员技术栈，以及服从公司标准的几个方面。react、vue 框架符合以上要求，且公司目前标准是使用的<code>Ant Design</code>和<code>Atom</code>组件库，所以以此为基础，考虑下技术栈选用的可能性。</p><h6 id="i-同时使用-react-ant-design、vue-atom"><a href="#i-同时使用-react-ant-design、vue-atom" class="headerlink" title="i 同时使用 react + ant design、vue + atom"></a>i 同时使用 react + ant design、vue + atom</h6><p>这是符合公司目前开发标准的技术栈，使用此方案，在一个项目中同时引用了 react 和 vue，可以做到 pc 和移动端的业务开发需求，但需要解决 react 和 vue 组件的兼容问题，如：在 react 组件中引用 vue 组件，或者在 vue 组件中引入 react 组件。github 上有个开源插件<code>vuera</code>, 它可以支持在一个项目中同时使用 react 和 vue，react 和 vue 组件之间可以互相引用。</p><p>但会有以下缺点：</p><ul><li>一个项目同时使用 react 和 vue，增加了包的体积</li><li>组件之间通信，vue 和 react 的方式不同，这样降低了代码的可读性和可维护性</li><li>vuera 插件在 github 上星比较低，市场应用不够成熟，增加了趟坑的风险</li></ul><p>这些致命缺点，是不能够满足新项目的选型要求的，所以排除。</p><h6 id="ii-使用-react-ant-design"><a href="#ii-使用-react-ant-design" class="headerlink" title="ii 使用 react + ant design"></a>ii 使用 react + ant design</h6><p>这是符合公司目前开发标准的技术栈，使用此方案，可以最小化开发成本，只保持对 pc 端的设计与开发，而在兼容移动端方面，可以通过设置<code>meta</code>标签的<code>content</code>属性，来对页面进行缩放，用户可以通过手势放大或缩小来控制页面比例，进而实现页面的浏览和交互。</p><p>代码如下：</p><p>Test 路由页面：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 项目路由组件 Test</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/pages/Test/index.tsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;@souche-f2e/muji&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IRootState</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@@/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">rootState: IRootState</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">global</span>: rootState.<span class="property">Common_global</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IProps</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> mapStateToProps&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Test</span> = (<span class="params">props: IProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; isMobile &#125; = props.<span class="property">global</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;li&quot;</span>&gt;</span>customLi1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&quot;li&quot;</span>&gt;</span>customLi2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">className</span>=<span class="string">&#123;[</span>&quot;<span class="attr">li</span>&quot;, <span class="attr">isMobile</span> ? &quot;<span class="attr">m-li</span>&quot; <span class="attr">:</span> &quot;&quot;]<span class="attr">.join</span>(&quot; &quot;)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">          在移动端需要特殊处理的Li3</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">Test</span>);</span><br></pre></td></tr></table></figure><p>项目入口文件、自适应适配方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 项目入口文件</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/bootstrap.ts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; dispatch &#125; <span class="keyword">from</span> <span class="string">&quot;@@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; judgeIsMobile, autoFlexible &#125; <span class="keyword">from</span> <span class="string">&quot;@/shared/utils&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.less&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bootstrap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isMobile = <span class="title function_">judgeIsMobile</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置全局store，是否移动端</span></span><br><span class="line">  dispatch.<span class="property">Common_global</span>.<span class="title function_">SET_STATE</span>(&#123; isMobile &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对pc和移动端进行适配</span></span><br><span class="line">  <span class="title function_">autoFlexible</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化函数，将在整个前端应用渲染前调用</span></span><br><span class="line">  <span class="keyword">const</span> currentRoutePath = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">hash</span>.<span class="title function_">toLowerCase</span>();</span><br><span class="line">  <span class="keyword">if</span> (currentRoutePath.<span class="title function_">indexOf</span>(<span class="string">&quot;signrespage&quot;</span>) &gt; <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 获取用户信息，权限信息</span></span><br><span class="line">  <span class="keyword">await</span> dispatch.<span class="property">Common_global</span>.<span class="title function_">getAuthZ</span>(&#123;&#125;);</span><br><span class="line">  <span class="comment">// 初始化路由数据操作</span></span><br><span class="line">  dispatch.<span class="property">Common_global</span>.<span class="title function_">getQueryByRouter</span>(&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 工具方法</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/shared/util.ts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否移动端</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">judgeIsMobile</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.<span class="title function_">test</span>(</span><br><span class="line">    navigator.<span class="property">userAgent</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对pc和移动端进行适配</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">autoFlexible</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setRootFontSize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> isMobile = <span class="title function_">judgeIsMobile</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> rootHtml = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取视口宽度clientWidth</span></span><br><span class="line">    <span class="keyword">let</span> rootWidth = rootHtml.<span class="property">clientWidth</span> &lt; <span class="number">1366</span> ? <span class="number">1366</span> : rootHtml.<span class="property">clientWidth</span>; <span class="comment">// pc最小视口宽度设为1366px</span></span><br><span class="line">    <span class="keyword">let</span> rem = (rootWidth * <span class="number">100</span>) / <span class="number">1920</span>; <span class="comment">// 计算rem（假设pc设计图尺寸宽1920px，设计图的rem = 100px）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是移动端，设置viewport的视口宽度，并进行比例缩放，以达到pc端设计图的比例效果。但需要用户手势放大去操作</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">vp</span>: any = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pc端，比例默认1，且不可手势放大缩小</span></span><br><span class="line">    <span class="keyword">let</span> width = <span class="string">&quot;device-width&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> scale = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动端，比例为 1 / dpr，且手势可放大缩小，同时，限制最小的缩放比例`minimum-scale`，不限制最大的放大比例`maximum-scale`</span></span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">      rootWidth = rootHtml.<span class="property">clientWidth</span>;</span><br><span class="line">      width = rootWidth * dpr + <span class="string">&quot;&quot;</span>;</span><br><span class="line">      scale = <span class="number">1</span> / dpr;</span><br><span class="line">      rem = (rootWidth * dpr * <span class="number">100</span>) / <span class="number">1920</span>; <span class="comment">// 计算rem（同样mobile设计图尺寸与pc1920px保持一致，设计图的rem = 100px）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> contentAttr = <span class="string">`width=<span class="subst">$&#123;width&#125;</span>, initial-scale=<span class="subst">$&#123;scale&#125;</span>, maximum-scale=<span class="subst">$&#123;scale&#125;</span>, minimum-scale=<span class="subst">$&#123;scale&#125;</span>, user-scalable=no`</span>;</span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">      contentAttr = <span class="string">`width=<span class="subst">$&#123;width&#125;</span>, initial-scale=<span class="subst">$&#123;scale&#125;</span>, minimum-scale=<span class="subst">$&#123;scale&#125;</span>, user-scalable=yes`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果存在viewport Meta，直接设置其属性</span></span><br><span class="line">    <span class="keyword">if</span> (vp) &#123;</span><br><span class="line">      vp.<span class="title function_">setAttribute</span>(<span class="string">&quot;content&quot;</span>, contentAttr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果不存在viewport Meta，先创建一个viewport Meta，然后再设置其属性，最后添加到head中</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      vp = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;meta&quot;</span>);</span><br><span class="line">      vp.<span class="title function_">setAttribute</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;viewport&quot;</span>);</span><br><span class="line">      vp.<span class="title function_">setAttribute</span>(<span class="string">&quot;content&quot;</span>, contentAttr);</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(vp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态写入样式</span></span><br><span class="line">    rootHtml.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">`<span class="subst">$&#123;rem&#125;</span>px`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">setRootFontSize</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>样式文件：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 需要适配的公共样式</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/index.less</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-class">.page-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-class">.m-li</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，在项目入口文件处，对 pc 和移动端都使用了“只针对 pc 设计稿”来动态设置 rem 的自适应方案，但也在基础上对移动端做了<code>vieport meta</code>标签的缩放处理，因为需要把 pc 端的设计页面完整地展示到移动端。<br>同时，考虑到移动端的不同设备像素比而带来的<code>移动端1px像素问题</code>（UI 设计稿中设置边框为 1 像素，前端在开发过程中如果出现 border:1px，测试会发现在某些机型上，1px 会比较粗），通过对<code>vieport meta</code>标签<code>content</code>属性的<code>initial-scale</code>等设置，来解决这个问题。</p><p>此外，1、为了对入口文件所引入的公共样式文件<code>import &#39;./index.less&#39;</code>进行非模块化； 2、为减少开发过程对尺寸单位的转换（css-&gt;rem）开销，需要在<code>muji.config.js</code>中配置<code>px2rem-loader</code>的 loader。<br>需要对打包配置文件做下处理，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 项目打包配置文件</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/muji.config.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对某个规则的oneOf子规则进行修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">setOneOfRule</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  chainConfig,</span></span><br><span class="line"><span class="params">  ruleType,</span></span><br><span class="line"><span class="params">  oneOfRule,</span></span><br><span class="line"><span class="params">  addType = <span class="number">0</span>,</span></span><br><span class="line"><span class="params">  replaceIndex = <span class="number">0</span></span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> cssOneOfs = chainConfig.<span class="property">module</span>.<span class="title function_">rule</span>(ruleType).<span class="title function_">toConfig</span>().<span class="property">oneOf</span>;</span><br><span class="line">  <span class="keyword">if</span> (addType === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 添加到最前</span></span><br><span class="line">    cssOneOfs.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">0</span>, oneOfRule);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (addType === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 替换</span></span><br><span class="line">    cssOneOfs.<span class="title function_">splice</span>(replaceIndex, <span class="number">1</span>, oneOfRule);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (addType === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// 添加到最后</span></span><br><span class="line">    cssOneOfs.<span class="title function_">push</span>(oneOfRule);</span><br><span class="line">  &#125;</span><br><span class="line">  chainConfig.<span class="property">module</span>.<span class="title function_">rule</span>(ruleType).<span class="property">oneOfs</span>.<span class="title function_">clear</span>();</span><br><span class="line">  chainConfig.<span class="property">module</span>.<span class="title function_">rule</span>(ruleType).<span class="title function_">merge</span>(&#123; <span class="attr">oneOf</span>: cssOneOfs &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">async</span> () =&gt; (&#123;</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">router</span>: &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;hash&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">chainWebpack</span>(<span class="params">chainConfig</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> replace_except_module_css = &#123;</span><br><span class="line">      <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>],</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>, <span class="attr">options</span>: &#123; <span class="attr">sourceMap</span>: <span class="literal">false</span> &#125; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">importLoaders</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">localIdentName</span>: <span class="string">&quot;[name]_[local]_[hash:base64:5]&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;px2rem-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">remUnit</span>: <span class="number">100</span>, <span class="comment">// 100px = 1rem</span></span><br><span class="line">            <span class="attr">remPrecision</span>: <span class="number">8</span>, <span class="comment">// rem的小数点后位数</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> new_include_less = &#123;</span><br><span class="line">      <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/index.less&quot;</span>),</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>, <span class="attr">options</span>: &#123; <span class="attr">sourceMap</span>: <span class="literal">false</span> &#125; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">localIdentName</span>: <span class="string">&quot;[name]_[local]_[hash:base64:5]&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;px2rem-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">remUnit</span>: <span class="number">100</span>, <span class="comment">// 100px = 1rem</span></span><br><span class="line">            <span class="attr">remPrecision</span>: <span class="number">8</span>, <span class="comment">// rem的小数点后位数</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">modifyVars</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> replace_except_module_less = &#123;</span><br><span class="line">      <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>],</span><br><span class="line">      <span class="attr">use</span>: [</span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">&quot;style-loader&quot;</span>, <span class="attr">options</span>: &#123; <span class="attr">sourceMap</span>: <span class="literal">false</span> &#125; &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">importLoaders</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">modules</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">localIdentName</span>: <span class="string">&quot;[name]_[local]_[hash:base64:5]&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;px2rem-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">remUnit</span>: <span class="number">100</span>, <span class="comment">// 100px = 1rem</span></span><br><span class="line">            <span class="attr">remPrecision</span>: <span class="number">8</span>, <span class="comment">// rem的小数点后位数</span></span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">loader</span>: <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">            <span class="attr">sourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">modifyVars</span>: &#123;&#125;,</span><br><span class="line">            <span class="attr">javascriptEnabled</span>: <span class="literal">true</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 对`exclude: [ /node_modules/ ]`的css规则，进行修改，增加px2rem-loader插件，以实现自动对px转rem</span></span><br><span class="line">    <span class="title function_">setOneOfRule</span>(chainConfig, <span class="string">&quot;css&quot;</span>, replace_except_module_css, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 对`include: src/index.less`的less规则，对css进行非模块化处理：`modules: false`，因为入口引入的`import &#x27;./index.less&#x27;`是公共模块; 同时也增加px2rem-loader插件，以实现自动对px转rem</span></span><br><span class="line">    <span class="title function_">setOneOfRule</span>(chainConfig, <span class="string">&quot;less&quot;</span>, new_include_less);</span><br><span class="line">    <span class="comment">// 对`exclude: [ /node_modules/ ]`的less规则，进行修改，增加px2rem-loader插件，以实现自动对px转rem</span></span><br><span class="line">    <span class="title function_">setOneOfRule</span>(chainConfig, <span class="string">&quot;less&quot;</span>, replace_except_module_less, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    chainConfig.<span class="property">resolve</span>.<span class="property">extensions</span>.<span class="title function_">add</span>(<span class="string">&quot;.ts&quot;</span>).<span class="title function_">add</span>(<span class="string">&quot;.js&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> inspect = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>).<span class="property">inspect</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">inspect</span>(chainConfig.<span class="title function_">toConfig</span>(), <span class="literal">false</span>, <span class="literal">null</span>, <span class="literal">true</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">dynamicImport</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;&quot;</span>, <span class="comment">//项目部署基础路径</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最终页面效果截图如下：</p><p>PC 端：<br><img src="/images/22_10_31/auto-2.jpg" alt="image-20221024144942723"></p><p>移动端（可通过手势缩小展示出 pc 的完整页面，或通过手势放大去对一些元素进行交互）：<br><img src="/images/22_10_31/auto-1.png" alt="image-20221024144942723"></p><p>但会有以下缺点：</p><ul><li>用户体验变差，从而减少产品可信度和依赖度</li></ul><p>这也是比较致命的缺点，是不能够满足新项目的选型要求的，所以排除。</p><h6 id="iii-选用-react-ant-desgin-ant-desgin-mobile"><a href="#iii-选用-react-ant-desgin-ant-desgin-mobile" class="headerlink" title="iii 选用 react + ant desgin + ant desgin mobile"></a>iii 选用 react + ant desgin + ant desgin mobile</h6><p>使用 react 技术栈，比较可行，但<code>ant design mobile</code>库，不属于公司的标准，对一些公司的业务组件，需要公司额外开发或者开发者额外自己开发，比如：移动端的车型组件。</p><h6 id="iv-选用-vue-elementui-atom"><a href="#iv-选用-vue-elementui-atom" class="headerlink" title="iv 选用 vue + elementui + atom"></a>iv 选用 vue + elementui + atom</h6><p>使用 vue 技术栈，比较可行，但<code>elementui</code>库，不属于公司的标准，对一些公司的业务组件，需要公司额外开发或者开发者额外自己开发，比如：pc 端的车型组件。</p><p>综上，可选<code>react + ant desgin + ant desgin mobile</code>或<code>vue + elementui + atom</code>技术栈，但同时需要考虑对业务组件开发工作量的评估。</p><p>个人认为，react 在开发复杂 spa 应用上，更加灵活、容易扩展，vue 在开发简单的 spa 应用上，更简单高效。所以为了兼容未来可能更庞大复杂的业务，更偏向使用 react。</p><p>以下，都是以<code>react + ant desgin + ant desgin mobile</code>技术栈为例。</p><h4 id="2、响应式的实现"><a href="#2、响应式的实现" class="headerlink" title="2、响应式的实现"></a>2、响应式的实现</h4><p>响应式的实现，无非就是对不同端的的样式适配及对差异性所做的额外处理。</p><h6 id="i-样式的响应式处理"><a href="#i-样式的响应式处理" class="headerlink" title="i 样式的响应式处理"></a>i 样式的响应式处理</h6><p>样式上，可通过动态设置 rem 来实现自适应，实现步骤参考 [第二步第 1 节第 ii 点](# ii 使用 react + ant design)。但动态设置 rem 的方法<code>autoFlexible</code>需要进行改造下，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 工具方法</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/shared/util.ts</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否移动端</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">judgeIsMobile</span> = (<span class="params"></span>) =&gt;</span><br><span class="line">  <span class="regexp">/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i</span>.<span class="title function_">test</span>(</span><br><span class="line">    navigator.<span class="property">userAgent</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对pc和移动端进行适配</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">autoFlexible</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setRootFontSize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> isMobile = <span class="title function_">judgeIsMobile</span>();</span><br><span class="line">    <span class="keyword">const</span> rootHtml = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取视口宽度clientWidth</span></span><br><span class="line">    <span class="keyword">let</span> rootWidth = rootHtml.<span class="property">clientWidth</span> &lt; <span class="number">1366</span> ? <span class="number">1366</span> : rootHtml.<span class="property">clientWidth</span>; <span class="comment">// pc最小视口宽度设为1366px</span></span><br><span class="line">    <span class="keyword">let</span> rem = (rootWidth * <span class="number">100</span>) / <span class="number">1920</span>; <span class="comment">// 计算rem（假设pc设计图尺寸宽1920px，设计图的rem = 100px）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果是移动端</span></span><br><span class="line">    <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">      rootWidth = rootHtml.<span class="property">clientWidth</span>;</span><br><span class="line">      rem = (rootWidth * <span class="number">100</span>) / <span class="number">750</span>; <span class="comment">// 计算rem（假设mobile设计图尺寸宽750px，设计图的rem = 100px）</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态写入样式</span></span><br><span class="line">    rootHtml.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="string">`<span class="subst">$&#123;rem&#125;</span>px`</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_">setRootFontSize</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>因为 pc 和移动端设计稿是不一样的，所以需要分别对设计稿进行 rem 计算，我们假设的设计图 rem 都为 100px（统一了基数是为了在开发过程中方便，只关注设计稿的 css 宽度即可，分别对 pc 或对移动端的元素设置对应 px 像素即可），这样则能根据当前的视口宽度和设计稿的宽度来算出当前 pc 端或移动端的根元素 fontSize 是多少，并且我们在<code>px2rem-loader</code>配置中已经配置了 1rem 为 100px，后续开发就不用自己去换算 rem 单位，直接去写设计稿元素的 px 大小即可。</p><h6 id="ii-对组件的响应式处理"><a href="#ii-对组件的响应式处理" class="headerlink" title="ii 对组件的响应式处理"></a>ii 对组件的响应式处理</h6><p>组件的设计，需要重新做个包装，比如公共模块：面包屑组件；表单模块：分页条、下拉框；业务模块：车型组件。需要分别对其包装一层，通过 ua 和特性检测，来判断需要返回一个 pc 端的组件还是移动端的组件，并将组件的”接口”，如回调函数、返回的数据结构等保持统一，以提供外部直接调用。</p><p>如，对 Input 组件为例，代码如下：</p><p>Test 路由页面：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 项目路由组件 Test</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/pages/Test/index.tsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;@souche-f2e/muji&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IRootState</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">CommonInput</span> <span class="keyword">from</span> <span class="string">&quot;./components/CommonInput&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">rootState: IRootState</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">global</span>: rootState.<span class="property">Common_global</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IProps</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> mapStateToProps&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Test</span> = (<span class="params">props: IProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [inputValue, setInputValue] = <span class="title function_">useState</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">inputChangeHandle</span> = (<span class="params">value: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setInputValue</span>(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;page-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>测试Input组件自适应<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">CommonInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">border:</span> &quot;<span class="attr">1px</span> <span class="attr">solid</span> #<span class="attr">eee</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;inputValue&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">allowClear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">placeholder</span>=<span class="string">&quot;请输入正确的银行卡号&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;inputChangeHandle&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">Test</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @desc: 做了兼容的公共Input组件 CommonInput</span></span><br><span class="line"><span class="comment"> * @FilePath: /demo-project/src/pages/Test/components/CommonInput.tsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&quot;@souche-f2e/muji&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">IRootState</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@@/store&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span> &#125; <span class="keyword">from</span> <span class="string">&quot;antd&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Input</span> <span class="keyword">as</span> mInput &#125; <span class="keyword">from</span> <span class="string">&quot;antd-mobile/es&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MobileInput</span> = mInput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">mapStateToProps</span> = (<span class="params">rootState: IRootState</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">global</span>: rootState.<span class="property">Common_global</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">IProps</span> = <span class="title class_">ReturnType</span>&lt;<span class="keyword">typeof</span> mapStateToProps&gt; &amp; &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">any</span>;</span><br><span class="line">  <span class="attr">allowClear</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  <span class="attr">placeholder</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">e: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CommonInput</span> = (<span class="params">props: IProps</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="variable language_">global</span>, dispatch, onChange, ...rest &#125; = props;</span><br><span class="line">  <span class="keyword">const</span> &#123; isMobile &#125; = <span class="variable language_">global</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; allowClear &#125; = rest <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMobile) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">MobileInput</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...rest</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">clearable</span>=<span class="string">&#123;allowClear&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> onChange(e)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Input</span> &#123;<span class="attr">...rest</span>&#125; <span class="attr">onChange</span>=<span class="string">&#123;(e)</span> =&gt;</span> onChange(e.target.value)&#125; /&gt;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">connect</span>(mapStateToProps)(<span class="title class_">CommonInput</span>);</span><br></pre></td></tr></table></figure><p>由代码知，在公共组件上，需要对两端的组件<code>ant desgin</code>和<code>ant desgin mobile</code>进行抹平处理，一是通过判断是什么环境，返回对应的组件；二是对两端组件的 api 差异性进行处理，如：Input 组件在<code>ant desgin</code>是通过<code>allowClear</code>来控制是否可以清除，事件<code>onChange</code>回调函数参数结构是<code>e.target.value</code>；而在<code>ant desgin mobile</code>是通过<code>clearable</code>来控制是否可以清除，事件<code>onChange</code>回调函数参数结构是<code>value</code>，直接返回 value。</p><p>页面效果截图如下：</p><p>PC 端：<br><img src="/images/22_10_31/auto-3.jpg" alt="image-20221024144942723"></p><p>移动端：<br><img src="/images/22_10_31/auto-4.jpg" alt="image-20221024144942723"></p><p>更复杂的组件可能还需要对样式、组合嵌套的逻辑进行处理。</p><h6 id="iii-对业务的响应式处理"><a href="#iii-对业务的响应式处理" class="headerlink" title="iii 对业务的响应式处理"></a>iii 对业务的响应式处理</h6><p>业务逻辑上，可通过全局保存的渠道参数，来对不同功能的展示和不同模块的资源加载进行对应处理。</p><h6 id="iv-其它兼容处理"><a href="#iv-其它兼容处理" class="headerlink" title="iv 其它兼容处理"></a>iv 其它兼容处理</h6><p>其它兼容，比如移动端和 pc 端的事件的兼容处理（移动端的触摸事件，pc 端的鼠标键盘事件等），可通过一个公共函数，对其各事件进行包装，对不支持的 api 进行“抹平”，以防止意外错误。</p><p>如：在 pc 端监听<code>onclick</code>事件，鼠标点击就会触发一次，而移动端手指点击一个元素会触发<code>touchstart --&gt; touchmove -&gt; touchend --&gt; click</code>的过程。</p><h4 id="3、性能优化"><a href="#3、性能优化" class="headerlink" title="3、性能优化"></a>3、性能优化</h4><p>性能优化：</p><ul><li>对不同端的资源按需进行引入</li><li>对一些公共方法通过<code>export</code>对外暴露而不是<code>export default</code>，防止某一个端（如移动端）全程都不会用到的函数（如：键盘事件），也加载到打包文件中</li><li>pc 端和移动端图片大小和质量展示不同，可在 webpack 打包过程中，对移动端的图片进行更低一些的质量压缩处理</li><li>考虑资源预加载</li><li><code>ant desgin mobile</code>组件库在 webpack 4+ 都支持 Tree Shaking，所以绝大多数情况下我们无需做额外的配置即可拥有较小的包体积</li></ul><h4 id="4、附：以上相关的性能测试"><a href="#4、附：以上相关的性能测试" class="headerlink" title="4、附：以上相关的性能测试"></a>4、附：以上相关的性能测试</h4><h6 id="i-对于即将需要开发的公共模块功能，加载一个新项目的资源和直接在原项目中开发功能，性能差距大么，如果差距大，有什么解决方案？"><a href="#i-对于即将需要开发的公共模块功能，加载一个新项目的资源和直接在原项目中开发功能，性能差距大么，如果差距大，有什么解决方案？" class="headerlink" title="i 对于即将需要开发的公共模块功能，加载一个新项目的资源和直接在原项目中开发功能，性能差距大么，如果差距大，有什么解决方案？"></a>i 对于即将需要开发的公共模块功能，加载一个新项目的资源和直接在原项目中开发功能，性能差距大么，如果差距大，有什么解决方案？</h6><p>测试示例一：以绑卡公共模块的财务二清 H5 项目为例，如果别的项目用到了其某个功能，需要加载其整个项目的资源，通过谷歌浏览器的 performance 面板记录其过程后，如下图所示：</p><p><img src="/images/22_10_31/performance.jpg" alt="image-20221024144942723"></p><p>可知：</p><ul><li><p>请求的资源总大小：1MB</p></li><li><p>白屏结束时间（FP）: 628ms</p></li><li><p>dom 构造完成时间（DCL）: 891ms</p></li><li><p>首屏渲染结束时间（FCP）: 1026ms</p></li><li><p>关键元素可见到的时间（LCP）: 1026ms</p></li><li><p>首屏资源加载完成时间（L）: 1027ms</p></li></ul><p>可以看到，从地址栏输入网址后回车至浏览器渲染到关键元素可见到的节点，所用的时间为 1026ms，即一秒的时间，在 2.5 秒内发生这是可以接受的。</p><p>测试示例二：上述项目是比较简单的 h5 项目，如果是比较复杂一些的绑卡 pc 端的财务管理系统呢，通过谷歌浏览器的 performance 面板记录其过程后，如下图所示：</p><p><img src="/images/22_10_31/performance-2.jpg" alt="image-20221024144942723"></p><p>可知：</p><ul><li><p>请求的资源总大小：2.2MB</p></li><li><p>白屏结束时间（FP）: 1166ms</p></li><li><p>dom 构造完成时间（DCL）: 975ms</p></li><li><p>首屏渲染结束时间（FCP）: 1179ms</p></li><li><p>关键元素可见到的时间（LCP）: 1467ms</p></li><li><p>首屏资源加载完成时间（L）: 1435ms</p></li></ul><p>可以看到，从地址栏输入网址后回车至浏览器渲染到关键元素可见到的节点，所用的时间为 1467ms，即 1.5 秒的时间，在 2.5 秒内发生这是可以接受的。</p><p>测试示例三：但是，上述项目也是属于业务较为简单的 pc 端项目，如果我们未来的开发项目是大型复杂的应用（如：react + ant desgin + ant desgin mobile）呢，可以暂时以业务复杂的 GMS 系统为例，通过谷歌浏览器的 performance 面板记录其过程后，如下图所示：</p><p><img src="/images/22_10_31/performance-3.jpg" alt="image-20221024144942723"></p><p>可知：</p><ul><li><p>请求的资源总大小：6.6MB</p></li><li><p>白屏结束时间（FP）: 2527ms</p></li><li><p>dom 构造完成时间（DCL）: 2359ms</p></li><li><p>首屏渲染结束时间（FCP）: 2543ms</p></li><li><p>关键元素可见到的时间（LCP）: 3070ms</p></li><li><p>首屏资源加载完成时间（L）： 2975ms</p></li></ul><p>可以看到，从地址栏输入网址后回车至浏览器渲染到关键元素可见到的节点，所用的时间为 3070ms，即 3 秒的时间，超过了 2.5 秒，这说明对于用户体验来说，是不够良好的。</p><p>可以得出结论，对于一个项目，资源加载完成之后，如果后续为了引入某公共模块功能，而再次引用一个大型的复杂 spa 应用，这样又会经历从资源下载，到白屏结束，再到首屏渲染可见，这对用户的体验是比较差的。</p><p>那么，可以解决或优化这种问题么？</p><p>重新加载一套新资源，是避免不了这个首屏资源加载和渲染的问题的。但如果从开发成本上考虑，非要这么做的话。还是可以从一些方面来对其进行优化，从而尽可能地减少白屏时间和首屏渲染结束的时间。</p><p>可考虑的优化点：</p><ul><li>从减少资源体积的方面入手。如：为了对公共函数进行<code>tree-shaking</code>，对外暴露方法要通过<code>export</code>而不是<code>export default</code>。</li><li>减少页面的白屏时间。如：1、在加载很多图片的时候，由于 http1.1 限制，不能多路传输，和 http2 相比，下载较慢，会增加白屏的时间，尽量用 hpps 协议，并有条件的话使用 http2；2、pc 和移动端对图片的质量要求不一样，如果是移动端，可对图片进行质量的压缩较大些；3、页面的 js 尽量不要写在 head 头部里，会阻塞页面的解析和渲染。</li><li>考虑资源预加载。如：<code>&lt;link rel=&quot;prefetch&quot; href=&quot;//sample.com/index.html&quot;&gt;</code></li></ul><h6 id="ii-如果一个项目中需要实现-react-和-vue-共存且组件能够互相兼容，vuera-插件的可行性？"><a href="#ii-如果一个项目中需要实现-react-和-vue-共存且组件能够互相兼容，vuera-插件的可行性？" class="headerlink" title="ii 如果一个项目中需要实现 react 和 vue 共存且组件能够互相兼容，vuera 插件的可行性？"></a>ii 如果一个项目中需要实现 react 和 vue 共存且组件能够互相兼容，vuera 插件的可行性？</h6><p>按照<a href="https://github.com/akxcv/vuera">https://github.com/akxcv/vuera</a> 文档，自己写 demo，会报如下错误，很不友好，社区也不够丰富，实际项目开发用 vuera 的可行性几乎不太可能。</p><p><img src="/images/22_10_31/error.jpg" alt="image-20221024144942723"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>移动端兼容</tag>
      
      <tag>适配</tag>
      
      <tag>项目中遇到的问题</tag>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Node 模块机制</title>
    <link href="/2022/05/05/Node%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/05/05/Node%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Node-简介"><a href="#一、Node-简介" class="headerlink" title="一、Node 简介"></a>一、Node 简介</h2><h4 id="1、为什么-Node-的实现语言是-JavaScript"><a href="#1、为什么-Node-的实现语言是-JavaScript" class="headerlink" title="1、为什么 Node 的实现语言是 JavaScript"></a>1、为什么 Node 的实现语言是 JavaScript</h4><blockquote><p>Node.js 创造者 Ryan Dahl，最初是为了设计出具有事件驱动、非阻塞 I&#x2F;O 特点的高性能 Web 服务器。</p></blockquote><p>JavaScript 作为 Node 实现语言，主要有以下原因：</p><ul><li>高性能<ul><li>当时 Chrome 浏览器的 JavaScript 引擎 V8 性能第一</li></ul></li><li>符合事件驱动<ul><li>JavaScript 在浏览器中有广泛的事件驱动方面的应用</li></ul></li><li>没有历史包袱<ul><li>JavaScript 在后端部分一直没有市场，可以说历史包袱为零，为其导入非阻塞 I&#x2F;O 库没有额外阻力</li></ul></li></ul><span id="more"></span><h4 id="2、为什么叫-Node"><a href="#2、为什么叫-Node" class="headerlink" title="2、为什么叫 Node"></a>2、为什么叫 Node</h4><p>Node 作为一个不强制共享任何资源的单线程、单进程系统，包含十分适宜网络的库，目标也是成为一个构建快速、可伸缩的网络应用平台。<br>它通过通信协议来组织许多 Node，非常容易通过扩展来达成构建大型网络应用的目的。每一个 Node 进程都构成这个网络应用中的节点，这是它名字所含意义的真谛。</p><h4 id="3、给-JavaScript-带来的意义"><a href="#3、给-JavaScript-带来的意义" class="headerlink" title="3、给 JavaScript 带来的意义"></a>3、给 JavaScript 带来的意义</h4><p>Node 打破了 JavaScript 只能在浏览器中运行的局面，前后端编程环境统一，可以大大降低前后端转换所需要的上下文交换代价。</p><p>Node 程序主要分为三种：</p><ul><li>Web 应用程序<ul><li>提供单页应用的简单程序</li><li>REST 微服务</li><li>全栈的 web 应用</li></ul></li><li>命令行工具和后台程序<ul><li>命令行工具如 npm、Gulp 和 webpack 等</li><li>后台程序就是后台服务，如 PM2 进程管理器</li></ul></li><li>桌面程序<ul><li>桌面程序一般是用 Electron 框架写的软件，Electron 用 Node 作为基于 Web 的桌面应用的后台。如，Atom 和 Visual Studio Code 文本编辑器都属于这一类。</li></ul></li></ul><h4 id="4、特点"><a href="#4、特点" class="headerlink" title="4、特点"></a>4、特点</h4><h6 id="1-异步-I-x2F-O"><a href="#1-异步-I-x2F-O" class="headerlink" title="1) 异步 I&#x2F;O"></a>1) 异步 I&#x2F;O</h6><p>Node 中绝大数操作都是以异步的方式进行调用，它底层构建了很多异步 I&#x2F;O 的 API，从文件读取到网络请求等，均是如此。这样的意义在于，在 Node 中，我们可以从语言层面很自然地进行并行 I&#x2F;O 操作，每个调用之间无需等待之前的 I&#x2F;O 调用结束，在编程模型上可以极大提升效率。</p><p>如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;/path1&quot;</span>, <span class="keyword">function</span> (<span class="params">err, file</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取文件1完成&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;/path2&quot;</span>, <span class="keyword">function</span> (<span class="params">err, file</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取文件2完成&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>优势：对于同步 I&#x2F;O 而言，它们的耗时是两个任务的耗时之和。而对于上述异步带来的优势是显而易见的。</p><h6 id="2-事件与回调函数"><a href="#2-事件与回调函数" class="headerlink" title="2) 事件与回调函数"></a>2) 事件与回调函数</h6><p>如下代码，Node 创建一个 Web 服务器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> queryString = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 侦听服务器的request事件</span></span><br><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> postData = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    req.<span class="title function_">setEncoding</span>(<span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">    <span class="comment">// 侦听请求的data事件</span></span><br><span class="line">    res.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>, <span class="keyword">function</span> (<span class="params">chunk</span>) &#123;</span><br><span class="line">      postData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 侦听请求的end事件</span></span><br><span class="line">    req.<span class="title function_">on</span>(<span class="string">&quot;end&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      res.<span class="title function_">end</span>(postData);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">listen</span>(<span class="number">8080</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;服务器启动完成&quot;</span>);</span><br></pre></td></tr></table></figure><p>优缺点：</p><ul><li>事件的编程方式具有轻量级、松耦合、只关注事务点等优势，但在多个异步任务的场景下，事件与事件之间各自独立，如何协作是个问题。</li><li>回调函数也是最好的接受异步调用返回数据的方式，但这种编程方式代码的编写顺序与执行顺序并无关系，这对于很多习惯同步思路编程的人来说，可能造成阅读障碍。</li></ul><p>解决方法：<br>在转变为异步编程思维后，通过对业务的划分和对事件的提炼，在流程控制方面处理业务的复杂度与同步方式实际上是一致的。</p><h6 id="3-单线程"><a href="#3-单线程" class="headerlink" title="3) 单线程"></a>3) 单线程</h6><p>Node 保持了 JavaScript 在浏览器中单线程的特点。</p><p>优点：单线程不用像多线程那样处处在意状态的同步问题，没有死锁的存在，也没有线程上下文交换所带来的性能上的开销。</p><p>缺点：</p><ul><li>无法利用多核 CPU</li><li>错误会引起整个应用退出，应用的健壮性值得考验</li><li>大量计算占用 CPU 导致无法继续调用异步 I&#x2F;O</li></ul><p>解决方法：<br>Node 子进程<code>child_process</code>的出现，可以从容地应对单线程在健壮性和无法利用多核 CPU 方面的问题。通过将计算分发到各个子进程，可以将大量计算分解掉，然后再通过进程之间的事件消息来传递结果，这可以很好地保持应用模型的简单和低依赖。通过<code>Master-Worker</code>的管理方式，也可以很好地管理各个工作进程，以达到更高的健壮性。</p><h6 id="4-跨平台"><a href="#4-跨平台" class="headerlink" title="4) 跨平台"></a>4) 跨平台</h6><p>Node 兼容 Windows 和 *nix 平台，它在操作系统与 Node 上层模块系统之间构建了一层平台层架构，即<code>libuv</code>。目前<code>libuv</code>已经成为许多系统实现跨平台的基础组件。Node 的第三方 C++模块也可以借助<code>libuv</code>实现跨平台。</p><p><img src="/images/node/node_1_1.png" alt="image-node_1_1"></p><h2 id="二、模块机制"><a href="#二、模块机制" class="headerlink" title="二、模块机制"></a>二、模块机制</h2><h4 id="1、CommonJS-规范"><a href="#1、CommonJS-规范" class="headerlink" title="1、CommonJS 规范"></a>1、CommonJS 规范</h4><h6 id="1-背景"><a href="#1-背景" class="headerlink" title="1) 背景"></a>1) 背景</h6><p>ECMAScript 规范涵盖范畴非常小，只包含词法、类型、上下文、表达式、声明、方法、对象等语言的基本要素。<br>JavaScript 的表现能力取决于宿主环境中的 API 支持程度，Web1.0 时代只有对 DOM、BOM 等基本的支持，Web2.0，W3C 对 HTML5 规范的推进使得浏览器中出现了更多的标准 API，但也只发生在前端，后端 JavaScript 的规范远远落后。</p><p>JavaScript 规范有以下缺陷：</p><ul><li>没有模块系统。</li><li>标准库较少。ECMAScript 仅定义部分核心库，对于文件系统，I&#x2F;O 流等常见需求却没有标准的 API。</li><li>没有标准接口。在 JavaScript 中，几乎没有定义过如 Web 服务器或者数据之类的标准统一接口。</li><li>缺乏包管理系统。这导致 JavaScript 应用中基本没有自动加载和安装依赖的能力。</li></ul><h6 id="2-目标"><a href="#2-目标" class="headerlink" title="2) 目标"></a>2) 目标</h6><p>CommonJS 规范的提出，主要为了弥补当前 JavaScript 没有标准的缺陷，以达到像 Python、Ruby 和 Java 具备开发大型应用的基础能力。期望用 CommonJS API 写的应用可以具备跨宿主环境执行的能力，不仅可以开发富客户端应用，也可以编写服务器端 JavaScript 应用程序、命令行工具、桌面图形界面应用程序等。</p><p>目前，CommonJS 规范涵盖了模块、二进制、Buffer、字符集编码、I&#x2F;O 流、进程环境、文件系统、套接字、单元测试、Web 服务器网关接口、包管理等。</p><p>Node 与浏览器以及 W3C 组织、CommonJS 组织、ECMAScript 之间的关系，如下图所示：</p><p><img src="/images/node/node_2_1.png" alt="image-node_2_1"></p><h6 id="3-CommonJS-的模块规范"><a href="#3-CommonJS-的模块规范" class="headerlink" title="3) CommonJS 的模块规范"></a>3) CommonJS 的模块规范</h6><ul><li>模块引用<br>通过 require()方法引入一个模块的 API 到当前的上下文中。</li><li>模块定义<br>上下文提供 require()方法来引入外部模块，对应引入的功能，上下文提供了<code>exports</code>对象用于导出当前模块的方法或者变量，并且它是唯一导出的出口。<br>在模块中，还存在一个<code>module</code>对象，它代表模块自身，而<code>exports</code>是<code>module</code>的属性。</li><li>模块标识<br>模块标识就是传递给 require()方法的参数，它必须是符合小驼峰命名的字符串，或者以<code>.</code>or<code>..</code>开头的相对路径，或者绝对路径。它可以没有文件后缀.js。</li></ul><p>代码示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    args = <span class="variable language_">arguments</span>,</span><br><span class="line">    l = args.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">while</span> (i &lt; l) &#123;</span><br><span class="line">    sum += args[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// program.js</span></span><br><span class="line"><span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">increment</span> = <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> math.<span class="title function_">add</span>(val, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>模块的意义在于将类聚的方法和变量等限定在私有的作用域中，同时支持引入和导出功能以顺畅地连接上下游依赖。</p><p><img src="/images/node/node_2_2.png" alt="image-node_2_2"></p><h4 id="2、Node-的模块实现"><a href="#2、Node-的模块实现" class="headerlink" title="2、Node 的模块实现"></a>2、Node 的模块实现</h4><p>在 Node 中引入模块，需要经历 3 个步骤：</p><ul><li>路径分析</li><li>文件定位</li><li>编译执行</li></ul><p>在 Node 中，模块分为两类，一类是 Node 提供的模块，成为核心模块，另一类是用户编写的模块，成为文件模块：</p><ul><li>核心模块部分在 Node 源代码的编译过程中，编译进了二进制执行文件。在 Node 进程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。</li><li>文件模块则是在运行时动态加载，需要完成的路径分析、文件定位、编译执行过程，速度比核心模块慢。</li></ul><h6 id="1）优先从缓存加载"><a href="#1）优先从缓存加载" class="headerlink" title="1）优先从缓存加载"></a>1）优先从缓存加载</h6><p>与前端浏览器会缓存静态脚本文件以提高性能一样，Node 对引入过的模块都会进行缓存，以减少二次引入时的开销。不同的地方在于，浏览器仅仅仅仅缓存文件，而 Node 缓存的是编译后执行后的对象。</p><h6 id="2）路径分析和文件定位"><a href="#2）路径分析和文件定位" class="headerlink" title="2）路径分析和文件定位"></a>2）路径分析和文件定位</h6><h6 id="i-模块标志符分析"><a href="#i-模块标志符分析" class="headerlink" title="i 模块标志符分析"></a>i 模块标志符分析</h6><p>require()方法接受一个标志符作为参数，在 Node 实现中，正是基于这个标志符进行模块查找的，它主要分为以下几类：</p><ul><li>核心模块，如 http、fs、path 等。</li><li>.或..开始的相对路径文件模块。</li><li>以&#x2F;开始的绝对路径文件模块。</li><li>非路径形式的文件模块，如自定义的 connect 模块。</li></ul><ol><li>核心模块<br>核心模块的优先级仅次于缓存加载，它在 Node 的源代码编译过程中已经编译为二进制代码，其加载速度更快。</li><li>路径形式的文件模块<br>以.、..和&#x2F;开始的标志符，这里都被当做文件模块来处理。在分析文件模块时，require()方法会将路径转为真实路径，并以真实路径为索引，将编译执行后的结果存放到缓存中，以使二次加载时最快。其加载速度慢于核心模块。</li><li>自定义模块<br>自定义模块是一种特殊的文件模块，可能是一个文件或者包的形式。这类模块查找最费时，也是所有方式中最慢的一种。</li></ol><blockquote><p>模块路径是 Node 在定位文件模块的具体文件时指定的查找策略，具体表现为一个路径组成的数组。</p></blockquote><p>模块路径的生成规则：</p><ul><li>当前文件目录下的 node_modules 目录。</li><li>父目录下的 node_modules 目录。</li><li>父目录的父目录下的 node_modules 目录。</li><li>沿路径向上逐级递归，知道根目录下的 node_modules 目录。</li></ul><p>可以看出，当前文件的路径越深，模块查找耗时会越多，只是自定义模块的加载速度是最慢的原因。</p><h6 id="ii-文件定位"><a href="#ii-文件定位" class="headerlink" title="ii 文件定位"></a>ii 文件定位</h6><p>从缓存加载的优化策略使得二次引入时不需要路径分析、文件定位和编译执行的过程，提高了再次加载模块时的效率。</p><p>文件定位过程中，还要注意文件扩展名的分析、目录和包的处理</p><ul><li>文件名扩展名分析<br>require()在分析标识符过程中，会出现标识符不包含文件扩展名的情况，这时会按.js、.json、.node 的次序补足扩展名，依次尝试。<br>因需要调用 fs 模块同步阻塞式地判断文件是否存在，且 Node 是单线程，所以会引起性能问题。所以如果是.node 和.json 文件，在传递给 require()的标志符中带上扩展名，会加快一点速度。</li><li>目录分析和包<br>require()通过分析文件扩展名之后，可能没有查找到对应文件，却得到一个目录，此时 Node 会将目录当做一个包来处理。<br>Node 对 CommonJS 包规范进行了一定程度的支持，首先，在当前目录中查找 package.json(CommonJS 包规范定义的包描述文件)，通过<code>JSON.parse()</code>解析出包描述对象，从中取出<code>main</code>属性指定的文件名进行定位。如果文件名缺少扩展名，将会进入扩展名分析的步骤。<br>如果<code>main</code>属性指定的文件名错误，或者压根没有 package.json 文件，则会将 index 当做默认文件名，然后依次查找 index.js、index.json、index.node。<br>如果在目录分析过程中没有定位成功任何文件，则自定义模块进入下一个模块路径进行查找，直至模块路径数据都遍历完毕，如果依然没有查找到目标文件，则会抛出查找失败的异常。</li></ul><h6 id="iii-模块编译"><a href="#iii-模块编译" class="headerlink" title="iii 模块编译"></a>iii 模块编译</h6><p>在 node 中，每个文件模块都是一个对象，它的定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Module</span>(<span class="params">id, parent</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">parent</span> = parent;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; parent.<span class="property">children</span>) &#123;</span><br><span class="line">    parent.<span class="property">children</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = <span class="literal">null</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">children</span> = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译和执行是引入文件模块的最后一个阶段。定位到具体的文件后，Node 会新建一个模块对象，然后根据路径载入并编译。不同的文件扩展名，载入方法也不同：</p><ul><li>.js 文件。通过 fs 模块同步读取文件后编译执行。</li><li>.node 文件。这是用 C&#x2F;C++编写的扩展文件，通过<code>dlopen()</code>方法加载最后编译生成的文件。</li><li>.json 文件。通过 fs 模块同步读取文件后，用<code>JSON.parse()</code>解析返回结果。</li><li>其余扩展名文件。它们都会被当做.js 文件载入。</li></ul><p>每一个编译成功的模块都会将其文件路径作为索引缓存在<code>Module._cache</code>对象上,以提高二次引入的性能。以读取.json 文件为例，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Module</span>.<span class="property">_extensions</span>[<span class="string">&quot;json&quot;</span>] = <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, filename</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> content = <span class="title class_">NativeModule</span>.<span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>).<span class="title function_">readFileSync</span>(filename, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title function_">stripBOM</span>(content));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    e.<span class="property">message</span> = filename + <span class="string">&quot;：&quot;</span> + e.<span class="property">message</span>;</span><br><span class="line">    <span class="keyword">throw</span> e;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `Module._extensions`会被赋值给require()的`extensions`属性。</span></span><br></pre></td></tr></table></figure><ol><li>JavaScript 模块的编译</li></ol><p>在 CommonJS 规范，每个模块文件中存在着 require、exports、module 这 3 个变量，但是它们在模块文件中并没有定义。甚至在 Node 的 API 文档中，每个模块中还有<strong>filename、</strong>dirname 这两个变量的存在。它们从何而来呢?<br>这是因为，在编译过程中，Node 对获取的 JavaScript 文件内容进行了头尾包装，在头部添加了<code>(function(exports,require,module,__filename,__dirname)&#123;\n</code>,在尾部添加了<code>\n&#125;);</code>。一个正常的 JavaScript 文件会被包装成如下的样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> math = <span class="built_in">require</span>(<span class="string">&quot;math&quot;</span>);</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">area</span> = <span class="keyword">function</span> (<span class="params">radius</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * radius * radius;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>包装后的代码会通过 vm 原生模块的<code>runInThisContext()</code>方法执行（类似<code>eval</code>，只是具有明确上下文，不污染全局），返回一个具体的 function 对象。最后，将当前模块对象的<code>exports</code>属性、<code>require()</code>方法、<code>module</code>(模块对象自身)，以及在文件定位中得到的完整文件路径和文件目录作为参数传递给这个 function()执行。<br>执行后。模块的<code>exports</code>属性被返回给了调用方。</p><ol start="2"><li>C&#x2F;C++模块的编译</li></ol><p>Node 调用<code>process.dlopen()</code>方法进行加载和执行。在 node 的架构下，<code>dlopen()</code>方法在 Windows 和*nix 平台下分别有不同的实现，通过<code>libuv</code>兼容层进行了封装。<br>.node 的模块文件并不需要编译，因为它是编写 C&#x2F;C++模块之后编译生成的，所以只有加载和执行的过程。在执行的过程中，模块的<code>exports</code>对象与.node 模块产生联系，然后返回给调用者。</p><ol start="3"><li>JSON 文件的编译</li></ol><p>.json 文件编译最简单，Node 利用 fs 模块同步读取 JSON 文件的内容之后，调用 JSON.parse()方法得到对象，然后将它赋给模块对象的 exports，以供外部调用。</p><h4 id="3、核心模块"><a href="#3、核心模块" class="headerlink" title="3、核心模块"></a>3、核心模块</h4><p>Node 的的核心模块在编译成可执行文件的过程中被编译进了二进制文件。核心模块分为 C&#x2F;C++编写的和 JavaScript 编写的两部分，其中 C&#x2F;C++文件存放在 Node 项目的 src 目录下，JavaScript 文件存放在 lib 目录下。</p><h6 id="i-JavaScript-核心模块的编译过程"><a href="#i-JavaScript-核心模块的编译过程" class="headerlink" title="i JavaScript 核心模块的编译过程"></a>i JavaScript 核心模块的编译过程</h6><p>在编译所有 C&#x2F;C++文件之前，编译程序需要将所有的 JavaScript 模块文件编译为 C&#x2F;C++代码。</p><ol><li>转存为 C&#x2F;C++代码</li></ol><p>Node 采用 V8 附带的 js2c.py 工具，将所有内置的 JavaScript 代码(src&#x2F;node.js 和 lib&#x2F;*.js)转换成 C++里的数组，生成 node_natives.h 头文件。<br>在这个过程中，JavaScript 代码以字符串的形式存储在 node 命名空间中，是不可直接执行的。在启动 Node 进程时，JavaScript 代码直接加载进内存中。在加载过程中，JavaScript 核心模块经历标志符分析后直接定位到内存中。</p><p>2.编译 JavaScript 核心模块</p><p>在引入 JavaScript 核心模块（lib 目录）的过程中，也经历的头尾包装的过程，然后才执行和导出了 exports 对象。与文件模块有区别的地方在于：获取源代码的方式（核心模块是从内存中加载的）以及缓存执行结果的位置。<br>JavaScript 核心模块的定义如下所示，源文件通过<code>process.binding(&#39;natives&#39;)</code>取出，编译成功的模块缓存到 NativeModule._cache 对象上，文件模块则缓存到 Module._cache 对象上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NativeModule</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filename</span> = id + <span class="string">&quot;.js&quot;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">loaded</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">NativeModule</span>.<span class="property">_sources</span> = process.<span class="title function_">binding</span>(<span class="string">&quot;natives&quot;</span>);</span><br><span class="line"><span class="title class_">NativeModule</span>.<span class="property">_cache</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure><h6 id="ii-C-x2F-C-核心模块的编译过程"><a href="#ii-C-x2F-C-核心模块的编译过程" class="headerlink" title="ii C&#x2F;C++核心模块的编译过程"></a>ii C&#x2F;C++核心模块的编译过程</h6><p>在核心模块中，有些模块全部是有 C&#x2F;C++编写，有些模块则由 C&#x2F;C++完成核心部分，其它部分由 JavaScript 实现包装或向外导出，以满足性能要求。通常来说，脚本语言的开发速度由于静态语言，但是其性能则弱于静态语言。而 Node 的这种复合模式可以在开发速度和性能之间找到平衡点。<br>由纯 C&#x2F;C++编写的部分统一成为内建模块，Node 的 buffer、crypto、evals、fs、os 等模块都是部分通过 C&#x2F;C++编写的。</p><ol><li>内建模块的组织形式</li></ol><p>内建模块的内部结构定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node_module_struct</span> &#123;</span><br><span class="line">  <span class="type">int</span> version;</span><br><span class="line">  <span class="type">void</span> *dso_handle;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *filename;</span><br><span class="line">  <span class="built_in">void</span>(*register_fun) (v8::Handle&lt;v8::Object&gt; target);</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *modname;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个内建模块在定义之后，都通过 NODE_MODULE 宏将模块定义到 node 命名空间中，模块的具体初始化方法挂载为结构的 register_func 成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NODE_MODULE(modname, regfunc) &#123;</span></span><br><span class="line">  <span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    NODE_MODULE_EXPORT node::node_module_struct modename ## _module = &#123;</span><br><span class="line">      NODE_STANDARD_MODULE_STUFF,</span><br><span class="line">      regfunc,</span><br><span class="line">      <span class="built_in">NODE_STRINGIFY</span>(modname);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>node_extensions.h 头文件将这些散列的内建模块统一放进了一个叫<code>node_module_list</code>的数组中。</p><p>这些内建模块的取出也十分简单。Node 提供了<code>get_builtin_module()</code>方法从<code>node_module_list</code>数组中取出这些模块。</p><p>内建模块的优势在于：它们由 C&#x2F;C++编写，性能上由于脚本语言；在进行文件编译时，它们被编译进二进制文件。一旦 Node 开始执行，它们被直接加载进内存中，无需再次做标志符定位、文件定位、编译等过程，直接就可执行。</p><p>2.内建模块的导出</p><p>在 Node 启动时，会生成一个全局变量 process，并提供<code>Binding()</code>方法来协助加载内建模块。<br>在加载内建模块时，先创建一个 exports 空对象，然后调用<code>get_builtin_module()</code>方法取出内建模块对象，通过执行<code>register_func()</code>填充 exports 对象，最后将 exports 对象按模块名缓存，并返回调用方完成导出。</p><h6 id="iii-核心模块的引入流程"><a href="#iii-核心模块的引入流程" class="headerlink" title="iii 核心模块的引入流程"></a>iii 核心模块的引入流程</h6><p>如下图所示，对于原生模块的引入流程可以看到，从 JavaScript 到 C&#x2F;C++的过程是相当复杂的，它要经历 C&#x2F;C++层面的内建模块的定义、(JavaScript)核心模块的定义和引入以及(JavaScript)文件模块层面的引入。但对于用户而言，require()十分简洁、友好。</p><p><img src="/images/node/node_2_4.png" alt="image-node_2_4"> <img src="/images/node/node_2_3.png" alt="image-node_2_3"></p><h4 id="4、C-x2F-C-扩展模块"><a href="#4、C-x2F-C-扩展模块" class="headerlink" title="4、C&#x2F;C++扩展模块"></a>4、C&#x2F;C++扩展模块</h4><p>C&#x2F;C++扩展模块属于文件模块中的一类，C&#x2F;C++模块通过预先编译为.node 文件，然后调用<code>process.dlopen()</code>方法加载执行。</p><p>Node 的原生模块一定程度上是可以跨平台的，扩展模块在不同平台上的编译和加载过程如下图所示：</p><p><img src="/images/node/node_2_5.png" alt="image-node_2_5"> <img src="/images/node/node_2_6.png" alt="image-node_2_6"> <img src="/images/node/node_2_7.png" alt="image-node_2_7"></p><h4 id="5、模块调用栈"><a href="#5、模块调用栈" class="headerlink" title="5、模块调用栈"></a>5、模块调用栈</h4><p>C&#x2F;C++内建模块属于最底层的模块，它属于核心模块，主要提供 API 给 JavaScript 核心模块和第三方 JavaScript 文件模块调用。<br>JavaScript 核心模块主要扮演的职责有两类：一类是作为 C&#x2F;C++内建模块的封装层和桥接层，供文件模块调用；一类是纯粹的功能模块，它不需要跟底层打交道，但又十分重要。<br>文件模块通常由第三方编写，包括普通 JavaScript 模块和 C&#x2F;C++扩展模块，主要调用方向为普通 JavaScript 模块调用扩展模块。</p><p><img src="/images/node/node_2_10.png" alt="image-node_2_10"></p><h4 id="6、包与-NPM"><a href="#6、包与-NPM" class="headerlink" title="6、包与 NPM"></a>6、包与 NPM</h4><p>Node 组织了自身的核心模块，也使得第三方文件模块可以有序地编写和使用，但在第三方模块中，模块与模块之间仍然是散列在各地的，互相之间不能引用。而包和 NPM 则是将模块联系起来的一种机制。</p><p>Node 对模块规范的实现，一定程度上解决了变量依赖、依赖关系等代码组织性问题。CommonJS 包规范的出现，则是在模块的基础上进一步组织 JavaScript 代码，如下图所示：</p><p><img src="/images/node/node_2_8.png" alt="image-node_2_8"></p><h6 id="i-包结构"><a href="#i-包结构" class="headerlink" title="i 包结构"></a>i 包结构</h6><p>完全符合 CommonJS 规范的包目录应该包含如下这些文件：</p><ul><li>package.json：包描述文件。</li><li>bin: 用于存放可执行二进制文件的目录。</li><li>lib：用于存放 JavaScript 代码的目录。</li><li>doc：用于存放文档的目录。</li><li>test：用于存放单元测试用例的代码。</li></ul><h6 id="ii-包描述文件与-NPM"><a href="#ii-包描述文件与-NPM" class="headerlink" title="ii 包描述文件与 NPM"></a>ii 包描述文件与 NPM</h6><p>包描述文件 package.json 是一个 JSON 格式的文件，位于包根目录下。NPM 的所有行为都与包描述文件的字段相关。</p><p>CommonJS 为 package.json 文件定义了如下必须字段：</p><ul><li>name。包名。</li><li>description。包简介。</li><li>version。版本号。</li><li>keywords。关键词数据，NPM 中主要用来做分类搜索。</li><li>maintainers。包维护者列表。</li><li>contributors。贡献者列表。</li><li>bugs。一个可以反馈 bug 的网页地址或邮件地址。</li><li>licenses。当前包所使用的许可证列表，表示这个包可以在哪些许可证下使用。</li><li>repositories。托管源代码的位置列表。</li><li>dependencies。使用当前包所需要依赖的包列表。NPM 会通过这个属性帮助自动加载依赖的包。</li></ul><p>可选字段：</p><ul><li>homepage。当前包的网站地址。</li><li>os。操作系统支持列表。</li><li>cpu。CPU 架构的支持列表。</li><li>engines。支持的 JavaScript 引擎列表。</li><li>builtin。标志当前包是否是内建在底层系统的标准组件。</li><li>directories。包目录说明。</li><li>implements。实现规范的列表。</li><li>scripts。脚本说明对象。主要被包管理器用来安装、编译、测试和卸载包。</li></ul><p>包规范的定义帮助 Node 解决依赖包安装的问题，NPM 工具后来被集成进了 Node 中作为默认包管理器，作为软件包的一部分一起安装。</p><p>NPM 实际需要的字段与包规范的区别在于多了 author、bin、main 和 devDependencies 这 4 个字段：</p><ul><li>author。作者。</li><li>bin。一些包作者希望包可以做为命令行工具使用。配置好 bin 字段后，通过 npm install package_name -g 命令可以将脚本添加到执行路径中，之后可以再命令行中直接执行。</li><li>main。模块引入方法 require()在引入包时，会优先检查这个字段，并将其作为包中其余模块的入口。</li><li>devDependencies。一些模块只在开发时需要依赖。</li></ul><h6 id="iii-NPM-常用功能"><a href="#iii-NPM-常用功能" class="headerlink" title="iii NPM 常用功能"></a>iii NPM 常用功能</h6><ol><li>查看帮助<br>直接执行<code>npm</code>可以看到帮助引导说明</li><li>安装依赖包<br>安装依赖包的执行语句<code>npm install express</code>，执行命令后，NPM 会在当前目录下创建 node_modules 目录，然后在 node_modules 目录下创建 express 目录，接着将包解压到这个目录下。</li></ol><ul><li>全局模式安装。<br>如果包中含有命令行工具，那么需要执行<code>npm install express -g</code>命令进行全局安装。<br>需要注意的是，全局模式并不是讲一个模块包安装为一个全局包的意思，它并不意味着可以从任何地方通过 require()来引用它。<code>-g</code>是将一个包安装为全局可用的可执行命令，它根据宝描述文件中的 bin 字段配置，将实际脚本链接到与 Node 可执行文件相同的路径下：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./bin/express&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>事实上，通过全局模式安装的所有模块包都被安装进了一个统一的目录下，这个目录可通过<code>path.resolve(process.execPath, &#39;..&#39;, &#39;..&#39;, &#39;lib&#39;, &#39;node_modules&#39;)；</code>推算出来，如果 Node 的可执行文件的位置是&#x2F;usr&#x2F;local&#x2F;bin&#x2F;node，那么模块目录就是&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules。最后通过软链接的方式将 bin 字段配置的可执行文件链接到 Node 的可执行目录下。</p><ul><li>从本地安装。<code>npm install &lt;一个包含package.json的存档文件|一个URL地址|一个目录下有package.json文件的目录位置&gt;</code></li><li>从非官方源安装。在执行命令时，添加<code>--registry=http://registry.url</code>即可。也可以执行<code>npm config set registry http://registy.url</code>命令指定默认源。</li></ul><ol start="3"><li>NPM 钩子命令</li></ol><p>C&#x2F;C++模块实际上是编译后才能使用的。package.json 中的 scripts 字段的提出技术让包在安装或卸载等过程中提供钩子机制，示例如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;preinstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preinstall.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;install&quot;</span><span class="punctuation">:</span> <span class="string">&quot;install.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;uninstall&quot;</span><span class="punctuation">:</span> <span class="string">&quot;uninstall.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>发布包</li></ol><ul><li>编写模块</li><li>初始化包描述文件。<code>npm init</code></li><li>注册包仓库账号。<code>npm adduser</code></li><li>上传包。根目录下可执行<code>npm publish .</code></li><li>安装包。<code>npm install &lt;package_name&gt;</code></li><li>管理包的权限。<code>npm owner ls &lt;package_name&gt;</code> <code>npm owner add &lt;package_name&gt;</code> <code>npm owner rm &lt;package_name&gt;</code></li></ul><ol start="5"><li>分析包</li></ol><p><code>npm ls</code></p><h6 id="iv-局域-NPM"><a href="#iv-局域-NPM" class="headerlink" title="iv 局域 NPM"></a>iv 局域 NPM</h6><p>NPM 自身是开源的，在企业内部应用中，如果考虑到模块保密性的问题，可以搭建局域 NPM 仓库。</p><p>混合使用官方仓库和局域仓库示意图：<br><img src="/images/node/node_2_9.png" alt="image-node_2_9"></p><h6 id="v-NPM-高质量包的基本要求"><a href="#v-NPM-高质量包的基本要求" class="headerlink" title="v NPM 高质量包的基本要求"></a>v NPM 高质量包的基本要求</h6><ul><li>具备良好的测试</li><li>具备良好的文档（README、API）</li><li>具备良好的测试覆盖率</li><li>具备良好的编码规范</li><li>…</li></ul><h4 id="7、前后端共用模块"><a href="#7、前后端共用模块" class="headerlink" title="7、前后端共用模块"></a>7、前后端共用模块</h4><p>JavaScript 在 Node 出现后，比别的编程语言多了一项优势，就是一些模块可以在前后端实现共用，因为很多 API 在各个宿主环境下都提供。</p><h6 id="i-模块的侧重点"><a href="#i-模块的侧重点" class="headerlink" title="i 模块的侧重点"></a>i 模块的侧重点</h6><p>前后端 JavaScript 分别搁置在 HTTP 的两端，浏览器端的 JavaScript 需要经历从同一个服务器端分发到多个客户端执行，需要通过网络加载代码，瓶颈在于带宽，而服务器端 JavaScript 则是相同的代码需要多次执行，从磁盘中加载，瓶颈在于 CPU 和内存资源。两者加载速度不再一个数量级上。</p><p>Node 的模块几乎全部是同步的，但它是合理的，但如果前端模块也采用同步的方式来引入，UI 在初始化过程中需要花费很多时间来等待脚本加载完成，在用户体验上会造成很大的问题。由此，CommonJS 为后端 JavaScript 制定的规范并不完全适合前端的应用场景。</p><p>最后，AMD 规范最后在前端应用场景中胜出，全称 Asynchronous Module Definition，即”异步模块定义“，除此，还有玉伯定义的 CMD 规范。</p><h6 id="ii-AMD-规范"><a href="#ii-AMD-规范" class="headerlink" title="ii AMD 规范"></a>ii AMD 规范</h6><p>AMD 规范是 CommonJS 模块规范的延伸，模块定义为：<code>define(id?, dependencies?, factory);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">exports</span> = &#123;&#125;;</span><br><span class="line">  <span class="built_in">exports</span>.<span class="property">sayHi</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Hi, Jason&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">exports</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="iii-CMD-规范"><a href="#iii-CMD-规范" class="headerlink" title="iii CMD 规范"></a>iii CMD 规范</h6><p>CMD 需要在声明模块的时候指定所有的依赖，通过形参传递依赖到模块内容中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>([<span class="string">&quot;dep1&quot;</span>, <span class="string">&quot;dep2&quot;</span>], <span class="keyword">function</span> (<span class="params">dep1, dep2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在依赖部分，CMD 支持动态引入，示例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span> (<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="variable language_">module</span></span>) &#123;</span><br><span class="line">  <span class="comment">// The module code goes here</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="iv-兼容多种模块规范"><a href="#iv-兼容多种模块规范" class="headerlink" title="iv 兼容多种模块规范"></a>iv 兼容多种模块规范</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">name, define</span>) &#123;</span><br><span class="line">  <span class="comment">// 检测上下文环境是否为AMD或CMD</span></span><br><span class="line">  <span class="keyword">var</span> hasDefine = <span class="keyword">typeof</span> define === <span class="string">&#x27;function&#x27;</span>,</span><br><span class="line">      <span class="comment">// 检查上下文环境是否为Node</span></span><br><span class="line">      hasExports = <span class="keyword">typeof</span> <span class="variable language_">module</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (hasDefine) &#123;</span><br><span class="line">    <span class="comment">// AMD环境或CMD环境</span></span><br><span class="line">    <span class="title function_">define</span>(definition);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (hasExports) &#123;</span><br><span class="line">    <span class="comment">// 定义为普通Node模块</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">definition</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 将模块的执行结果挂载window变量中，在浏览器中this指向window对象</span></span><br><span class="line">    <span class="variable language_">this</span>[name] = <span class="title function_">definition</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(<span class="string">&#x27;sayHi&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sayHi = <span class="keyword">function</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;Hi, world!&#x27;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> sayHi;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>node</tag>
      
      <tag>模块机制</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>h5 兼容问题和适配总结</title>
    <link href="/2022/04/12/h5%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E5%92%8C%E9%80%82%E9%85%8D%E6%80%BB%E7%BB%93/"/>
    <url>/2022/04/12/h5%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98%E5%92%8C%E9%80%82%E9%85%8D%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、input-的-disabled-属性"><a href="#一、input-的-disabled-属性" class="headerlink" title="一、input 的 disabled 属性"></a>一、input 的 disabled 属性</h2><p>如果给 input 添加 disabled 属性，IOS 会检测到 disabled 属性，给输入框的默认字体设置上灰色和透明度，导致在 IOS 端 placeholder 和输入的文本都呈现灰色，与安卓端表现不一致，安卓端没有这个问题。</p><p>我使用的是 Vant 中的 Field 输入框，首先尝试了一个方法，通过自定义样式去覆盖：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.van-field__control</span> &#123;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:disabled</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    -webkit-<span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    -webkit-text-fill-<span class="attribute">color</span>: <span class="number">#131212</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#131212</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">      -webkit-text-fill-<span class="attribute">color</span>: <span class="number">#b0b1b8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法还是没能解决这个兼容问题，随后我尝试去掉 disabled 属性，给 input 加上了 readonly 属性，可以解决这个问题。但使用 readonly 属性点击 input 的时候会出现光标&#96;。于是查询资料，尝试了以下方法:</p><span id="more"></span><h4 id="1、user-select-属性"><a href="#1、user-select-属性" class="headerlink" title="1、user-select 属性"></a>1、user-select 属性</h4><p>尝试了增加了<code>user-select</code>属性：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.van-field__control</span><span class="selector-pseudo">:read-only</span> &#123;</span><br><span class="line">  user-select: <span class="attribute">none;</span></span><br><span class="line"><span class="attribute">&#125;</span></span><br></pre></td></tr></table></figure><p>虽然不会出现光标了，但用户想要复制该表单内容就不行了，体验很差，放弃了这个方案。</p><h4 id="2、pointer-events-属性"><a href="#2、pointer-events-属性" class="headerlink" title="2、pointer-events 属性"></a>2、pointer-events 属性</h4><p>尝试了增加了<code>pointer-events</code>属性：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.van-field__control</span><span class="selector-pseudo">:read-only</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然也不会出现光标了，但绑定在只读表单元素的所有事件将无法生效，这个也是体验很差的。</p><h4 id="3、通过-js-控制"><a href="#3、通过-js-控制" class="headerlink" title="3、通过 js 控制"></a>3、通过 js 控制</h4><p>尝试让 input 聚焦的时候自动失焦：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;filed-wrapper&quot;&gt;</span><br><span class="line">    &lt;van-field :readonly=&quot;readonly&quot; @focus=&quot;focusChangeHandle&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default Vue.extend(&#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    focusChangeHandle(e: any): void &#123;</span><br><span class="line">      if (this.readonly) &#123;</span><br><span class="line">        this.$nextTick(() =&gt; &#123;</span><br><span class="line">          (e.target as any)?.blur();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样也可解决问题，但也有不好的地方，js 处理相对没有 css 好，而且可能会对该 input 的其它事件造成额外影响。</p><blockquote><p>综上，和自己的开发场景，还是觉得最后一种方案比较适合我。</p></blockquote><h2 id="二、聚焦-input-弹起软键盘的兼容"><a href="#二、聚焦-input-弹起软键盘的兼容" class="headerlink" title="二、聚焦 input 弹起软键盘的兼容"></a>二、聚焦 input 弹起软键盘的兼容</h2><p>在安卓上，输入框如果在页面居下的位置，当获取焦点的时候，软键盘弹起，会遮住输入框，导致不能实时看见输入的内容。</p><h4 id="1、IOS-和-Android-在软键盘弹起和收起的表现"><a href="#1、IOS-和-Android-在软键盘弹起和收起的表现" class="headerlink" title="1、IOS 和 Android 在软键盘弹起和收起的表现"></a>1、IOS 和 Android 在软键盘弹起和收起的表现</h4><ul><li>在 IOS 上<ul><li>输入框（input、textarea 或 富文本）获取焦点，键盘弹起，页面（webview）并没有被压缩，或者说高度（height）没有改变，只是页面（webview）整体往上滚了，且最大滚动高度（scrollTop）为软键盘高度。</li><li>触发软键盘上的“收起”按钮键盘或者输入框以外的页面区域时，输入框失去焦点，软键盘收起。</li></ul></li><li>在 Android 上<ul><li>输入框获取焦点，键盘弹起，但是页面（webview）高度会发生改变，一般来说，高度为可视区高度（原高度减去软键盘高度），除了因为页面内容被撑开可以产生滚动，webview 本身不能滚动。</li><li>触发输入框以外的区域时，输入框失去焦点，软键盘收起。但是，触发键盘上的收起按钮键盘时，输入框并不会失去焦点，同样软键盘收起。</li></ul></li></ul><h4 id="2、IOS-和-Android-监听软键盘弹起和收起"><a href="#2、IOS-和-Android-监听软键盘弹起和收起" class="headerlink" title="2、IOS 和 Android 监听软键盘弹起和收起"></a>2、IOS 和 Android 监听软键盘弹起和收起</h4><ul><li>在 IOS 上，监听输入框的 focus 事件来获知软键盘弹起，监听输入框的 blur 事件获知软键盘收起。</li><li>在 Android 上，监听 webview 高度会变化，高度变小获知软键盘弹起，否则软键盘收起。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;filed-wrapper&quot;&gt;</span><br><span class="line">    &lt;van-field</span><br><span class="line">      :readonly=&quot;readonly&quot;</span><br><span class="line">      @focus=&quot;focusChangeHandle&quot;</span><br><span class="line">      @blur=&quot;blurChangeHandle&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line">import &#123; getDeviceType &#125; from &quot;@/utils/helpers/function&quot;;</span><br><span class="line">const deviceTypeObj: any = getDeviceType();</span><br><span class="line"></span><br><span class="line">export default Vue.extend(&#123;</span><br><span class="line">  mounted(): void &#123;</span><br><span class="line">    if (deviceTypeObj.isAndroid) &#123;</span><br><span class="line">      // 监听android软键盘弹起 和 收起</span><br><span class="line">      let originHeight =</span><br><span class="line">        document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">      window.addEventListener(</span><br><span class="line">        &quot;resize&quot;,</span><br><span class="line">        function () &#123;</span><br><span class="line">          const resizeHeight =</span><br><span class="line">            document.documentElement.clientHeight || document.body.clientHeight;</span><br><span class="line">          if (originHeight &lt; resizeHeight) &#123;</span><br><span class="line">            console.log(&quot;Android 键盘收起啦！&quot;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            console.log(&quot;Android 键盘弹起啦！&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">          originHeight = resizeHeight;</span><br><span class="line">        &#125;,</span><br><span class="line">        false</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    focusChangeHandle(e: any): void &#123;</span><br><span class="line">      if (deviceTypeObj.isIOS) &#123;</span><br><span class="line">        // 监听ios软键盘弹起</span><br><span class="line">        console.log(&quot;IOS 键盘弹起啦！&quot;);</span><br><span class="line">        e.target.scrollIntoView(); // Android 键盘弹起后将焦点元素滚动（scrollIntoView()）到可视区</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    blurChangeHandle(e: any): void &#123;</span><br><span class="line">      if (deviceTypeObj.isIOS) &#123;</span><br><span class="line">        // 监听ios软键盘收起</span><br><span class="line">        console.log(&quot;IOS 键盘收起啦！&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3、总结"><a href="#3、总结" class="headerlink" title="3、总结"></a>3、总结</h4><p>综上，可知：</p><ul><li>在 IOS 上，会将 webview 整体往上滚一段距离，使得该获取焦点的输入框自动处于可视区，所以不用作处理</li><li>在 Android 则不会这样，它只会改变页面高度，而不会去滚动到当前焦点元素到可视区。所以，只需监听在 Android 键盘弹起后，将焦点元素通过（scrollIntoView()）方法滚动到可视区即可。</li></ul><h2 id="三、iphoneX-以上机型，头部刘海可能会遮挡页面头部的一些元素"><a href="#三、iphoneX-以上机型，头部刘海可能会遮挡页面头部的一些元素" class="headerlink" title="三、iphoneX 以上机型，头部刘海可能会遮挡页面头部的一些元素"></a>三、iphoneX 以上机型，头部刘海可能会遮挡页面头部的一些元素</h2><p>在 IOS 上，iphoneX 以上机型有头部刘海，这可能会对页面上部的部分可视区造成一些遮挡，导致体验不好。</p><p>解决思路是，先获取到设备的机型和头部 bar 高度，如果机型是 iphoneX 以上机型，则对页面根元素加上边距<code>padding-top</code>,值为头部状态 bar 的高度。因本项目是 vue 项目，样式基于 less，所以代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;page-wrapper&quot; :class=&quot;isIphoneX ? &#x27;isIphoneX&#x27; : &#x27;&#x27;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import Vue from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">export default Vue.extend(&#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 状态栏的高度</span><br><span class="line">    statusBarHeight() &#123;</span><br><span class="line">      const statusBarHeight = window.localStorage.getItem(StatusBarHeight);</span><br><span class="line">      return statusBarHeight ? `$&#123;statusBarHeight&#125;px` : &quot;&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 是否iphoneX以上机型</span><br><span class="line">    isIphoneX() &#123;</span><br><span class="line">      return window.localStorage.getItem(IsIPhoneX) === &quot;1&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted(): void &#123;</span><br><span class="line">    if (this.statusBarHeight)</span><br><span class="line">      document.body.style.setProperty(</span><br><span class="line">        &quot;--statusBarHeight&quot;,</span><br><span class="line">        this.statusBarHeight</span><br><span class="line">      );</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">.page-wrapper &#123;</span><br><span class="line">  &amp;.isIphoneX &#123;</span><br><span class="line">    padding-top: var(--statusBarHeight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>本项目是嵌入 app 中的 h5 页面，通过集成的 tower 插件进行通信，从而获取到的状态栏高度<code>statusBarHeight</code>和机型<code>isIphoneX</code>，查阅了资料，如自己写 js 也可以获取到对应值，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获得状态栏高度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getStatusBarHeight</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> immersed = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> ms = <span class="regexp">/Html5Plus\/.+\s\(.*(Immersed\/(\d+\.?\d*).*)\)/gi</span>.<span class="title function_">exec</span>(</span><br><span class="line">    navigator.<span class="property">userAgent</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (ms &amp;&amp; ms.<span class="property">length</span> &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">// 当前环境为沉浸式状态栏模式</span></span><br><span class="line">    immersed = <span class="built_in">parseFloat</span>(ms[<span class="number">2</span>]); <span class="comment">// 获取状态栏的高度</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> immersed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 机型iphoneX以上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isIphonex</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// X XS, XS Max, XR</span></span><br><span class="line">  <span class="keyword">const</span> xSeriesConfig = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">devicePixelRatio</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">375</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">812</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">devicePixelRatio</span>: <span class="number">3</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">414</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">896</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">devicePixelRatio</span>: <span class="number">2</span>,</span><br><span class="line">      <span class="attr">width</span>: <span class="number">414</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">896</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]; <span class="comment">// h5</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; <span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> isIOS = <span class="regexp">/iphone/gi</span>.<span class="title function_">test</span>(<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">userAgent</span>);</span><br><span class="line">    <span class="keyword">if</span> (!isIOS) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; devicePixelRatio, screen &#125; = <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; width, height &#125; = screen;</span><br><span class="line">    <span class="keyword">return</span> xSeriesConfig.<span class="title function_">some</span>(</span><br><span class="line">      <span class="function">(<span class="params">item</span>) =&gt;</span></span><br><span class="line">        item.<span class="property">devicePixelRatio</span> === devicePixelRatio &amp;&amp;</span><br><span class="line">        item.<span class="property">width</span> === width &amp;&amp;</span><br><span class="line">        item.<span class="property">height</span> === height</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当然，也可以通过插件<code>mobile-detect</code>去获取，可参考文档： <a href="https://github.com/hgoebl/mobile-detect.js/">https://github.com/hgoebl/mobile-detect.js/</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>移动端兼容</tag>
      
      <tag>适配</tag>
      
      <tag>项目中遇到的问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React State更新原理</title>
    <link href="/2021/09/05/React%20State%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86/"/>
    <url>/2021/09/05/React%20State%E6%9B%B4%E6%96%B0%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="1、React更新"><a href="#1、React更新" class="headerlink" title="1、React更新"></a>1、React更新</h4><p><img src="/images/react-update.png" alt="image-20210817172816414"></p><p>React更新分为两个阶段，render阶段和commit阶段。如上图所示。</p><span id="more"></span><ul><li><p>render阶段实际上是在内存中构建一棵新的fiber树（称为workInProgress树），构建过程是依照现有fiber树（current树）从root开始深度优先遍历再回溯到root的过程。</p><ul><li>在深度遍历过程中，”从上往下”的遍历阶段可称为beginWork阶段，主要是对组件的状态计算、diff的操作以及render函数的执行。</li><li>“从下往上”的遍历阶段可称为completeWork阶段，主要是对effect链表的收集、被跳过的优先级的收集。</li></ul></li><li><p>commit阶段不可中断，主要是去依据workInProgress树中有变化的那些节点（render阶段的completeWork过程收集到的effect链表）,去完成DOM操作，将更新应用到页面上，除此之外，还会异步调度useEffect以及同步执行useLayoutEffect。</p><ul><li><p>before mutation阶段，读取组件变更前的状态，针对类组件，调用getSnapshotBeforeUpdate，让我们可以在DOM变更前获取组件实例的信息；针对函数组件，异步调度useEffect。</p></li><li><p>mutation阶段，针对HostComponent，进行相应的DOM操作；针对类组件，调用componentWillUnmount；针对函数组件，执行useLayoutEffect的销毁函数。</p></li><li><p>layout阶段，在DOM操作完成后，读取组件的状态，针对类组件，调用生命周期componentDidMount和componentDidUpdate，调用setState的回调；针对函数组件填充useEffect 的 effect执行数组， 并调度useEffect。</p></li></ul></li></ul><p>本文章的State更新原理涉及到的就是React更新机制中render阶段的beginWork阶段中的状态计算。</p><h4 id="2、本质"><a href="#2、本质" class="headerlink" title="2、本质"></a>2、本质</h4><p>一旦用户的交互产生了更新，那么就会产生一个update对象去承载新的状态。多个update会连接成一个环状链表：updateQueue，挂载fiber上， 然后在该fiber的beginWork阶段会循环该updateQueue，依次处理其中的update，这是处理更新的大致过程。</p><h4 id="3、举例"><a href="#3、举例" class="headerlink" title="3、举例"></a>3、举例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">val</span>: <span class="number">6</span>&#125;);</span><br></pre></td></tr></table></figure><p>setState实际上会调用<code>enqueueSetState</code>，生成一个update对象，并调用<code>enqueueUpdate</code>将它放入updateQueue。对应源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-reconciler/src/ReactFiberClassComponent.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> classComponentUpdater = &#123;</span><br><span class="line">  <span class="title function_">enqueueSetState</span>(<span class="params">inst, payload, callback</span>) &#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">// 依据事件优先级创建update的优先级</span></span><br><span class="line">   <span class="keyword">const</span> lane = <span class="title function_">requestUpdateLane</span>(fiber, suspenseConfig);</span><br><span class="line">   <span class="keyword">const</span> update = <span class="title function_">createUpdate</span>(eventTime, lane, suspenseConfig);</span><br><span class="line">   update.<span class="property">payload</span> = payload;</span><br><span class="line">   <span class="title function_">enqueueUpdate</span>(fiber, update);</span><br><span class="line">   <span class="comment">// 开始调度</span></span><br><span class="line">   <span class="title function_">scheduleUpdateOnFiber</span>(fiber, lane, eventTime);</span><br><span class="line">     ... </span><br><span class="line"> &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如下示例，假设B节点产生了更新，那么B节点的updateQueue最终会是是如下的形态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">      A </span><br><span class="line">     /</span><br><span class="line">    /</span><br><span class="line">   B ----- updateQueue.<span class="property">shared</span>.<span class="property">pending</span> = update————</span><br><span class="line">  /                                       ^       |</span><br><span class="line"> /                                        |_______|</span><br><span class="line">C -----&gt; D</span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>updateQueue.shared.pending中可能存储着很多的update。</p><h4 id="4、update和updateQueue"><a href="#4、update和updateQueue" class="headerlink" title="4、update和updateQueue"></a>4、update和updateQueue</h4><h6 id="1）它们的结构"><a href="#1）它们的结构" class="headerlink" title="1）它们的结构"></a>1）它们的结构</h6><p>update结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-reconciler/src/ReactUpdateQueue.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">update</span>: <span class="title class_">Update</span>&lt;*&gt; = &#123;</span><br><span class="line"> eventTime,<span class="comment">// update的产生时间，若该update一直因为优先级不够而得不到执行，那么它会超时，会被立刻执行</span></span><br><span class="line"> lane,<span class="comment">// update的优先级，即更新优先级</span></span><br><span class="line"> suspenseConfig,<span class="comment">// 任务挂起相关</span></span><br><span class="line"> <span class="attr">tag</span>: <span class="title class_">UpdateState</span>, <span class="comment">// 表示更新是哪种类型（UpdateState，ReplaceState，ForceUpdate，CaptureUpdate）</span></span><br><span class="line"> <span class="attr">payload</span>: <span class="literal">null</span>, <span class="comment">// 更新所携带的状态</span></span><br><span class="line">  <span class="comment">// 有两种可能，对象（&#123;&#125;），和函数（(prevState, nextProps):newState =&gt; &#123;&#125;）</span></span><br><span class="line"> <span class="attr">callback</span>: <span class="literal">null</span>,<span class="comment">// setState的回调</span></span><br><span class="line"> <span class="attr">next</span>: <span class="literal">null</span>, <span class="comment">// 指向下一个update的指针</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>updateQueue的结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-reconciler/src/ReactUpdateQueue.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">queue</span>: <span class="title class_">UpdateQueue</span>&lt;<span class="title class_">State</span>&gt; = &#123;</span><br><span class="line"> <span class="attr">baseState</span>: fiber.<span class="property">memoizedState</span>, <span class="comment">// 前一次更新计算得出的状态，它是第一个被跳过的update之前的那些update计算得出的state。会以它为基础计算本次的state</span></span><br><span class="line"> <span class="attr">firstBaseUpdate</span>: <span class="literal">null</span>,<span class="comment">// 前一次更新时updateQueue中第一个被跳过的update对象</span></span><br><span class="line"> <span class="attr">lastBaseUpdate</span>: <span class="literal">null</span>, <span class="comment">// 前一次更新中，updateQueue中以第一个被跳过的update为起点一直到的最后一个update截取的队列中的最后一个update</span></span><br><span class="line"> <span class="attr">shared</span>: &#123;</span><br><span class="line"> <span class="attr">pending</span>: <span class="literal">null</span>, <span class="comment">// 存储着本次更新的update队列，是实际的updateQueue。shared的意思是current节点与workInProgress节点共享一条更新队列</span></span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="attr">effects</span>: <span class="literal">null</span>, <span class="comment">// 数组。保存update.callback !== null的Update</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="2-update对象"><a href="#2-update对象" class="headerlink" title="2) update对象"></a>2) update对象</h6><p>要产生多个update对象，多次调用setState即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">this.setState(&#123;val: 2&#125;);</span><br><span class="line">this.setState(&#123;val: 6&#125;);</span><br></pre></td></tr></table></figure><p>产生的updateQueue结构如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update1 ---&gt; update2</span><br><span class="line">^         |</span><br><span class="line">|_______________|</span><br></pre></td></tr></table></figure><p>它是个单向的环状链表</p><h6 id="3）updateQueue的环状链表结构"><a href="#3）updateQueue的环状链表结构" class="headerlink" title="3）updateQueue的环状链表结构"></a>3）updateQueue的环状链表结构</h6><p>updateQueue结构环状是因为方便定位到链表的第一个元素。updateQueue指向它的最后一个update，updateQueue.next指向它的第一个update。</p><p>若不使用环状链表，updateQueue指向最后一个元素，需要遍历才能获取链表首部。即使将updateQueue指向第一个元素，那么新增update时仍然要遍历到尾部才能将新增的接入链表。而环状链表，只需记住尾部，无需遍历操作就可以找到首部。</p><p>实现代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-reconciler/src/ReactUpdateQueue.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> enqueueUpdate&lt;<span class="title class_">State</span>&gt;(<span class="attr">fiber</span>: <span class="title class_">Fiber</span>, <span class="attr">update</span>: <span class="title class_">Update</span>&lt;<span class="title class_">State</span>&gt;) &#123;</span><br><span class="line">   <span class="keyword">const</span> updateQueue = fiber.<span class="property">updateQueue</span>;</span><br><span class="line">   <span class="keyword">if</span> (updateQueue === <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">const</span> <span class="attr">sharedQueue</span>: <span class="title class_">SharedQueue</span>&lt;<span class="title class_">State</span>&gt; = (<span class="attr">updateQueue</span>: any).<span class="property">shared</span>; </span><br><span class="line">   <span class="keyword">const</span> pending = sharedQueue.<span class="property">pending</span>; <span class="comment">// ppending是真正的updateQueue，存储update</span></span><br><span class="line">   <span class="keyword">if</span> (pending === <span class="literal">null</span>) &#123; <span class="comment">// 若链表中没有元素，则创建单向环状链表，next指向它自己</span></span><br><span class="line">     update.<span class="property">next</span> = update;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 有元素，现有队列（pending）指向的是链表的尾部update，</span></span><br><span class="line">     <span class="comment">// pending.next就是头部update，新update会放到现有队列的最后</span></span><br><span class="line">     <span class="comment">// 并首尾相连</span></span><br><span class="line">     <span class="comment">// 将新队列的尾部（新插入的update）的next指向队列的首部，实现</span></span><br><span class="line">     <span class="comment">// 首位相连</span></span><br><span class="line">     update.<span class="property">next</span> = pending.<span class="property">next</span>; <span class="comment">// 现有队列的最后一个元素的next指向新来的update，实现把新update</span></span><br><span class="line">     <span class="comment">// 接到现有队列上</span></span><br><span class="line">     pending.<span class="property">next</span> = update;</span><br><span class="line">   &#125; <span class="comment">// 现有队列的指针总是指向最后一个update，可以通过最后一个寻找出整条链表</span></span><br><span class="line">   sharedQueue.<span class="property">pending</span> = update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4-示例"><a href="#4-示例" class="headerlink" title="4) 示例"></a>4) 示例</h6><p>例如下的updateQueue：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">A1</span> -&gt; <span class="variable constant_">B1</span> -&gt; <span class="variable constant_">C2</span> -&gt; <span class="variable constant_">D1</span> - <span class="variable constant_">E2</span></span><br></pre></td></tr></table></figure><p><em>字母表示update携带的状态，数字表示update携带的优先级。Lanes模型中，可理解为数越小，优先级越高，所以 1 &gt; 2</em></p><p>第一次以1的渲染优先级处理队列，遇到C2时，它的优先级不为1，跳过。那么直到这次处理完updateQueue时，此时的baseUpdate链表为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">C2</span> -&gt; <span class="variable constant_">D1</span> - <span class="variable constant_">E2</span></span><br></pre></td></tr></table></figure><p><strong>本次更新完成后，firstBaseUpdate 为 <code>C2</code>，lastBaseUpdate 为 <code>E2</code>，baseState为<code>ABD</code>。</strong></p><p>用firstBaseUpdate 和 lastBaseUpdate记录下被跳过的update到最后一个update的所有update，用baseState记录下被跳过的update之前那些update所计算出的状态。这样做的目的是保证最终updateQueue中所有优先级的update全部处理完时候的结果与预期结果保持一致。也就是说，尽管<code>A1 -&gt; B1 -&gt; C2 -&gt; D1 - E2</code>这个链表在第一次以优先级为1去计算的结果为ABD（因为优先级为2的都被跳过了），但最终的结果一定是ABCDE。</p><h4 id="5、更新的处理机制"><a href="#5、更新的处理机制" class="headerlink" title="5、更新的处理机制"></a>5、更新的处理机制</h4><p>分为三个阶段：准备阶段、处理阶段、完成阶段。前两个阶段主要是处理updateQueue，最后一个阶段来将新计算的state赋值到fiber上。</p><h6 id="1）准备阶段"><a href="#1）准备阶段" class="headerlink" title="1）准备阶段"></a>1）准备阶段</h6><p>整理updateQueue。由于优先级的原因，会使得低优先级更新被跳过等待下次执行，这个过程中，又有可能产生新的update。所以当处理某次更新的时候，有可能会有两条update队列：<strong>上次遗留的和本次新增的</strong>。<strong>上次遗留的</strong>就是从firstBaseUpdate 到 lastBaseUpdate 之间的所有update；<strong>本次新增的</strong>就是新产生的那些的update。</p><p>准备阶段阶段主要是将两条队列合并起来，并且合并之后的队列不再是环状的，目的方便从头到尾遍历处理。另外，由于以上的操作都是处理的workInProgress节点的updateQueue，所以还需要在current节点也操作一遍，保持同步，目的在渲染被高优先级的任务打断后，再次以current节点为原型新建workInProgress节点时，不会丢失之前尚未处理的update。</p><h6 id="2）处理阶段"><a href="#2）处理阶段" class="headerlink" title="2）处理阶段"></a>2）处理阶段</h6><p>优先级不足的情况：</p><ul><li><p>将被跳过的update放到firstBaseUpdate 和 lastBaseUpdate组成的链表中，（就是baseUpdate），等待下次处理低优先级更新的时候再处理。</p></li><li><p>记录baseState，此时的baseState为该低优先级update之前所有已被处理的更新的结果，并且只在第一次跳过时记录，因为低优先级任务重做时，要从第一个被跳过的更新开始处理。</p><p>场景示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">第一次更新的baseState 是空字符串，更新队列如下，字母表示state，数字表示优先级。优先级是<span class="number">1</span> &gt; <span class="number">2</span>的</span><br><span class="line"></span><br><span class="line"> <span class="variable constant_">A1</span> - <span class="variable constant_">B1</span> - <span class="variable constant_">C2</span> - <span class="variable constant_">D1</span> - <span class="variable constant_">E2</span></span><br><span class="line"> </span><br><span class="line"> 第一次的渲染优先级（renderLanes）为 <span class="number">1</span>，<span class="title class_">Updates</span>是本次会被处理的队列:</span><br><span class="line"> <span class="title class_">Base</span> <span class="attr">state</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line"> <span class="title class_">Updates</span>: [<span class="variable constant_">A1</span>, <span class="variable constant_">B1</span>, <span class="variable constant_">D1</span>]      &lt;- 第一个被跳过的update为<span class="variable constant_">C2</span>，此时的baseUpdate队列为[<span class="variable constant_">C2</span>, <span class="variable constant_">D1</span>, <span class="variable constant_">E2</span>]，</span><br><span class="line">                               它之前所有被处理的update的结果是<span class="variable constant_">AB</span>。此时记录下baseState = <span class="string">&#x27;AB&#x27;</span></span><br><span class="line">                               注意！再次跳过低优先级的<span class="title function_">update</span>(<span class="variable constant_">E2</span>)时，则不会记录baseState</span><br><span class="line">                               </span><br><span class="line"> <span class="title class_">Result</span> <span class="attr">state</span>: <span class="string">&#x27;ABD&#x27;</span></span><br><span class="line"> --------------------------------------------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 第二次的渲染优先级（renderLanes）为 <span class="number">2</span>，<span class="title class_">Updates</span>是本次会被处理的队列:</span><br><span class="line"> <span class="title class_">Base</span> <span class="attr">state</span>: <span class="string">&#x27;AB&#x27;</span>           &lt;- 再次发起调度时，取出上次更新遗留的baseUpdate队列，基于baseState</span><br><span class="line">                               计算结果。</span><br><span class="line">                               </span><br><span class="line"> <span class="title class_">Updates</span>: [<span class="variable constant_">C2</span>, <span class="variable constant_">D1</span>, <span class="variable constant_">E2</span>] </span><br><span class="line"></span><br><span class="line"> <span class="title class_">Result</span> <span class="attr">state</span>: <span class="string">&#x27;ABCDE&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>将被跳过的update的优先级记录下来，更新过程即将结束后放到workInProgress.lanes中，这点是调度得以再次发起，进而重做低优先级任务的关键。</p></li></ul><p>优先级足够的情况:</p><ul><li><p>判断若baseUpdate队列不为空（之前有被跳过的update），则将现在这个update放入baseUpdate队列。</p></li><li><p>处理更新，计算新状态。 将优先级足够的update放入baseUpdate这一点可以和上边低优先级update入队baseUpdate结合起来看。这实际上意味着一旦有update被跳过，就以它为起点，将后边直到最后的update无论优先级如何都截取下来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">A1</span> - <span class="variable constant_">B2</span> - <span class="variable constant_">C1</span> - <span class="variable constant_">D2</span></span><br><span class="line"><span class="variable constant_">B2</span>被跳过，baseUpdate队列为</span><br><span class="line"><span class="variable constant_">B2</span> - <span class="variable constant_">C1</span> - <span class="variable constant_">D2</span></span><br></pre></td></tr></table></figure><p>这样做是为了保证最终全部更新完成的结果和用户行为触发的那些更新全部完成的预期结果保持一致。比如，A1和C1虽然在第一次被优先执行，展现的结果为AC，但这只是为了及时响应用户交互产生的临时结果，实际上C1的结果需要依赖B2计算结果，当第二次render时，依据B2的前序update的处理结果（baseState为A）开始处理B2 - C1 - D2队列，最终的结果是ABCD。</p></li></ul><p>场景示例：</p><p>变化过程为 0 -&gt; 2 -&gt; 3，生命周期将state设置为1(任务A2)，点击事件将state + 2(任务A1)，正常情况下A2正常调度，但是未render完成，此时A1插队，更新队列A2 - A1，为了优先响应高优先级的更新，跳过A2先计算A1，数字由0变为2，baseUpdate为A2 - A1，baseState为0。然后再重做低优先级任务。处理baseUpdate A2 - A1，以baseState（0）为基础进行计算，最后结果是3。</p><h6 id="3）完成阶段"><a href="#3）完成阶段" class="headerlink" title="3）完成阶段"></a>3）完成阶段</h6><ul><li>赋值updateQueue.baseState。若此次render没有更新被跳过，那么赋值为新计算的state，否则赋值为第一个被跳过的更新之前的update。</li><li>赋值updateQueue 的 firstBaseUpdate 和 lastBaseUpdate，也就是如果本次有更新被跳过，则将被截取的队列赋值给updateQueue的baseUpdate链表。</li><li>更新workInProgress节点的lanes。更新策略为如果没有优先级被跳过，则意味着本次将update都处理完了，lanes清空。否则将低优先级update的优先级放入lanes。之前说过， 此处是再发起一次调度重做低优先级任务的关键。</li><li>更新workInProgress节点上的memoizedState。</li></ul><h4 id="6、总结"><a href="#6、总结" class="headerlink" title="6、总结"></a>6、总结</h4><p>整个processUpdateQueue函数要实现的目的是处理更新，但要保证更新按照优先级被处理的同时，不乱阵脚，这是因为它遵循一套固定的规则：优先级被跳过后，记住此时的状态和此优先级之后的更新队列，并将队列备份到current节点，这对于update对象按次序、完整地被处理至关重要，也保证了最终呈现的处理结果和用户的行为触发的交互的结果保持一致。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>State更新原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React合成事件机制</title>
    <link href="/2021/09/05/React%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/09/05/React%E5%90%88%E6%88%90%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="1、React事件机制是怎样的"><a href="#1、React事件机制是怎样的" class="headerlink" title="1、React事件机制是怎样的"></a>1、React事件机制是怎样的</h4><p>React提供了一种<strong>顶层注册，事件收集，统一触发</strong>的事件机制：</p><ul><li>顶层注册 — 在root元素上绑定一个统一的事件处理函数</li><li>事件收集 — 在事件触发时，构造合成事件对象，按照冒泡或捕获的路径去组件中收集真正的事件处理函数</li><li>统一触发 — 对所收集的事件逐一执行，并共享同一个合成事件对象</li></ul><span id="more"></span><p>背景（为什么绑定到root上）：由于fiber机制的特点，生成一个fiber节点时，它对应的dom节点有可能还未挂载，onClick这样的事件处理函数作为fiber节点的prop，也就不能直接被绑定到真实的DOM节点上。</p><p>（关于<code>Fiber Tree</code>的文章：<a href="https://zhuanlan.zhihu.com/p/92832843%EF%BC%89">https://zhuanlan.zhihu.com/p/92832843）</a></p><p>特性（目的）:</p><ul><li><p>对事件进行归类，可以在事件产生的任务上包含不同的优先级</p></li><li><p>提供合成事件对象，抹平浏览器的兼容性差异</p></li></ul><h4 id="2、事件注册"><a href="#2、事件注册" class="headerlink" title="2、事件注册"></a>2、事件注册</h4><p>示例如下所示，为div绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;/*do something*/&#125;&#125;&gt;React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>div节点最终要对应一个fiber节点，onClick则作为它的prop。当这个fiber节点进入render阶段的complete阶段时，名称为onClick的prop会被识别为事件进行处理。对应源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/client/ReactDOMComponent.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setInitialDOMProperties</span>(<span class="params"></span></span><br><span class="line"><span class="params">  tag: string,</span></span><br><span class="line"><span class="params">  domElement: Element,</span></span><br><span class="line"><span class="params">  rootContainerElement: Element | Document,</span></span><br><span class="line"><span class="params">  nextProps: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="params">  isCustomComponentTag: boolean,</span></span><br><span class="line"><span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> propKey <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nextProps.<span class="title function_">hasOwnProperty</span>(propKey)) &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (registrationNameDependencies.<span class="title function_">hasOwnProperty</span>(propKey)) &#123;</span><br><span class="line">        <span class="comment">// 如果propKey属于事件类型，则进行事件绑定</span></span><br><span class="line">        <span class="title function_">ensureListeningTo</span>(rootContainerElement, propKey, domElement);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定过程：</p><ul><li>绑定哪些事件。<ul><li>根据React的事件名称寻找该事件依赖，例如onMouseEnter事件依赖了mouseout和mouseover两个原生事件，onClick只依赖了click一个原生事件，最终会循环这些依赖，在root上绑定对应的事件。例如组件中为onClick，那么就会在root上绑定一个click事件监听。</li></ul></li><li>如何区别冒泡和捕获。<ul><li>依据组件中写的事件名识别其属于哪个阶段的事件（冒泡或捕获），例如<code>onClickCapture</code>这样的React事件名称就代表是需要事件在捕获阶段触发，而<code>onClick</code>代表事件需要在冒泡阶段触发。</li></ul></li><li>绑定事件。<ul><li>根据React事件名，找出对应的原生事件名，例如<code>click</code>，并根据上一步来判断是否需要在捕获阶段触发，调用<code>addEventListener</code>，将事件绑定到root元素上。</li></ul></li><li>更新事件。<ul><li>若事件需要更新，那么先移除事件监听，再重新绑定，绑定过程重复以上三步。</li></ul></li></ul><p>对应源码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/client/ReactDOMComponent.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据事件名称，创建不同优先级的事件监听器。listener最终被绑定到root元素上</span></span><br><span class="line"> <span class="keyword">let</span> listener = <span class="title function_">createEventListenerWrapperWithPriority</span>(</span><br><span class="line">   targetContainer,</span><br><span class="line">   domEventName,</span><br><span class="line">   eventSystemFlags,</span><br><span class="line">   listenerPriority,</span><br><span class="line"> );</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 绑定事件</span></span><br><span class="line"> <span class="keyword">if</span> (isCapturePhaseListener) &#123;</span><br><span class="line">   ...</span><br><span class="line">   unsubscribeListener = <span class="title function_">addEventCaptureListener</span>(</span><br><span class="line">     targetContainer,</span><br><span class="line">     domEventName,</span><br><span class="line">     listener,</span><br><span class="line">   );</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   ...</span><br><span class="line">   unsubscribeListener = <span class="title function_">addEventBubbleListener</span>(</span><br><span class="line">     targetContainer,</span><br><span class="line">     domEventName,</span><br><span class="line">     listener,</span><br><span class="line">   );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><code>createEventListenerWrapperWithPriority</code>会依据优先级创建一个事件监听包装器。</p><p>事件监听包装器有三种：</p><ul><li>dispatchDiscreteEvent: 处理离散事件。比如点击、鼠标移入移出事件</li><li>dispatchUserBlockingUpdate：处理用户阻塞事件。比如滚动事件</li><li>dispatchEvent：处理连续事件。比如video播放器监听是否可以播放、监听播放的进度等事件</li></ul><p>这些包装器是真正绑定到root上的事件监听器listener，它们持有各自的优先级，当对应的事件触发时，调用的其实是这个包含优先级的事件监听。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/ReactDOMEventListener.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以处理离散事件为例 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchDiscreteEvent</span>(<span class="params"></span></span><br><span class="line"><span class="params">  domEventName,</span></span><br><span class="line"><span class="params">  eventSystemFlags,</span></span><br><span class="line"><span class="params">  container,</span></span><br><span class="line"><span class="params">  nativeEvent,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="title function_">discreteUpdates</span>(</span><br><span class="line">    dispatchEvent,</span><br><span class="line">    domEventName,</span><br><span class="line">    eventSystemFlags, <span class="comment">// 传入事件执行阶段的标志</span></span><br><span class="line">    container,</span><br><span class="line">    nativeEvent,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绑定到root上的事件监听不是我们在组件里写的事件处理函数，而是一个持有事件优先级，并能传递事件执行阶段标志的监听器。</p><h4 id="3、事件触发"><a href="#3、事件触发" class="headerlink" title="3、事件触发"></a>3、事件触发</h4><p>listener负责以不同的优先级权重来触发真正的事件流程，并传递事件执行阶段标志（eventSystemFlags）。它按照事件的<strong>优先级</strong>去安排接下来的工作：<strong>事件对象的合成</strong>、<strong>将事件处理函数收集到执行路径</strong>、 <strong>事件执行</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/ReactDOMEventListener.js */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 以处理用户阻塞事件为例 */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchUserBlockingUpdate</span>(<span class="params"></span></span><br><span class="line"><span class="params">  domEventName,</span></span><br><span class="line"><span class="params">  eventSystemFlags,</span></span><br><span class="line"><span class="params">  container,</span></span><br><span class="line"><span class="params">  nativeEvent,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">runWithPriority</span>(</span><br><span class="line">      <span class="title class_">UserBlockingPriority</span>, <span class="comment">// 将优先级记录到scheduler中，所以调度器才能在调度的时候知道当前任务的优先级</span></span><br><span class="line">      dispatchEvent.<span class="title function_">bind</span>( <span class="comment">// 负责 事件对象的合成、将事件处理函数收集到执行路径、事件执行</span></span><br><span class="line">        <span class="literal">null</span>,</span><br><span class="line">        domEventName,</span><br><span class="line">        eventSystemFlags,</span><br><span class="line">        container,</span><br><span class="line">        nativeEvent,</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>root上的事件监听最终触发的是<code>dispatchEventsForPlugins</code>，对应源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/DOMModernPluginEventSystem.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dispatchEventsForPlugins</span>(<span class="params"></span></span><br><span class="line"><span class="params">  domEventName: DOMEventName,</span></span><br><span class="line"><span class="params">  eventSystemFlags: EventSystemFlags,</span></span><br><span class="line"><span class="params">  nativeEvent: AnyNativeEvent,</span></span><br><span class="line"><span class="params">  targetInst: <span class="literal">null</span> | Fiber,</span></span><br><span class="line"><span class="params">  targetContainer: EventTarget,</span></span><br><span class="line"><span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> nativeEventTarget = <span class="title function_">getEventTarget</span>(nativeEvent);</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">dispatchQueue</span>: <span class="title class_">DispatchQueue</span> = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 事件对象的合成，收集事件到执行路径上</span></span><br><span class="line">  <span class="title function_">extractEvents</span>(</span><br><span class="line">    dispatchQueue, <span class="comment">//承载了本次合成的事件对象和收集到事件执行路径上的事件处理函数</span></span><br><span class="line">    domEventName,</span><br><span class="line">    targetInst,</span><br><span class="line">    nativeEvent,</span><br><span class="line">    nativeEventTarget,</span><br><span class="line">    eventSystemFlags,</span><br><span class="line">    targetContainer,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 执行收集到的组件中真正的事件</span></span><br><span class="line">  <span class="title function_">processDispatchQueue</span>(dispatchQueue, eventSystemFlags);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>合成事件对象<ul><li>经过React合成的<code>SyntheticEvent</code>对象。它解决了不同浏览器之间的兼容性差异。抽象成统一的事件对象，解除开发者的心智负担。</li></ul></li></ul><h6 id=""><a href="#" class="headerlink" title=""></a><img src="/images/share9.2_1.jpeg" alt="事件对象的包装和收集事件到执行路径（冒泡的路径为例）"></h6><ul><li><p>收集事件到执行路径</p><ul><li>从触发事件的元素开始，依据fiber树的层级结构向上查找，累加上级元素中所有<strong>相同类型</strong>的事件，最终形成一个具有所有相同类型事件的数组，这个数组就是事件执行路径。通过这个路径，React自己模拟了一套事件捕获与冒泡的机制。</li></ul></li></ul><p>因为不同的事件会有不同的行为和处理机制，所以合成事件对象的构造和收集事件到执行路径需要通过插件实现。一共有5种Plugin：<strong>SimpleEventPlugin，EnterLeaveEventPlugin，ChangeEventPlugin，SelectEventPlugin，BeforeInputEventPlugin</strong>。</p><p>以SimpleEventPlugin代码为例，对应源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/plugins/SimpleEventPlugin.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extractEvents</span>(<span class="params"></span></span><br><span class="line"><span class="params">  dispatchQueue: DispatchQueue,</span></span><br><span class="line"><span class="params">  domEventName: DOMEventName,</span></span><br><span class="line"><span class="params">  targetInst: <span class="literal">null</span> | Fiber,</span></span><br><span class="line"><span class="params">  nativeEvent: AnyNativeEvent,</span></span><br><span class="line"><span class="params">  nativeEventTarget: <span class="literal">null</span> | EventTarget,</span></span><br><span class="line"><span class="params">  eventSystemFlags: EventSystemFlags,</span></span><br><span class="line"><span class="params">  targetContainer: EventTarget,</span></span><br><span class="line"><span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> reactName = topLevelEventsToReactNames.<span class="title function_">get</span>(domEventName);</span><br><span class="line">  <span class="keyword">if</span> (reactName === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">EventInterface</span>;</span><br><span class="line">  <span class="keyword">switch</span> (domEventName) &#123;</span><br><span class="line">    <span class="comment">// 赋值EventInterface（接口）</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造合成事件对象</span></span><br><span class="line">  <span class="keyword">const</span> event = <span class="keyword">new</span> <span class="title class_">SyntheticEvent</span>(</span><br><span class="line">    reactName,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    nativeEvent,</span><br><span class="line">    nativeEventTarget,</span><br><span class="line">    <span class="title class_">EventInterface</span>,</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> inCapturePhase = (eventSystemFlags &amp; <span class="variable constant_">IS_CAPTURE_PHASE</span>) !== <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/*...*/</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// scroll事件不冒泡</span></span><br><span class="line">    <span class="keyword">const</span> accumulateTargetOnly =</span><br><span class="line">      !inCapturePhase &amp;&amp;</span><br><span class="line">      domEventName === <span class="string">&#x27;scroll&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 事件对象分发 &amp; 收集事件</span></span><br><span class="line">    <span class="title function_">accumulateSinglePhaseListeners</span>(</span><br><span class="line">      targetInst,</span><br><span class="line">      dispatchQueue,</span><br><span class="line">      event,</span><br><span class="line">      inCapturePhase,</span><br><span class="line">      accumulateTargetOnly,</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> event;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收集的过程由<code>accumulateSinglePhaseListeners</code>完成。需要在fiber树中从触发事件的源fiber节点开始，向上一直找到root，形成一条完整的冒泡或者捕获的路径。同时，沿途路过fiber节点时，根据事件名，从props中获取我们真正写在组件中的事件处理函数，push到路径中，等待下一步的批量执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/plugins/SimpleEventPlugin.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">accumulateSinglePhaseListeners</span>(<span class="params"></span></span><br><span class="line"><span class="params">  targetFiber: Fiber | <span class="literal">null</span>,</span></span><br><span class="line"><span class="params">  dispatchQueue: DispatchQueue,</span></span><br><span class="line"><span class="params">  event: ReactSyntheticEvent,</span></span><br><span class="line"><span class="params">  inCapturePhase: boolean,</span></span><br><span class="line"><span class="params">  accumulateTargetOnly: boolean,</span></span><br><span class="line"><span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据事件名来识别是冒泡阶段的事件还是捕获阶段的事件</span></span><br><span class="line">  <span class="keyword">const</span> bubbled = event.<span class="property">_reactName</span>;</span><br><span class="line">  <span class="keyword">const</span> captured = bubbled !== <span class="literal">null</span> ? bubbled + <span class="string">&#x27;Capture&#x27;</span> : <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 声明存放事件监听的数组</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">listeners</span>: <span class="title class_">Array</span>&lt;<span class="title class_">DispatchListener</span>&gt; = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 找到目标元素</span></span><br><span class="line">  <span class="keyword">let</span> instance = targetFiber;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 从目标元素开始一直到root，累加所有的fiber对象和事件监听。</span></span><br><span class="line">  <span class="keyword">while</span> (instance !== <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;stateNode, tag&#125; = instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tag === <span class="title class_">HostComponent</span> &amp;&amp; stateNode !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> currentTarget = stateNode;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 事件捕获</span></span><br><span class="line">      <span class="keyword">if</span> (captured !== <span class="literal">null</span> &amp;&amp; inCapturePhase) &#123;</span><br><span class="line">        <span class="comment">// 从fiber中获取事件处理函数</span></span><br><span class="line">        <span class="keyword">const</span> captureListener = <span class="title function_">getListener</span>(instance, captured);</span><br><span class="line">        <span class="keyword">if</span> (captureListener != <span class="literal">null</span>) &#123;</span><br><span class="line">          listeners.<span class="title function_">push</span>(</span><br><span class="line">            <span class="title function_">createDispatchListener</span>(instance, captureListener, currentTarget),</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 事件冒泡</span></span><br><span class="line">      <span class="keyword">if</span> (bubbled !== <span class="literal">null</span> &amp;&amp; !inCapturePhase) &#123;</span><br><span class="line">        <span class="comment">// 从fiber中获取事件处理函数</span></span><br><span class="line">        <span class="keyword">const</span> bubbleListener = <span class="title function_">getListener</span>(instance, bubbled);</span><br><span class="line">        <span class="keyword">if</span> (bubbleListener != <span class="literal">null</span>) &#123;</span><br><span class="line">          listeners.<span class="title function_">push</span>(</span><br><span class="line">            <span class="title function_">createDispatchListener</span>(instance, bubbleListener, currentTarget),</span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    instance = instance.<span class="property">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 收集事件对象</span></span><br><span class="line">  <span class="keyword">if</span> (listeners.<span class="property">length</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">    dispatchQueue.<span class="title function_">push</span>(<span class="title function_">createDispatchEntry</span>(event, listeners));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论事件是在冒泡阶段执行，还是捕获阶段执行，都以同样的顺序push到dispatchQueue的listeners中，而冒泡或者捕获事件的执行顺序不同是由于清空listeners数组的顺序不同。</p><p><code>dispatchQueue</code>结构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">event</span>: <span class="title class_">SyntheticEvent</span>,</span><br><span class="line">    <span class="attr">listeners</span>: [ listener1, listener2, ... ]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>event就代表着合成事件对象，可以将它认为是这些listeners共享的一个事件对象。当清空listeners数组执行到每一个事件监听函数时，这个事件监听可以改变event上的currentTarget，也可以调用它上面的stopPropagation方法来阻止冒泡。event作为一个共享资源被这些事件监听消费，消费的行为发生在事件执行时。</p><h4 id="4、事件执行"><a href="#4、事件执行" class="headerlink" title="4、事件执行"></a>4、事件执行</h4><p>从dispatchQueue中提取出事件对象和事件执行路径的过程，对应源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/DOMPluginEventSystem.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">processDispatchQueue</span>(<span class="params"></span></span><br><span class="line"><span class="params">  dispatchQueue: DispatchQueue,</span></span><br><span class="line"><span class="params">  eventSystemFlags: EventSystemFlags,</span></span><br><span class="line"><span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> inCapturePhase = (eventSystemFlags &amp; <span class="variable constant_">IS_CAPTURE_PHASE</span>) !== <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dispatchQueue.<span class="property">length</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从dispatchQueue中取出事件对象和事件监听数组</span></span><br><span class="line">    <span class="keyword">const</span> &#123;event, listeners&#125; = dispatchQueue[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将事件监听交由processDispatchQueueItemsInOrder去触发，同时传入事件对象供事件监听使用</span></span><br><span class="line">    <span class="title function_">processDispatchQueueItemsInOrder</span>(event, listeners, inCapturePhase);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 捕获错误</span></span><br><span class="line">  <span class="title function_">rethrowCaughtError</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行listeners数组的时候，冒泡阶段从左往右循环，捕获阶段从右往左循环:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* react-dom/events/DOMPluginEventSystem.js */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processDispatchQueueItemsInOrder</span>(<span class="params"></span></span><br><span class="line"><span class="params">  event: ReactSyntheticEvent,</span></span><br><span class="line"><span class="params">  dispatchListeners: <span class="built_in">Array</span>&lt;DispatchListener&gt;,</span></span><br><span class="line"><span class="params">  inCapturePhase: boolean,</span></span><br><span class="line"><span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> previousInstance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (inCapturePhase) &#123; <span class="comment">// 根据inCapturePhase判断事件执行的阶段</span></span><br><span class="line">    <span class="comment">// 事件捕获倒序循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = dispatchListeners.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;instance, currentTarget, listener&#125; = dispatchListeners[i];</span><br><span class="line">      <span class="keyword">if</span> (instance !== previousInstance &amp;&amp; event.<span class="title function_">isPropagationStopped</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 执行事件，传入event对象，和currentTarget</span></span><br><span class="line">      <span class="title function_">executeDispatch</span>(event, listener, currentTarget);</span><br><span class="line">      previousInstance = instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 事件冒泡正序循环</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dispatchListeners.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;instance, currentTarget, listener&#125; = dispatchListeners[i];</span><br><span class="line">      <span class="comment">// 如果事件对象阻止了冒泡，则return掉循环过程</span></span><br><span class="line">      <span class="keyword">if</span> (instance !== previousInstance &amp;&amp; event.<span class="title function_">isPropagationStopped</span>()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">executeDispatch</span>(event, listener, currentTarget);</span><br><span class="line">      previousInstance = instance;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">EventDemo</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">  parentRef = <span class="literal">null</span>;</span><br><span class="line">  childRef = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parentRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">childRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parentRef</span>.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原生事件：父级元素的点击事件被触发了--冒泡阶段&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parentRef</span>.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原生事件：父级元素的点击事件被触发了--捕获阶段&quot;</span>);</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">childRef</span>.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原生事件：子级元素的点击事件被触发了--冒泡阶段&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">childRef</span>.<span class="property">current</span>?.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原生事件：子级元素的点击事件被触发了--捕获阶段&quot;</span>);</span><br><span class="line">    &#125;, <span class="literal">true</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原生事件：document DOM 事件监听！&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onParentClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;React事件：父级元素的点击事件被触发了--冒泡阶段&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  onParentClickCapture = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;React事件：父级元素的点击事件被触发了--捕获阶段&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  onSubCounterClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;React事件：子级元素的点击事件被触发了--冒泡阶段&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  onSubCounterClickCapture = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;React事件：子级元素的点击事件被触发了--捕获阶段&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">&#123;this.parentRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">counter-parent</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClick</span>=<span class="string">&#123;this.onParentClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">onClickCapture</span>=<span class="string">&#123;this.onParentClickCapture&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">      父组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;this.childRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;</span>&#x27;<span class="attr">sub-counter</span>&#x27;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;this.onSubCounterClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClickCapture</span>=<span class="string">&#123;this.onSubCounterClickCapture&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">        子组件</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在源码中打印出所收集到的执行路径listeners，点击子组件，控制台输入结果如下：</p><p><img src="/images/image-20210907151823844.png" alt="image-20210907151823844"></p><p>由此可知：</p><ul><li>执行顺序为：  原生事件document绑定事件（捕获阶段）—&gt; React事件（捕获阶段）—&gt;  原生事件（捕获阶段）—&gt;  原生事件（冒泡阶段）—&gt;   React事件（冒泡阶段）—&gt;  原生事件document绑定事件（冒泡阶段）<ul><li>即：先捕获阶段（原生事件document绑定事件 —&gt;  React事件  —&gt; 原生事件），再冒泡阶段（ 原生事件 —&gt;  React事件  —&gt; 原生事件document绑定事件）</li></ul></li><li>执行路径listeners输出两次，说明了第一次在捕获阶段按从右到左顺序执行了一次，第二次在冒泡阶段才能够左到右执行了一次。</li><li>listeners存在自己的属性currentTarget，当执行listeners数组到每一个事件监听函数时，这个事件监听可以改变合成事件event上的currentTarget属性，也可以调用event上面的stopPropagation方法来阻止冒泡。</li></ul><p>至此，在组件中的事件处理函数就被执行掉了，合成事件对象在这个过程中充当了一个公共角色，每个事件执行时，都会检查合成事件对象，有没有调用阻止冒泡的方法，另外会将当前挂载事件监听的元素作为currentTarget挂载到事件对象上，最终传入事件处理函数，我们得以获取到这个事件对象。</p><h4 id="4、总结"><a href="#4、总结" class="headerlink" title="4、总结"></a>4、总结</h4><p>事件机制的原理：由于fiber树的特点，一个组件如果含有事件的prop，那么将会在对应fiber节点的commit阶段绑定一个事件监听到root上，这个事件监听是持有优先级的，这将它和优先级机制联系了起来，可以把合成事件机制当作一个协调者，负责去协调<strong>合成事件对象、收集事件、触发真正的事件处理函数</strong>这三个过程。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React合成事件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React基础及应用</title>
    <link href="/2021/09/04/React%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <url>/2021/09/04/React%E5%9F%BA%E7%A1%80%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="一、基础核心"><a href="#一、基础核心" class="headerlink" title="一、基础核心"></a>一、基础核心</h2><h4 id="1、生命周期"><a href="#1、生命周期" class="headerlink" title="1、生命周期"></a>1、生命周期</h4><p><img src="/images/image-20210817172816414.png" alt="image-20210817172816414"></p><p>由上图可知，在挂载阶段（当组件实例被创建并插入 DOM 中时），生命周期调用顺序如下：</p><ul><li>constructor()</li><li>static getDerivedStateFromProps()</li><li>render()</li><li>componentDidMount()</li></ul><span id="more"></span><p>在更新阶段（当组件的 props 或 state 发生变化时会触发更新），生命周期调用顺序如下：</p><ul><li>static getDerivedStateFromProps()</li><li>shouldComponentUpdate()</li><li>render()</li><li>getSnapshotBeforeUpdate()</li><li>componentDidUpdate()</li></ul><p>在卸载阶段（当组件从 DOM 中移除时）会调用如下方法：</p><ul><li>componentWillUnmount()</li></ul><h6 id="1）constructor"><a href="#1）constructor" class="headerlink" title="1）constructor()"></a>1）constructor()</h6><p>在 React 组件挂载之前，会调用构造函数。</p><h6 id="2）static-getDerivedStateFromProps-props-state"><a href="#2）static-getDerivedStateFromProps-props-state" class="headerlink" title="2）static getDerivedStateFromProps(props, state)"></a>2）static getDerivedStateFromProps(props, state)</h6><p><code>getDerivedStateFromProps</code> 会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。</p><p>它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。</p><h6 id="3）shouldComponentUpdate（）"><a href="#3）shouldComponentUpdate（）" class="headerlink" title="3）shouldComponentUpdate（）"></a>3）shouldComponentUpdate（）</h6><p>根据 <code>shouldComponentUpdate()</code> 的返回值，判断 React 组件的输出是否受当前 state 或 props 更改的影响。默认行为是 state 每次发生变化组件都会重新渲染，如返回<code>false</code>，则不会调用<code>render()</code>  <code>componentDidUpdate()</code>。</p><h6 id="4）render"><a href="#4）render" class="headerlink" title="4）render()"></a>4）render()</h6><p><code>render</code> 被调用时会检查 <code>this.props</code> 和 <code>this.state</code> 的变化并返回以下类型之一：</p><ul><li>React 元素</li><li>数组或 fragments</li><li>Portals</li><li>字符串或数值类型</li><li>布尔类型或 <code>null</code></li></ul><h6 id="5）componentDidMount"><a href="#5）componentDidMount" class="headerlink" title="5）componentDidMount()"></a>5）componentDidMount()</h6><p><code>componentDidMount()</code> 会在组件挂载后（插入 DOM 树中）立即调用。是实例化网络请求的好地方。</p><h6 id="6）getSnapshotBeforeUpdate-prevProps-prevState"><a href="#6）getSnapshotBeforeUpdate-prevProps-prevState" class="headerlink" title="6）getSnapshotBeforeUpdate(prevProps, prevState)"></a>6）getSnapshotBeforeUpdate(prevProps, prevState)</h6><p><code>getSnapshotBeforeUpdate()</code> 在最近一次渲染输出（提交到 DOM 节点）之前调用。</p><p>它使得组件能在发生更改之前从 DOM 中捕获一些信息（例如，滚动位置）。此生命周期的任何返回值将作为参数传递给 <code>componentDidUpdate()</code>。</p><h6 id="7）componentDidUpdate-prevProps-prevState-snapshot"><a href="#7）componentDidUpdate-prevProps-prevState-snapshot" class="headerlink" title="7）componentDidUpdate(prevProps, prevState, snapshot)"></a>7）componentDidUpdate(prevProps, prevState, snapshot)</h6><p><code>componentDidUpdate()</code> 会在更新后会被立即调用。首次渲染不会执行此方法。</p><p><code>snapshot</code>是<code>getSnapshotBeforeUpdate()</code>生命周期的返回值。</p><h6 id="8）componentWillUnmount"><a href="#8）componentWillUnmount" class="headerlink" title="8）componentWillUnmount()"></a>8）componentWillUnmount()</h6><p><code>componentWillUnmount()</code> 会在组件卸载及销毁之前直接调用。</p><p>在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 <code>componentDidMount()</code> 中创建的订阅等。</p><h4 id="2、JSX"><a href="#2、JSX" class="headerlink" title="2、JSX"></a>2、JSX</h4><blockquote><p>JSX，是一个 JavaScript 的语法扩展，可以很好地描述 UI 应该呈现出它应有交互的本质形式。</p></blockquote><p>Babel 会把 JSX 转译成一个名为 <code>React.createElement()</code> 函数调用。以下两种示例代码完全等效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;greeting&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    Hello, world!</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="title class_">React</span>.<span class="title function_">createElement</span>(</span><br><span class="line">  <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  &#123;<span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>&#125;,</span><br><span class="line">  <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>React.createElement()</code>最终创建了一个这样的对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：这是简化过的结构</span></span><br><span class="line"><span class="keyword">const</span> element = &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;greeting&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: <span class="string">&#x27;Hello, world!&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3、ReactDOM"><a href="#3、ReactDOM" class="headerlink" title="3、ReactDOM"></a>3、ReactDOM</h4><p><code>react-dom</code> 的 package 提供了可在应用顶层使用的 DOM（DOM-specific）方法。</p><h6 id="1）render"><a href="#1）render" class="headerlink" title="1）render()"></a>1）render()</h6><p>ReactDOM.render(element, container[, callback])</p><p>在提供的 <code>container</code> 里渲染一个 React 元素，并返回对该组件的引用。</p><h6 id="2-hydrate"><a href="#2-hydrate" class="headerlink" title="2)  hydrate()"></a>2)  hydrate()</h6><p>ReactDOM.hydrate(element, container[, callback])</p><p>与 <code>render()</code>相同，但它用于在 <code>ReactDOMServer</code> 渲染的容器中对 HTML 的内容进行 hydrate 操作。React 会尝试在已有标记上绑定事件监听器。</p><h6 id="3-、unmountComponentAtNode（）"><a href="#3-、unmountComponentAtNode（）" class="headerlink" title="3)、unmountComponentAtNode（）"></a>3)、unmountComponentAtNode（）</h6><p>ReactDOM.unmountComponentAtNode(container)</p><p>从 DOM 中卸载组件，会将其事件处理器（event handlers）和 state 一并清除。如果组件被移除将会返回 <code>true</code>，如果没有组件可被移除将会返回 <code>false</code>。</p><h6 id="4-findDOMNode"><a href="#4-findDOMNode" class="headerlink" title="4) findDOMNode()"></a>4) findDOMNode()</h6><p>ReactDOM.findDOMNode(component)</p><p>如果组件已经被挂载到 DOM 上，此方法会返回浏览器中相应的原生 DOM 元素。<strong>大多数情况下，你可以绑定一个 ref 到 DOM 节点上，可以完全避免使用 findDOMNode。</strong></p><h6 id="5-createPortal"><a href="#5-createPortal" class="headerlink" title="5) createPortal()"></a>5) createPortal()</h6><p>ReactDOM.createPortal(child, container)</p><p>创建 portal。Portal 将提供一种将子节点渲染到 DOM 节点中的方式，该节点存在于 DOM 组件的层次结构之外。</p><p>portal 可以被放置在 DOM 树中的任何地方，但在任何其他方面，其行为和普通的 React 子节点行为一致。由于 portal 仍存在于 <em>React 树</em>， 且与 <em>DOM 树</em> 中的位置无关，那么无论其子节点是否是 portal，像 context 这样的功能特性都是不变的。</p><h4 id="4、列表和key"><a href="#4、列表和key" class="headerlink" title="4、列表和key"></a>4、列表和key</h4><h6 id="1）列表渲染"><a href="#1）列表渲染" class="headerlink" title="1）列表渲染"></a>1）列表渲染</h6><p>可通过<code>map()</code>方法来遍历 <code>numbers</code> 数组。将数组中的每个元素变成 <code>&lt;li&gt;</code> 标签，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">NumberList</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> numbers = props.<span class="property">numbers</span>;</span><br><span class="line">  <span class="keyword">const</span> listItems = numbers.<span class="title function_">map</span>(<span class="function">(<span class="params">number</span>) =&gt;</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;number.toString()&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;number&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>&#123;listItems&#125;<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">NumberList</span> <span class="attr">numbers</span>=<span class="string">&#123;numbers&#125;</span> /&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2）key"><a href="#2）key" class="headerlink" title="2）key"></a>2）key</h6><p>key 帮助 React 识别哪些元素改变了，比如被添加或删除。因此你应当给数组中的每一个元素赋予一个确定的标识。</p><p>一个元素的 key 最好是这个元素在列表中拥有的一个独一无二的字符串。通常，我们使用数据中的 id 来作为元素的 key。</p><p>如果同时满足如下条件可考虑使用索引 index 作为 key：</p><ul><li>列表和项目是静态的——它们不是计算出来的，也不会改变</li><li>列表中的项目没有 id</li><li>该列表<em>永远不会</em>重新排序或过滤</li></ul><h6 id="3）diff算法"><a href="#3）diff算法" class="headerlink" title="3）diff算法"></a>3）diff算法</h6><p>Vue diff:</p><p>patch</p><ul><li>如果是同一节点，执行patchVnode进行子节点比较<ul><li>patchVnode<ul><li>如果两个节点不一样，直接用新节点替换老节点</li><li>如果两个节点一样<ul><li>新老节点一样，直接返回</li><li>老节点有子节点，新节点没有：删除老节点的子节点</li><li>老节点没有子节点，新节点有子节点：新节点的子节点直接append到老节点</li><li>都只有文本节点：直接用新节点的文本节点替换老的文本节点</li><li>都有子节点：updateChildren<ul><li>updateChildren<ul><li>提取出新老节点的子节点：新节点子节点ch和老节点子节点oldCh</li><li>ch和oldCh分别设置StartIdx（指向头）和EndIdx（指向尾）变量，它们两两比较（按照sameNode方法），有四种方式来比较。<ul><li>如果是oldS和E匹配上了，那么真实dom中的第一个节点会移到最后</li><li>如果是oldE和S匹配上了，那么真实dom中的最后一个节点会移到最前，匹配上的两个指针向中间移动</li><li>如果4种方式都没有匹配成功，如果设置了key就通过key进行比较<ul><li>如果新旧子节点都存在key，那么会根据<code>oldChild</code>的key生成一张hash表，用<code>S</code>的key与hash表做匹配，匹配成功就判断<code>S</code>和匹配节点是否为<code>sameNode</code>，如果是，就在真实dom中将成功的节点移到最前面，否则，将<code>S</code>生成对应的节点插入到dom中对应的<code>oldS</code>位置，<code>S</code>指针向中间移动，被匹配old中的节点置为null。</li><li>如果没有key,则直接将<code>S</code>生成新的节点插入<code>真实DOM</code>（ps：这下可以解释为什么需要设置key了，如果没有key那么就只会做四种匹配，就算指针中间有可复用的节点都不能被复用了）</li></ul></li><li>在比较过程种startIdx++，endIdx–，一旦StartIdx &gt; EndIdx表明ch或者oldCh至少有一个已经遍历完成，此时就会结束比较</li><li>在这些子节点sameVnode后如果满足条件继续执行patchVnode，层层递归，直到oldVnode和Vnode中所有子节点都比对完成</li></ul></li></ul></li></ul></li></ul></li></ul></li></ul></li><li>如果不是同一节点，新节点直接替换老节点</li></ul><p>React diff:</p><ul><li><p>React更新阶段会对ReactElement类型判断而进行不同的操作；ReactElement类型包含三种即：文本、Dom、组件；</p></li><li><p>每个类型的元素更新处理方式：</p><ul><li><p>text节点的更新很简单，直接更新文案。</p></li><li><p>组件的更新，主要是更新render出的节点，不同组件直接替换，相同组件则继续比较（shouldUpdateReactComponent）。</p></li><li><p>dom元素的更新，分为两块：</p><ul><li>更新属性，对比出前后属性的不同，局部更新。并且处理特殊属性，比如事件绑定</li><li>子节点的更新，子节点更新主要是找出差异对象，找差异对象的时候也会使用上面的shouldUpdateReactComponent来判断，如果是可以直接更新的就会递归调用子节点的更新,这样也会递归查找差异对象。不用更新，则可能删除之前的对象或添加新的对象。之后根据差异对象操作dom元素（位置变动，删除，添加等）。</li></ul></li></ul></li></ul><p>vue和react的diff算法，都是忽略跨级比较，只做同级比较。vue diff时调动patch函数，参数是vnode和oldVnode，分别代表新旧节点</p><ul><li>vue比对节点，当节点元素类型相同，但是className不同，认为是不同类型元素，删除重建，而react会认为是同类型节点，只是修改节点属性</li><li>vue的列表比对，采用从两端到中间的比对方式，而react则采用从左到右依次比对的方式。当一个集合，只是把最后一个节点移动到了第一个，react会把前面的节点依次移动，而vue只会把最后一个节点移动到第一个。总体上，vue的对比方式更高效。</li></ul><p>参考链接：<a href="https://juejin.cn/post/6844903607913938951">diff算法</a></p><h4 id="5、实例属性（Props和State）、class属性（defaultProps）、组件的API"><a href="#5、实例属性（Props和State）、class属性（defaultProps）、组件的API" class="headerlink" title="5、实例属性（Props和State）、class属性（defaultProps）、组件的API"></a>5、实例属性（Props和State）、class属性（defaultProps）、组件的API</h4><h6 id="1）Props"><a href="#1）Props" class="headerlink" title="1）Props"></a>1）Props</h6><blockquote><p><code>this.props</code> 包括被该组件调用者定义的 props。</p></blockquote><ul><li><p>所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。</p></li><li><p>组件可以接受任意 props，包括基本数据类型，React 元素以及函数。</p></li></ul><h6 id="2）-State"><a href="#2）-State" class="headerlink" title="2） State"></a>2） State</h6><blockquote><p>组件中的 state 包含了随时可能发生变化的数据。state 由用户自定义，它是一个普通 JavaScript 对象。</p></blockquote><h6 id="i、特点："><a href="#i、特点：" class="headerlink" title="i、特点："></a>i、特点：</h6><ul><li>State 的更新可能是异步的。</li><li>State 的更新会被合并。如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入对象，会被合并（类似 Object.assign ）。执行结果只一次 +1</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">  <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>任何的 state 总是所属于特定的组件，而且从该 state 派生的任何数据或 UI 只能影响树中“低于”它们的组件。可以理解叫做为<code>自上而下的数据流</code>  或 <code>单向的数据流</code>。</li></ul><h6 id="ii、状态提升"><a href="#ii、状态提升" class="headerlink" title="ii、状态提升"></a>ii、状态提升</h6><blockquote><p>如果多个组件同时需要一个”数据源“来维护，那么可以将<code>state</code>提升至这些组件的最近共同父组件中。这样依靠<code>自上而下的数据流</code>来维护同一个<code>state</code>。</p></blockquote><p>提升 state 方式对排查和隔离 bug 所需的工作量将会变少。</p><h6 id="3）defaultProps"><a href="#3）defaultProps" class="headerlink" title="3）defaultProps"></a>3）defaultProps</h6><p><code>defaultProps</code> 可以为 Class 组件添加默认 props，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CustomButton</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="4）setState"><a href="#4）setState" class="headerlink" title="4）setState()"></a>4）setState()</h6><p><code>setState()</code> 将对组件 state 的更改排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。</p><p><code>setState()</code>异步更新组件，可使用<code>componentDidUpdate</code>或<code>setState</code>的回调函数进行读取修改后的数据。</p><h6 id="5）forceUpdate"><a href="#5）forceUpdate" class="headerlink" title="5）forceUpdate()"></a>5）forceUpdate()</h6><p><code>forceUpdate()</code> 可强制让组件重新渲染。</p><h4 id="6、事件"><a href="#6、事件" class="headerlink" title="6、事件"></a>6、事件</h4><h6 id="1）Class-组件中绑定事件"><a href="#1）Class-组件中绑定事件" class="headerlink" title="1）Class 组件中绑定事件"></a>1）Class 组件中绑定事件</h6><p>class中的方法默认不会绑定<code>this</code>，而JSX解析后会改变的事件回调函数的 <code> this</code>指向 ，所以绑定事件的回调函数必须绑定<code>this</code>。</p><h6 id="i、在构造函数中绑定this"><a href="#i、在构造函数中绑定this" class="headerlink" title="i、在构造函数中绑定this"></a>i、在构造函数中绑定this</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Toggle</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isToggleOn</span>: <span class="literal">true</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为了在回调中使用 `this`，这个绑定是必不可少的</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function"><span class="params">state</span> =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">isToggleOn</span>: !state.<span class="property">isToggleOn</span></span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.isToggleOn ? &#x27;ON&#x27; : &#x27;OFF&#x27;&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ii、使用Public-class-fields语法绑定回调函数"><a href="#ii、使用Public-class-fields语法绑定回调函数" class="headerlink" title="ii、使用Public class fields语法绑定回调函数"></a>ii、使用<code>Public class fields</code>语法绑定回调函数</h6><p><code>Public class fields</code>包括公有静态字段、公有实例字段、公有静态方法、公有实例方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class="line">  <span class="comment">// 注意: 这是 *实验性* 语法。</span></span><br><span class="line">  handleClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="iii、在回调中使用箭头函数"><a href="#iii、在回调中使用箭头函数" class="headerlink" title="iii、在回调中使用箭头函数"></a>iii、在回调中使用箭头函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LoggingButton</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is:&#x27;</span>, <span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 此语法确保 `handleClick` 内的 `this` 已被绑定。</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.handleClick()&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        Click me</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2）合成事件SyntheticEvent"><a href="#2）合成事件SyntheticEvent" class="headerlink" title="2）合成事件SyntheticEvent"></a>2）合成事件SyntheticEvent</h6><p><code>SyntheticEvent</code> 实例将被传递给你的事件处理函数，它是浏览器的原生事件的跨浏览器包装器。</p><p><code>SyntheticEvent</code> 是合并而来。这意味着 <code>SyntheticEvent</code> 对象可能会被重用，而且在事件回调函数被调用后，所有的属性都会无效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onClick</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event); <span class="comment">// =&gt; nullified object.</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>); <span class="comment">// =&gt; &quot;click&quot;</span></span><br><span class="line">  <span class="keyword">const</span> eventType = event.<span class="property">type</span>; <span class="comment">// =&gt; &quot;click&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">type</span>); <span class="comment">// =&gt; null</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(eventType); <span class="comment">// =&gt; &quot;click&quot;</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不起作用，this.state.clickEvent 的值将会只包含 null</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">clickEvent</span>: event&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 你仍然可以导出事件属性</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">eventType</span>: event.<span class="property">type</span>&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8、受控组件和非受控组件"><a href="#8、受控组件和非受控组件" class="headerlink" title="8、受控组件和非受控组件"></a>8、受控组件和非受控组件</h4><h6 id="1）非受控组件"><a href="#1）非受控组件" class="headerlink" title="1）非受控组件"></a>1）非受控组件</h6><p>非受控组件类似于传统的 HTML 表单控件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Form</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们会记住你输入的内容，然后，可以使用<code>ref</code>获取它们的值。例如，按钮通过<code>onClick</code>事件进行对应的处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Form</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  handleSubmitClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> name = <span class="variable language_">this</span>.<span class="property">_name</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="comment">// do something with `name`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;input</span> =&gt;</span> this._name = input&#125; /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleSubmitClick&#125;</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在需要时从表单项中获取它的值。提交表单时可能会发生这种情况，这是实现表单输入的最简单方法。</p><p>非受控组件往往可以减少你的代码量。</p><h6 id="2-受控组件"><a href="#2-受控组件" class="headerlink" title="2)  受控组件"></a>2)  受控组件</h6><p>受控组件接受一个<code>state</code>作为它”唯一的数据源“，并且通过回调事件来改变它的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=&#123;someValue&#125; onChange=&#123;handleChange&#125; /&gt;</span><br></pre></td></tr></table></figure><p>通常，渲染控件的组件（表单组件）将其值保存在其<code>state</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Form</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleNameChange = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">name</span>: event.<span class="property">target</span>.<span class="property">value</span> &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.name&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.handleNameChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，它可以在另一个组件的<code>state</code>中，甚至可以在分离的状态存储中，比如<code>Redux</code>。</p><p><code>Form</code>组件始终具有输入的当前值，这意味着你的<code>state</code>和UI始终保持同步。<code>state</code>为控件提供值，操作控件触发<code>Form</code>更变当前的值。</p><h6 id="3）如何判断使用受控组件和非受控组件"><a href="#3）如何判断使用受控组件和非受控组件" class="headerlink" title="3）如何判断使用受控组件和非受控组件"></a>3）如何判断使用受控组件和非受控组件</h6><p>选择非受控组件：</p><ul><li><p>一次性值检索（例如提交时获取input的值）</p></li><li><p>提交时进行验证</p></li></ul><p>选择受控组件：</p><ul><li>实时表单验证</li><li>有条件限制的禁用按钮</li><li>强制表单项的格式</li><li>一组带有数据的表单项</li><li>动态输入 （例如，增加或删除一个数组列表中的某项）</li></ul><p>非受控组件的情况也可以随时使用受控组件代替实现，因为非受控组件改为受控组件并不复杂。</p><h4 id="9、-函数组件和class组件"><a href="#9、-函数组件和class组件" class="headerlink" title="9、 函数组件和class组件"></a>9、 函数组件和class组件</h4><h6 id="1-函数组件"><a href="#1-函数组件" class="headerlink" title="1) 函数组件"></a>1) 函数组件</h6><blockquote><p>本质上就是 JavaScript 函数，它接收唯一带有数据的 <code>props</code>对象与并返回一个 React 元素。</p></blockquote><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Welcome</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="2-class组件"><a href="#2-class组件" class="headerlink" title="2) class组件"></a>2) class组件</h6><p>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Welcome</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3) 优缺点"></a>3) 优缺点</h6><ul><li>函数组件更简洁，开发更容易，React hooks功能也只支持函数组件</li><li>React团队针对函数组件做了更多的优化来避免非必要的检查和内存泄漏</li><li>类组件过多的使用<code>this</code>让整个逻辑看起来很混乱</li></ul><h2 id="二、高级用法"><a href="#二、高级用法" class="headerlink" title="二、高级用法"></a>二、高级用法</h2><h4 id="1、Context"><a href="#1、Context" class="headerlink" title="1、Context"></a>1、Context</h4><h6 id="1）目的"><a href="#1）目的" class="headerlink" title="1）目的"></a>1）目的</h6><p>Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据，例如当前认证的用户、主题或首选语言。</p><h6 id="2）应用场景和替代方案"><a href="#2）应用场景和替代方案" class="headerlink" title="2）应用场景和替代方案"></a>2）应用场景和替代方案</h6><p>应用场景：Context 主要应用场景在于<em>很多</em>不同层级的组件需要访问同样一些的数据。（请谨慎使用，因为这会使得组件的复用性变差）</p><p>替代方案（组件组合）：如果你只是想避免层层传递一些属性，<code>组件组合</code>有时候是一个比 context 更好的解决方案。比如，将需要共享props值的组件以子组件传递下去，这样中间组件无需在意中间需要共享的props是什么。</p><ul><li><p>优点：这种对组件的<em>控制反转</em>减少了在你的应用中要传递的 props 数量，这在很多场景下会使得你的代码更加干净，使你对根组件有更多的把控。</p></li><li><p>缺点：这种将逻辑提升到组件树的更高层次来处理，会使得这些高层组件变得更复杂，并且会强行将低层组件适应这样的形式，这可能不会是你想要的。</p></li></ul><h6 id="3）API"><a href="#3）API" class="headerlink" title="3）API"></a>3）API</h6><h6 id="i、React-createContext"><a href="#i、React-createContext" class="headerlink" title="i、React.createContext"></a>i、React.createContext</h6><p>const MyContext &#x3D; React.createContext(defaultValue);</p><p>创建一个 Context 对象。当 React 渲染一个订阅了这个 Context 对象的组件，这个组件会从组件树中离自身最近的那个匹配的 <code>Provider</code> 中读取到当前的 context 值。</p><h6 id="ii、Context-Provider"><a href="#ii、Context-Provider" class="headerlink" title="ii、Context.Provider"></a>ii、Context.Provider</h6><p>&lt;MyContext.Provider value&#x3D;{&#x2F;* 某个值 *&#x2F;}&gt;</p><p>每个 Context 对象都会返回一个 Provider React 组件，它允许消费组件订阅 context 的变化。</p><p>需注意：</p><ul><li>一个 Provider 可以和多个消费组件有对应关系。多个 Provider 也可以嵌套使用，里层的会覆盖外层的数据。</li><li>当 Provider 的 <code>value</code> 值发生变化时，它内部的所有消费组件都会重新渲染。</li><li>Provider 及其内部 consumer 组件都不受制于 <code>shouldComponentUpdate</code> 函数，因此当 consumer 组件在其祖先组件退出更新的情况下也能更新。</li></ul><h6 id="iii、Class-contextType"><a href="#iii、Class-contextType" class="headerlink" title="iii、Class.contextType"></a>iii、Class.contextType</h6><p>挂载在 class 上的 <code>contextType</code> 属性会被重赋值为一个由 <a href="https://react.docschina.org/docs/context.html#reactcreatecontext"><code>React.createContext()</code></a> 创建的 Context 对象。这能让你使用 <code>this.context</code> 来消费最近 Context 上的那个值。你可以在任何生命周期中访问到它，包括 render 函数中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> contextType = <span class="title class_">MyContext</span>;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="variable language_">this</span>.<span class="property">context</span>;</span><br><span class="line">    <span class="comment">/* 基于这个值进行渲染工作 */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="iv、Context-Consumer"><a href="#iv、Context-Consumer" class="headerlink" title="iv、Context.Consumer"></a>iv、Context.Consumer</h6><p>它能让你在函数式组件中完成订阅 context。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br><span class="line">  &#123;<span class="function"><span class="params">value</span> =&gt;</span> <span class="comment">/* 基于 context 值进行渲染*/</span>&#125;</span><br><span class="line">&lt;/<span class="title class_">MyContext</span>.<span class="property">Consumer</span>&gt;</span><br></pre></td></tr></table></figure><p>需注意：</p><ul><li>需要函数作为子元素，这个函数接收当前的 context 值，返回一个 React 节点。</li><li>传递给函数的 <code>value</code> 值等同于往上组件树离这个 context 最近的 Provider 提供的 <code>value</code> 值。</li><li>如果没有对应的 Provider，<code>value</code> 参数等同于传递给 <code>createContext()</code> 的 <code>defaultValue</code>。</li></ul><h4 id="2、Refs"><a href="#2、Refs" class="headerlink" title="2、Refs"></a>2、Refs</h4><h6 id="1-概念"><a href="#1-概念" class="headerlink" title="1) 概念"></a>1) 概念</h6><blockquote><p>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素。</p></blockquote><h6 id="2）创建和访问Refs"><a href="#2）创建和访问Refs" class="headerlink" title="2）创建和访问Refs"></a>2）创建和访问Refs</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">myRef</span> = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 <code>ref</code> 属性用于 HTML 元素时，构造函数中使用 <code>React.createRef()</code> 创建的 <code>ref</code> 接收底层 DOM 元素作为其 <code>current</code> 属性。</li><li>当 <code>ref</code> 属性用于自定义 class 组件时，<code>ref</code> 对象接收组件的挂载实例作为其 <code>current</code> 属性。</li><li>不能在函数组件上使用 <code>ref</code> 属性，因为它们没有实例。</li></ul><h6 id="3-为函数组件添加-Ref"><a href="#3-为函数组件添加-Ref" class="headerlink" title="3) 为函数组件添加 Ref"></a>3) 为函数组件添加 Ref</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">CustomTextInput</span>(<span class="params">props</span>) &#123;</span><br><span class="line">  <span class="comment">// 这里必须声明 textInput，这样 ref 才可以引用它</span></span><br><span class="line">  <span class="keyword">const</span> textInput = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    textInput.<span class="property">current</span>.<span class="title function_">focus</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;textInput&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&quot;Focus the text input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;handleClick&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5）将-DOM-Refs-暴露给父组件"><a href="#5）将-DOM-Refs-暴露给父组件" class="headerlink" title="5）将 DOM Refs 暴露给父组件"></a>5）将 DOM Refs 暴露给父组件</h6><p>Ref 转发使组件可以像暴露自己的 ref 一样暴露子组件的 ref。Ref 转发是一个可选特性，其允许某些组件接收 <code>ref</code>，并将其向下传递（换句话说，“转发”它）给子组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">FancyButton</span> = <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">className</span>=<span class="string">&quot;FancyButton&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &#123;props.children&#125;</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 你可以直接获取 DOM button 的 ref：</span></span><br><span class="line"><span class="keyword">const</span> ref = <span class="title class_">React</span>.<span class="title function_">createRef</span>();</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">FancyButton</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">FancyButton</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><p>需注意：在高阶组件中，refs 将不会透传下去。这是因为 <code>ref</code> 不是 prop 属性。就像 <code>key</code> 一样，其被 React 进行了特殊处理。如果你对 HOC 添加 ref，该 ref 将引用最外层的容器组件，而不是被包裹的组件。</p><p>在高阶组件中转发refs：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logProps</span>(<span class="params">Component</span>) &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">LogProps</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;old props:&#x27;</span>, prevProps);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new props:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123;forwardedRef, ...rest&#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 将自定义的 prop 属性 “forwardedRef” 定义为 ref</span></span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Component</span> <span class="attr">ref</span>=<span class="string">&#123;forwardedRef&#125;</span> &#123;<span class="attr">...rest</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 注意 React.forwardRef 回调的第二个参数 “ref”。</span></span><br><span class="line">  <span class="comment">// 我们可以将其作为常规 prop 属性传递给 LogProps，例如 “forwardedRef”</span></span><br><span class="line">  <span class="comment">// 然后它就可以被挂载到被 LogProps 包裹的子组件上。</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">LogProps</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">forwardedRef</span>=<span class="string">&#123;ref&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6）回调-Refs"><a href="#6）回调-Refs" class="headerlink" title="6）回调 Refs"></a>6）回调 Refs</h6><p>React 也支持另一种设置 refs 的方式，称为“回调 refs”。它能助你更精细地控制何时 refs 被设置和解除。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CustomTextInput</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">textInput</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">setTextInputRef</span> = <span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">textInput</span> = element;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">focusTextInput</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 使用原生 DOM API 使 text 输入框获得焦点</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">textInput</span>) <span class="variable language_">this</span>.<span class="property">textInput</span>.<span class="title function_">focus</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 组件挂载后，让文本框自动获得焦点</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">focusTextInput</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 `ref` 的回调函数将 text 输入框 DOM 节点的引用存储到 React</span></span><br><span class="line">    <span class="comment">// 实例上（比如 this.textInput）</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ref</span>=<span class="string">&#123;this.setTextInputRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">type</span>=<span class="string">&quot;button&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&quot;Focus the text input&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;this.focusTextInput&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、高阶组件"><a href="#3、高阶组件" class="headerlink" title="3、高阶组件"></a>3、高阶组件</h4><h6 id="1）概念"><a href="#1）概念" class="headerlink" title="1）概念"></a>1）概念</h6><blockquote><p>高阶组件（HOC）是 React 中用于复用组件逻辑的一种高级技巧。HOC 自身不是 React API 的一部分，它是一种基于 React 的组合特性而形成的设计模式。</p></blockquote><p>具体而言，高阶组件是参数为组件，返回值为新组件的函数。</p><h6 id="2-为何不使用Mixin"><a href="#2-为何不使用Mixin" class="headerlink" title="2) 为何不使用Mixin"></a>2) 为何不使用Mixin</h6><p><code>Mixin</code>是实现组件之间共享代码的方式之一，但可能会引发如下问题：</p><ul><li>Mixins 引入了隐式依赖<ul><li>为一个有状态组件添加一个读取此状态的mixin，以后可能将该状态移至父组件，以便与兄弟组件分享，但与此同时还要记得更新mixin来读取prop。</li><li>更糟糕的是，mixin 可以指定自己的 mixin，因此依赖关系可以很深入。</li><li>Mixin不形成层次结构，它们被扁平化并在相同的命名空间中运行。</li></ul></li><li>Mixins 导致名称冲突</li><li>Mixins 导致滚雪球般的复杂性<ul><li>新的需求可能要求对已有的minx进行扩展，多个这样扩展可能会导致逻辑紧密耦合</li><li>如果不同组件用到mixin，不能轻松地将 mixin 使用的状态提升到父组件中</li><li>不断的需求可能让mixin会变得越来越抽象，很难更改或删除现有的 mixin</li></ul></li></ul><h6 id="3）通过组合方式实现高阶组件"><a href="#3）通过组合方式实现高阶组件" class="headerlink" title="3）通过组合方式实现高阶组件"></a>3）通过组合方式实现高阶组件</h6><p>创建一个函数，通过传入一个<code>包装组件</code>，返回另一个对<code>此包装组件</code>进行特性加强过的组件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">logProps</span>(<span class="params">WrappedComponent</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">React</span>.<span class="property">Component</span> &#123;</span><br><span class="line">    <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Current props: &#x27;</span>, <span class="variable language_">this</span>.<span class="property">props</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Previous props: &#x27;</span>, prevProps);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 将 input 组件包装在容器中，而不对其进行修改。Good!</span></span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">WrappedComponent</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 注意：</p><ul><li>将不相关的 props 传递给被包裹的组件</li><li>最大化可组合性</li></ul><h4 id="4、Redux"><a href="#4、Redux" class="headerlink" title="4、Redux"></a>4、Redux</h4><blockquote><p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。</p></blockquote><h6 id="1）核心概念"><a href="#1）核心概念" class="headerlink" title="1）核心概念"></a>1）核心概念</h6><p><code>state</code>用来描述应用的状态。当使用普通对象来描述应用的<code> state</code> 时，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">todos</span>: [&#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;Eat food&#x27;</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">true</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">text</span>: <span class="string">&#x27;Exercise&#x27;</span>,</span><br><span class="line">    <span class="attr">completed</span>: <span class="literal">false</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">visibilityFilter</span>: <span class="string">&#x27;SHOW_COMPLETED&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>action</code>用来描述更新<code>state</code>数据的行为，是一个普通对象，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;ADD_TODO&#x27;</span>, <span class="attr">text</span>: <span class="string">&#x27;Go to swimming pool&#x27;</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;TOGGLE_TODO&#x27;</span>, <span class="attr">index</span>: <span class="number">1</span> &#125;</span><br><span class="line">&#123; <span class="attr">type</span>: <span class="string">&#x27;SET_VISIBILITY_FILTER&#x27;</span>, <span class="attr">filter</span>: <span class="string">&#x27;SHOW_ALL&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><p><code>reducer</code>是一个接收 state 和 action，并返回新的 <code>state</code> 的函数，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">todos</span>(<span class="params">state = [], action</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;ADD_TODO&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> state.<span class="title function_">concat</span>([&#123; <span class="attr">text</span>: action.<span class="property">text</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;]);</span><br><span class="line">  <span class="keyword">case</span> <span class="string">&#x27;TOGGLE_TODO&#x27;</span>:</span><br><span class="line">    <span class="keyword">return</span> state.<span class="title function_">map</span>(<span class="function">(<span class="params">todo, index</span>) =&gt;</span></span><br><span class="line">      action.<span class="property">index</span> === index ?</span><br><span class="line">        &#123; <span class="attr">text</span>: todo.<span class="property">text</span>, <span class="attr">completed</span>: !todo.<span class="property">completed</span> &#125; :</span><br><span class="line">        todo</span><br><span class="line">   )</span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道 <code>action</code> 来描述“发生了什么”，使用 <code>reducers</code>来根据<code> action</code> 更新 <code>state</code>。</p><p><code>Store</code> 就是把<code>state</code>  <code>action</code>  <code>reducer</code>联系到一起的对象，有以下职责：</p><ul><li>维持应用的 state</li><li>提供 <code>getState()</code>方法获取 state</li><li>提供<code> dispatch(action)</code>方法更新 state</li><li>通过<code> subscribe(listener)</code> 注册监听器</li><li>通过 <code>subscribe(listener)</code> 返回的函数注销监听器</li></ul><p>创建一个<code>store</code>，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(todoApp)</span><br></pre></td></tr></table></figure><p><code>展示(UI)组件</code>只定义外观并不关心数据来源和如何改变。</p><p><code>容器组件</code>用来把<code>展示(UI)组件</code>连接到 Redux。</p><p><code>connect()</code>是React Redux库的方法，用于把<code>展示组件</code>生成<code>容器组件</code>，就是将这两种组件连起来。</p><p><code>connect</code>方法生成容器组件以后，需要让容器组件拿到<code>state</code>对象，才能生成 UI 组件的参数。React-Redux 提供<code>&lt;Provider&gt; 组件</code>，可以让容器组件拿到<code>state</code>。</p><h6 id="2）React-Redux的使用"><a href="#2）React-Redux的使用" class="headerlink" title="2）React-Redux的使用"></a>2）React-Redux的使用</h6><h6 id="i、计数器组件示例的展示-UI-组件，如下："><a href="#i、计数器组件示例的展示-UI-组件，如下：" class="headerlink" title="i、计数器组件示例的展示(UI)组件，如下："></a>i、计数器组件示例的<code>展示(UI)组件</code>，如下：</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value, onIncreaseClick &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;value&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;onIncreaseClick&#125;</span>&gt;</span>Increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>value</code>是通过获取store的state得到，<code>onIncreaseClick</code>通过dispatch发出action操作进而对state进行修改。</p><h6 id="ii、state"><a href="#ii、state" class="headerlink" title="ii、state"></a>ii、state</h6><p>对应state应该是一个点击次数的值，可为0，可写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="iii、action"><a href="#iii、action" class="headerlink" title="iii、action"></a>iii、action</h6><p>对应action应该是描述增加的操作行为，可写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> increaseAction = &#123; <span class="attr">type</span>: <span class="string">&#x27;increase&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h6 id="iv、reducer"><a href="#iv、reducer" class="headerlink" title="iv、reducer"></a>iv、reducer</h6><p>对应reducer应该是一个接收 state 和 action，并返回新的 <code>state</code> 的函数，可写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">counter</span>(<span class="params">state = &#123; count: <span class="number">0</span> &#125;, action</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> count = state.<span class="property">count</span></span><br><span class="line">  <span class="keyword">switch</span> (action.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;increase&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: count + <span class="number">1</span> &#125;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="v、store"><a href="#v、store" class="headerlink" title="v、store"></a>v、store</h6><p><code>Store</code> 就是把<code>state</code>  <code>action</code>  <code>reducer</code>联系到一起的对象，可写如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const store = createStore(counter)</span><br></pre></td></tr></table></figure><p>至此，已经创建好一个store，可以对state数据进行操作和维护。接下来需要创建<code>容器组件</code>把这个<code>展示组件</code>和 Redux 关联起来。</p><h6 id="vi、connect"><a href="#vi、connect" class="headerlink" title="vi、connect()"></a>vi、connect()</h6><p><code>connect()</code>将<code>展示组件</code>生成<code>容器组件</code>，可写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mapStateToProps</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">value</span>: state.<span class="property">count</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">mapDispatchToProps</span>(<span class="params">dispatch</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">onIncreaseClick</span>: <span class="function">() =&gt;</span> <span class="title function_">dispatch</span>(increaseAction)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">App</span> = <span class="title function_">connect</span>(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(<span class="title class_">Counter</span>)</span><br></pre></td></tr></table></figure><h6 id="vii、让-lt-Provider-gt-组件传递store"><a href="#vii、让-lt-Provider-gt-组件传递store" class="headerlink" title="vii、让&lt;Provider&gt; 组件传递store"></a>vii、让<code>&lt;Provider&gt; 组件</code>传递<code>store</code></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>至此，一个使用<code>Redux</code>来维护状态的应用完成。</p><h4 id="5、React-Router"><a href="#5、React-Router" class="headerlink" title="5、React Router"></a>5、React Router</h4><blockquote><p>React Router 是一个基于React之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。</p></blockquote><h6 id="1-获取-URL-参数"><a href="#1-获取-URL-参数" class="headerlink" title="1) 获取 URL 参数"></a>1) 获取 URL 参数</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 来自于路径 `/inbox/messages/:id`</span></span><br><span class="line"> <span class="keyword">const</span> id = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 来自于路径 `/foo?bar=baz`</span></span><br><span class="line"> <span class="keyword">const</span> bar = <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">location</span>.<span class="property">query</span>.<span class="property">bar</span></span><br></pre></td></tr></table></figure><h6 id="2）History"><a href="#2）History" class="headerlink" title="2）History"></a>2）History</h6><p>React Router 是建立在 history之上的。 简而言之，，一个 history 知道如何去监听浏览器地址栏的变化， 并解析这个 URL 转化为 <code>location</code> 对象， 然后 router 使用它匹配到路由，最后正确地渲染对应的组件。</p><p>常用的 history 有三种形式：<code>browserHistory</code>，<code>hashHistory</code>，<code>createMemoryHistory</code></p><p><code>browserHistory </code>  是React Router 的应用推荐的 history，需要服务器配置，<code>history.pushState</code>和<code>history.replaceState</code>都可以改版浏览器的URL而不造成刷新。</p><p><code>hashHistory</code>通过监听<code>hashchange</code>事件变化改变路由视图。</p><h6 id="3）跳转前确认"><a href="#3）跳转前确认" class="headerlink" title="3）跳转前确认"></a>3）跳转前确认</h6><p>React Router 提供一个 <code>routerWillLeave</code> 生命周期钩子，返回值两种：</p><ul><li><code>return false</code> 取消此次跳转</li><li><code>return</code> 返回提示信息，在离开 route 前提示用户进行确认</li></ul><h6 id="4）-路由组件的生命周期"><a href="#4）-路由组件的生命周期" class="headerlink" title="4） 路由组件的生命周期"></a>4） 路由组件的生命周期</h6><ul><li>初始化页面根组件和命中组件触发<code>componentDidMount</code>，后续跳转页面都会触发<code>componentWillReceiveProps</code>和<code>componentDidUpdate</code></li><li>跳转页面<ul><li>跳转不同路由，离开路由组件触发<code>componentWillUnmount</code>，命中路由组件触发<code>componentDidMount</code></li><li>跳转相同路由不同参数，命中路由组件触发<code>componentWillReceiveProps</code>和<code>componentDidUpdate</code></li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>React基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>style-components在项目中遇到的问题</title>
    <link href="/2021/08/07/style-components%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/07/style-components%E5%9C%A8%E9%A1%B9%E7%9B%AE%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="使用style-components在iframe中渲染组件后样式不生效（正式环境中）的问题"><a href="#使用style-components在iframe中渲染组件后样式不生效（正式环境中）的问题" class="headerlink" title="使用style-components在iframe中渲染组件后样式不生效（正式环境中）的问题"></a>使用style-components在iframe中渲染组件后样式不生效（正式环境中）的问题</h2><h4 id="一、什么是style-components"><a href="#一、什么是style-components" class="headerlink" title="一、什么是style-components"></a>一、什么是style-components</h4><blockquote><p>styled-components 是一个常用的css in js 类库。和所有同类型的类库一样，通过 js 赋能解决了原生 css 所不具备的能力，比如变量、循环、函数等。</p></blockquote><h4 id="二、在项目中遇到的问题"><a href="#二、在项目中遇到的问题" class="headerlink" title="二、在项目中遇到的问题"></a>二、在项目中遇到的问题</h4><p>一个页面由Parent组件构成，该组件存在一个iframe，并在iframe加载完成后，在iframe中的一个id为<code>container</code> 的div中渲染一个名为<code>Child</code>的组件，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Parent组件 */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Child</span> <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cd = <span class="variable language_">this</span>.<span class="property">iframeRef</span>.<span class="property">contentDocument</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">divContainer</span> = cd.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="comment">// 在iframe中渲染Child组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span>, <span class="variable language_">this</span>.<span class="property">divContainer</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">componentRenderCallback</span>()</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染完成后的回调</span></span><br><span class="line">componentRenderCallback () &#123;</span><br><span class="line">  <span class="comment">// 因为组件渲染后是将style标签插入到了父级document的head中，所以渲染完后，需要将父级docuemnt的head复制到iframe中，以使Child组件的样式在该iframe中生效</span></span><br><span class="line">  <span class="keyword">const</span> cd = <span class="variable language_">this</span>.<span class="property">iframeRef</span>.<span class="property">contentDocument</span>;</span><br><span class="line">  <span class="keyword">const</span> head = <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">  cd.<span class="property">head</span>.<span class="title function_">remove</span>();</span><br><span class="line">  cd.<span class="property">documentElement</span>.<span class="title function_">insertBefore</span>(head, cd.<span class="property">body</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Child组件 */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span>, <span class="title class_">Fragment</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&#x27;styled-components&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ChildStyle</span> = styled.<span class="property">div</span><span class="string">`</span></span><br><span class="line"><span class="string">.test-p &#123;</span></span><br><span class="line"><span class="string">  font-size: 30px;</span></span><br><span class="line"><span class="string">  color:red;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="language-xml"><span class="tag">&lt;<span class="name">ChildStyle</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;test-p&quot;</span>&gt;</span>I am PrintTable<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">ChildStyle</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Child</span></span><br></pre></td></tr></table></figure><p>在构建环境为development情况下，页面可以正常渲染，如下图：</p><p><img src="/images/image-20210729165909850.png" alt="image-20210729165909850"></p><p>在构建环境为production的情况下，页面渲染后样式没生效，如下图：</p><p><img src="/images/image-20210729170757229.png" alt="image-20210729170757229"></p><h4 id="三、排查问题的思路"><a href="#三、排查问题的思路" class="headerlink" title="三、排查问题的思路"></a>三、排查问题的思路</h4><h6 id="1、查看style-components生成的style标签，development环境是有text节点的，而production环境是空节点。"><a href="#1、查看style-components生成的style标签，development环境是有text节点的，而production环境是空节点。" class="headerlink" title="1、查看style-components生成的style标签，development环境是有text节点的，而production环境是空节点。"></a>1、查看style-components生成的style标签，development环境是有text节点的，而production环境是空节点。</h6><p>如下图：</p><p><img src="/images/image-20210729172431795.png" alt="image-20210729172431795"></p><p><img src="/images/image-20210729172553508.png" alt="image-20210729172553508"></p><p>所以复制style标签到iframe中后，在production环境样式自然是不生效的。</p><p>猜测可能原因是打包配置的问题，如下：</p><ul><li><p>production环境打包过程中开启了tree-shaking，将插入到style中的逻辑给剔除了。</p><ul><li>排除此原因，Tree-shaking主要依赖于ES6的模块化import和export，将没有用到代码去除，而生成的代码中是可以找到相关的代码的。</li></ul></li><li><p>可能是mini-css-extract-plugin插件将包含 CSS 的 JS 文件提取到了单独的css文件，导致style标签子节点为空。</p><ul><li>排除此原因。在其他的css文件中并没找到<code>.test-p</code>相关的样式。</li></ul></li><li><p>索性将production下的配置改成和development下的配置一样，再次打包，还是同样的效果。</p><ul><li>因此，排除了配置对代码逻辑的影响。</li></ul></li></ul><h6 id="2、网上查相关资料，有如下可能"><a href="#2、网上查相关资料，有如下可能" class="headerlink" title="2、网上查相关资料，有如下可能"></a>2、网上查相关资料，有如下可能</h6><ul><li>浏览器把插入style的代码当做广告了<ul><li>排除此原因。取消设置浏览器的广告劫持，还是如此。</li></ul></li><li>安全策略style-src配置的限制<ul><li>排除此原因。查看请求头的配置，并无此配置。</li></ul></li></ul><h6 id="3、尝试在父document和iframe的document中都渲染Child组件，发现父docuemnt组件样式生效，iframe中的组件样式不生效。并且style标签还是空的。"><a href="#3、尝试在父document和iframe的document中都渲染Child组件，发现父docuemnt组件样式生效，iframe中的组件样式不生效。并且style标签还是空的。" class="headerlink" title="3、尝试在父document和iframe的document中都渲染Child组件，发现父docuemnt组件样式生效，iframe中的组件样式不生效。并且style标签还是空的。"></a>3、尝试在父document和iframe的document中都渲染Child组件，发现父docuemnt组件样式生效，iframe中的组件样式不生效。并且style标签还是空的。</h6><p>如下图：</p><p><img src="/images/image-20210729180510789.png" alt="image-20210729180510789"></p><p><img src="/images/image-20210729180629047.png" alt="image-20210729180629047"></p><p><img src="/images/image-20210729180747162.png" alt="image-20210729180747162"></p><p>打开控制台，查看父docuemnt下的组件样式后，它就是head中的空style标签，没有子节点，但它确实是有样式规则的。</p><p>查阅资料得知，插入或修改一个dom节点的样式有两种方式，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过DOM API（或者通过插入style和link标签）</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>).<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过CSSOM API</span></span><br><span class="line"><span class="keyword">const</span> style = <span class="variable language_">document</span>.<span class="property">styleSheets</span>[<span class="number">0</span>];</span><br><span class="line">style.<span class="property">sheet</span>.<span class="title function_">insertRule</span>(<span class="string">&#x27;#myDiv &#123;background-color: blue&#125;&#x27;</span>);</span><br></pre></td></tr></table></figure><p>由此可知，外document通过CSSOM API对样式表操作添加了一条样式规则，类似进行了 <code>styleSheet.insertRule(&#39;.test-p &#123; font-size: 30px, color:red &#125;&#39;)</code>的操作，进而修改了该组件的样式。并且此API只对父document的样式表进行了修改，所以只对父docuemnt的组件的样式生效，而将父document的head复制到iframe的head中，因为style标签是空的，所以对于iframe中组件样式当然是不生效的。</p><p>到此，需要知道style-components的运行机制，所以要去了解下源码。</p><h4 id="三、style-components源码分析"><a href="#三、style-components源码分析" class="headerlink" title="三、style-components源码分析"></a>三、style-components源码分析</h4><p>参考了此文章<a href="https://juejin.cn/post/6885911421167599623">深入理解styled-components运行机制</a>，了解了一下style-components的运行机制。</p><p>由此，可以知道将css代码插入到head中是通过<code>insertRules</code>方法执行的，然后去控制台进行调试代码，找到与此相关的代码，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> O = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">groupSizes</span> = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(<span class="number">512</span>),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">512</span>,</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tag</span> = e</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> t = e.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  t.<span class="property">insertRules</span> = <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e &gt;= <span class="variable language_">this</span>.<span class="property">groupSizes</span>.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="variable language_">this</span>.<span class="property">groupSizes</span>, n = r.<span class="property">length</span>, o = n; e &gt;= o; )</span><br><span class="line">        (o &lt;&lt;= <span class="number">1</span>) &lt; <span class="number">0</span> &amp;&amp; <span class="title function_">E</span>(<span class="number">16</span>, <span class="string">&quot;&quot;</span> + e);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">groupSizes</span> = <span class="keyword">new</span> <span class="title class_">Uint32Array</span>(o),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">groupSizes</span>.<span class="title function_">set</span>(r),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span> = o;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = n; i &lt; o; i++)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">groupSizes</span>[i] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> a = <span class="variable language_">this</span>.<span class="title function_">indexOfGroup</span>(e + <span class="number">1</span>), s = <span class="number">0</span>, c = t.<span class="property">length</span>; s &lt; c; s++)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tag</span>.<span class="title function_">insertRule</span>(a, t[s]) &amp;&amp; (<span class="variable language_">this</span>.<span class="property">groupSizes</span>[e]++, a++)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>打断点调试，可知insertRules方法中的<code>this.tag</code>就是生成的style标签，然后通过调用<code>this.tag.insertRule</code>方法去添加的样式规则。</p><p>打断点进入<code>this.tag</code>的insertRule方法，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">M = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="property">element</span> = <span class="title function_">B</span>(e);</span><br><span class="line">    t.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;&quot;</span>)),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sheet</span> = <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">sheet</span>)</span><br><span class="line">        <span class="keyword">return</span> e.<span class="property">sheet</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="variable language_">document</span>.<span class="property">styleSheets</span>, r = <span class="number">0</span>, n = t.<span class="property">length</span>; r &lt; n; r++) &#123;</span><br><span class="line">        <span class="keyword">var</span> o = t[r];</span><br><span class="line">        <span class="keyword">if</span> (o.<span class="property">ownerNode</span> === e)</span><br><span class="line">          <span class="keyword">return</span> o</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">E</span>(<span class="number">17</span>)</span><br><span class="line">    &#125;(t),</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> t = e.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">return</span> t.<span class="property">insertRule</span> = <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sheet</span>.<span class="title function_">insertRule</span>(t, e),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>++,</span><br><span class="line">        !<span class="number">0</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>可知，<code>this.sheet.insertRule</code>是添加样式规则的。再分析<code>this.sheet</code>由来可知，在当前document下所有样式表中循环遍历，找到样式表的<code>ownerNode </code>  与该 <code>this.tag</code> （也就是要插入到head中style标签）相同的样式表 ,所以<code>this.sheet</code>就是在当前document下属于插入到head中的style标签的样式表。进而通过操作CSSOM API<code>this.sheet.insertRule</code>添加对应的样式。</p><p>虽然通过操作CSSOM API对父docuemnt的组件添加样式可以生效，但iframe中的组件样式自然是不生效的，因为操作的是父document的样式表。</p><p>疑问：为什么development环境下生成的style标签里是有子节点的，而production环境是没有子节点，而是通过CSSOM API来操作样式呢？</p><p>尝试将打包配置切换到development环境，并在控制台调试，找到相关的插入样式的代码，关键代码如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">V = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> t = <span class="variable language_">this</span>.<span class="property">element</span> = <span class="title function_">z</span>(e);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">nodes</span> = t.<span class="property">childNodes</span>,</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> t = e.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="keyword">return</span> t.<span class="property">insertRule</span> = <span class="keyword">function</span>(<span class="params">e, t</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e &lt;= <span class="variable language_">this</span>.<span class="property">length</span> &amp;&amp; e &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> n = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(t)</span><br><span class="line">      , r = <span class="variable language_">this</span>.<span class="property">nodes</span>[e];</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">element</span>.<span class="title function_">insertBefore</span>(n, r || <span class="literal">null</span>),</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">length</span>++,</span><br><span class="line">        !<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure><p>可知，在development环境下，是通过<code>this.element.insertBefore</code>来添加样式规则的，<code>this.element</code>便是style标签，最后将每条样式规则通过text节点插入到了style标签中。</p><p>所以，style-components在development环境下是通过基于文本节点的 CSS 注入系统，以向 DOM 添加样式；而production环境下是通过CSSOM API，以向对应的样式表中添加样式规则。</p><p>然后继续调试，查找<code>this.tag</code>标签生成的相关代码，关键代码如下：</p><p><img src="/images/image-20210730142746165.png" alt="image-20210730142746165"></p><p>然后在style-components未处理过的源代码中，代码是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> makeTag = <span class="keyword">function</span> <span class="title function_">makeTag</span>(<span class="params">_ref</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> isServer = _ref.<span class="property">isServer</span>,</span><br><span class="line">      useCSSOMInjection = _ref.<span class="property">useCSSOMInjection</span>,</span><br><span class="line">      target = _ref.<span class="property">target</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VirtualTag</span>(target);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (useCSSOMInjection) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CSSOMTag</span>(target);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextTag</span>(target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可知，styled-components 是根据不同参数来选择生成对应不同style标签的实例，再根据各自的insertRule方法插入样式。</p><p>顺代码往上找，可知，isServer是指不是浏览器环境，useCSSOMInjection是一个与环境配置变量相关的三元运算符，关键代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// isServer</span></span><br><span class="line">isServer = <span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="string">&#x27;HTMLElement&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// useCSSOMInjection</span></span><br><span class="line">useCSSOMInjection = !<span class="title class_">Boolean</span>(<span class="keyword">typeof</span> <span class="variable constant_">SC_DISABLE_SPEEDY</span> === <span class="string">&#x27;boolean&#x27;</span> ? <span class="variable constant_">SC_DISABLE_SPEEDY</span> : <span class="keyword">typeof</span> process !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> process.<span class="property">env</span>.<span class="property">REACT_APP_SC_DISABLE_SPEEDY</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; process.<span class="property">env</span>.<span class="property">REACT_APP_SC_DISABLE_SPEEDY</span> !== <span class="string">&#x27;&#x27;</span> ? process.<span class="property">env</span>.<span class="property">REACT_APP_SC_DISABLE_SPEEDY</span> === <span class="string">&#x27;false&#x27;</span> ? <span class="literal">false</span> : process.<span class="property">env</span>.<span class="property">REACT_APP_SC_DISABLE_SPEEDY</span> : <span class="keyword">typeof</span> process !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> process.<span class="property">env</span>.<span class="property">SC_DISABLE_SPEEDY</span> !== <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; process.<span class="property">env</span>.<span class="property">SC_DISABLE_SPEEDY</span> !== <span class="string">&#x27;&#x27;</span> ? process.<span class="property">env</span>.<span class="property">SC_DISABLE_SPEEDY</span> === <span class="string">&#x27;false&#x27;</span> ? <span class="literal">false</span> : process.<span class="property">env</span>.<span class="property">SC_DISABLE_SPEEDY</span> : process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;production&#x27;</span>); </span><br></pre></td></tr></table></figure><p>到此可知，development环境下useCSSOMInjection为false，走的<code>new TextTag</code>，对应创建实例的insertRule方法是通过基于文本节点的 CSS 注入系统，以向 DOM 添加样式。而production环境下useCSSOMInjection为true，走的<code>new CSSOMTag</code>，对应创建实例的insertRule方法是通过CSSOM API，以向对应的样式表中添加样式规则。</p><p>综上，在development环境下生成的style标签是有对应的样式规则子节点的，然后复制style到iframe中的head中，组件样式可以正常显示；而在production环境下生成的style标签是没有子节点，是通过操作CSSOM AP向样式表中添加样式规则，然后复制style到iframe中的head中，自然组件的样式也不会生效。</p><p>那有什么解决方案呢？</p><h4 id="四、解决方案"><a href="#四、解决方案" class="headerlink" title="四、解决方案"></a>四、解决方案</h4><p>查阅<a href="https://styled-components.com/docs/api">style-compnents官方文档</a>， StyleSheetManager可以作为辅助组件，强制切换到较慢的基于文本节点的 CSS 注入系统，以向 DOM 添加样式，运用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">StyleSheetManager</span> <span class="attr">disableCSSOMInjections</span>=<span class="string">&#123;true&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">StyleSheetManager</span>&gt;</span></span>,</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">divContainer</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">componentRenderCallback</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，就会强制切换到基于文本节点的 CSS 注入系统，以向 DOM 添加样式，从而使iframe中组件的样式生效。</p><p>StyleSheetManager还有个<code>target</code>属性，以提供目标的 DOM 节点以注入样式信息，运用如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">StyleSheetManager</span> <span class="attr">target</span>=<span class="string">&#123;this.divContainer&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">StyleSheetManager</span>&gt;</span></span>,</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">divContainer</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">componentRenderCallback</span>()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样，生成的style标签不会在父document的head下，而是在<code>target</code>指定的<code>this.divContainer</code>中生成对应的style标签，这样，也就不用辅助父document的head到iframe中去了，使逻辑更简洁明了，推荐使用这个api的属性来解决这个问题。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
      <tag>项目中遇到的问题</tag>
      
      <tag>style-component</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式笔记</title>
    <link href="/2020/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/12/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="一、-单例模式"><a href="#一、-单例模式" class="headerlink" title="一、 单例模式"></a>一、 单例模式</h2><blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 基于类的单例模式 */</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Singleton</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-title class_">Singleton</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-title class_">Singleton</span>.<span class="hljs-property">getInstance</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> instance = <span class="hljs-literal">null</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>(name)<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance<br>    &#125;<br>&#125;)()<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>(<span class="hljs-string">&#x27;sven1&#x27;</span>)<br><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>(<span class="hljs-string">&#x27;sven2&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b) <span class="hljs-comment">// true</span><br>a.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// sven1</span><br>b.<span class="hljs-title function_">getName</span>() <span class="hljs-comment">// sven1</span><br><br><span class="hljs-comment">/* 基于js的单例模式 */</span><br><span class="hljs-keyword">var</span> getSingle = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">var</span> result<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> result || (result = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>))<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> createDiv = <span class="hljs-title function_">getSingle</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;Hello World&#x27;</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>    <span class="hljs-keyword">return</span> div<br>&#125;)<br><br><span class="hljs-title function_">createDiv</span>()<br><span class="hljs-title function_">createDiv</span>()<br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="二、-策略模式"><a href="#二、-策略模式" class="headerlink" title="二、 策略模式"></a>二、 策略模式</h2><blockquote><p>定义一些列的算法，把他们一个个封装起来，并且使它们可以相互转换。</p></blockquote><p>策略模式的目的就是把算法的使用与算法的实现分离开来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 基于类的策略模式 计算奖金 */</span><br><span class="hljs-keyword">var</span> performanceS = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>performanceS.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">calculate</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">salary</span>) &#123;<br>    <span class="hljs-keyword">return</span> salary * <span class="hljs-number">4</span><br>&#125;<br><br><span class="hljs-keyword">var</span> performanceA = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>performanceA.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">calculate</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">salary</span>) &#123;<br>    <span class="hljs-keyword">return</span> salary * <span class="hljs-number">3</span><br>&#125;<br><br><span class="hljs-keyword">var</span> performanceB = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>performanceB.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">calculate</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">salary</span>) &#123;<br>    <span class="hljs-keyword">return</span> salary * <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Bonus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span> = <span class="hljs-literal">null</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">strategy</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Bonus</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setSalary</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">salary</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span> = salary<br>&#125;<br><span class="hljs-title class_">Bonus</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setStrategy</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">strategy</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">strategy</span> = strategy<br>&#125;<br><span class="hljs-title class_">Bonus</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getBonus</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">strategy</span>.<span class="hljs-title function_">calculate</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> bonus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bonus</span>()<br>bonus.<span class="hljs-title function_">setSalary</span>(<span class="hljs-number">1000</span>)<br>bonus.<span class="hljs-title function_">setStrategy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">performanceS</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bonus.<span class="hljs-title function_">getBonus</span>())<br><br>bonus.<span class="hljs-title function_">setStrategy</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">performanceA</span>())<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(bonus.<span class="hljs-title function_">getBonus</span>())<br><br><span class="hljs-comment">/* 基于js的策略模式 计算奖金*/</span><br><span class="hljs-keyword">var</span> strategies = &#123;<br>    <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">salary</span>) &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">4</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">salary</span>) &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">3</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">salary</span>) &#123;<br>        <span class="hljs-keyword">return</span> salary * <span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> calculateBonus = <span class="hljs-keyword">function</span> (<span class="hljs-params">level, salary</span>) &#123;<br>    <span class="hljs-keyword">return</span> strategies[level](salary)<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">calculateBonus</span>(<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">2000</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">calculateBonus</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">1000</span>))<br><br><span class="hljs-comment">/*策略模式 表单校验的实现*/</span><br><span class="hljs-keyword">var</span> strategies = &#123;<br>    <span class="hljs-attr">isNonEmpty</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, errorMsg</span>) &#123;<br>        <span class="hljs-keyword">if</span> (value === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">minLength</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, length, errorMsg</span>) &#123;<br>        <span class="hljs-keyword">if</span> (value.<span class="hljs-property">length</span> &lt; length) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">isMobile</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value, errorMsg</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/(^1[3|5|8][0-9]&#123;9&#125;$)/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Validator</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span> = []<br>&#125;<br><span class="hljs-title class_">Validator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">dom, rules</span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, rule; rule = rules[i++];) &#123;<br>        (<span class="hljs-keyword">function</span>(<span class="hljs-params">rule</span>) &#123;<br>            <span class="hljs-keyword">var</span> strategyAry = rule.<span class="hljs-property">strategy</span>.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;:&#x27;</span>)<br>            <span class="hljs-keyword">var</span> errorMsg = rule.<span class="hljs-property">errorMsg</span><br>            self.<span class="hljs-property">cache</span>.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> strategy = strategyAry.<span class="hljs-title function_">shift</span>()<br>                strategyAry.<span class="hljs-title function_">unshift</span>(dom.<span class="hljs-property">value</span>)<br>                strategyAry.<span class="hljs-title function_">push</span>(errorMsg)<br>                <span class="hljs-keyword">return</span> strategies[strategy].<span class="hljs-title function_">apply</span>(dom, strategyAry)<br>            &#125;)<br>        &#125;(rule))<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Validator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">start</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, validatorFunc; validatorFunc = <span class="hljs-variable language_">this</span>.<span class="hljs-property">cache</span>[i++];) &#123;<br>        <span class="hljs-keyword">var</span> errorMsg = <span class="hljs-title function_">validatorFunc</span>()<br>        <span class="hljs-keyword">if</span> (errorMsg) &#123;<br>            <span class="hljs-keyword">return</span> errorMsg<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;form id=&quot;registerForm&quot;&gt;</span><br><span class="hljs-string">        用户名：&lt;input name=&quot;userName&quot; /&gt;</span><br><span class="hljs-string">        密码：&lt;input name=&quot;password&quot; /&gt;</span><br><span class="hljs-string">        手机号：&lt;input name=&quot;phoneNumber&quot; /&gt;</span><br><span class="hljs-string">        &lt;div onclick=&quot;submit()&quot;&gt;提交&lt;/div&gt;</span><br><span class="hljs-string">    &lt;/form&gt;</span><br><span class="hljs-string">`</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br><br><span class="hljs-keyword">var</span> registerForm = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;registerForm&#x27;</span>)<br><span class="hljs-keyword">var</span> validataFunc = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> validator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Validator</span>()<br>    validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">userName</span>, [&#123;<br>        <span class="hljs-attr">strategy</span>: <span class="hljs-string">&#x27;isNonEmpty&#x27;</span>,<br>        <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&#x27;用户名不能为空&#x27;</span><br>    &#125;, &#123;<br>        <span class="hljs-attr">strategy</span>: <span class="hljs-string">&#x27;minLength:6&#x27;</span>,<br>        <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&#x27;用户名长度不能小于6位&#x27;</span><br>    &#125;])<br>    validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">password</span>, [&#123;<br>        <span class="hljs-attr">strategy</span>: <span class="hljs-string">&#x27;minLength:6&#x27;</span>,<br>        <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&#x27;密码长度不能小于6位&#x27;</span><br>    &#125;])<br>    validator.<span class="hljs-title function_">add</span>(registerForm.<span class="hljs-property">phoneNumber</span>, [&#123;<br>        <span class="hljs-attr">strategy</span>: <span class="hljs-string">&#x27;isMobile&#x27;</span>,<br>        <span class="hljs-attr">errorMsg</span>: <span class="hljs-string">&#x27;手机号码格式不正确&#x27;</span><br>    &#125;])<br>    <span class="hljs-keyword">var</span> errorMsg = validator.<span class="hljs-title function_">start</span>()<br>    <span class="hljs-keyword">return</span> errorMsg<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">submit</span> () &#123;<br>    <span class="hljs-keyword">var</span> errorMsg = <span class="hljs-title function_">validataFunc</span>()<br>    <span class="hljs-keyword">if</span> (errorMsg) &#123;<br>        <span class="hljs-title function_">alert</span>(errorMsg)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、-代理模式"><a href="#三、-代理模式" class="headerlink" title="三、 代理模式"></a>三、 代理模式</h2><p>代理模式是为了一个对象提供一个代用品或占位符，以便控制对它的访问。</p><h4 id="1、虚拟代理实现图片预加载"><a href="#1、虚拟代理实现图片预加载" class="headerlink" title="1、虚拟代理实现图片预加载"></a>1、虚拟代理实现图片预加载</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> myImage = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgNode)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) &#123;<br>        imgNode.<span class="hljs-property">src</span> = src<br>    &#125;<br>&#125;)()<br><br><span class="hljs-keyword">var</span> proxyImage = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>    img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">myImage</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">src</span>) &#123;<br>        <span class="hljs-title function_">myImage</span>(<span class="hljs-string">&#x27;https://dss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1490359208,1900349923&amp;fm=26&amp;gp=0.jpg&#x27;</span>)<br>        img.<span class="hljs-property">src</span> = src<br>    &#125;<br>&#125;)()<br><br><span class="hljs-title function_">proxyImage</span>(<span class="hljs-string">&#x27;https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=949532008,2689259452&amp;fm=26&amp;gp=0.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="2、虚拟代理合并HTTP请求"><a href="#2、虚拟代理合并HTTP请求" class="headerlink" title="2、虚拟代理合并HTTP请求"></a>2、虚拟代理合并HTTP请求</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> synchronousFile = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始同步文件，id为：&#x27;</span> + id)<br>&#125;<br><span class="hljs-keyword">var</span> proxySynchronousFile = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> cache = [],<br>        timer<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) &#123;<br>        cache.<span class="hljs-title function_">push</span>(id)<br>        <span class="hljs-keyword">if</span> (timer) <span class="hljs-keyword">return</span><br>        timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">synchronousFile</span>(cache.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;,&#x27;</span>))<br>            <span class="hljs-built_in">clearTimeout</span>(timer)<br>            timer = <span class="hljs-literal">null</span><br>            cache.<span class="hljs-property">length</span> = <span class="hljs-number">0</span><br>        &#125;, <span class="hljs-number">2000</span>)<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> checkbox = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementByTagName</span>(<span class="hljs-string">&#x27;input&#x27;</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, c; c = checkbox[i++];) &#123;<br>    c.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-title function_">proxySynchronousFile</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、虚拟代理在惰性加载中的应用"><a href="#3、虚拟代理在惰性加载中的应用" class="headerlink" title="3、虚拟代理在惰性加载中的应用"></a>3、虚拟代理在惰性加载中的应用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> miniConsole = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> cache = []<br>    <span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ev.<span class="hljs-property">keyCode</span> === <span class="hljs-number">133</span>) &#123;<br>            <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>)<br>            script.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, fn; fn = cache[i++];) &#123;<br>                    <span class="hljs-title function_">fn</span>()<br>                &#125;<br>            &#125;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;head&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-title function_">appendChild</span>(script)<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">removeEventListener</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, handler)<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">addEventListner</span>(<span class="hljs-string">&#x27;keydown&#x27;</span>, handler, <span class="hljs-literal">false</span>)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">log</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> args = <span class="hljs-variable language_">arguments</span><br>            cache.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> miniConsole.<span class="hljs-property">log</span>.<span class="hljs-title function_">apply</span>(miniConsole, args)<br>            &#125;)<br>        &#125;<br>    &#125;<br>&#125;)<br><br>miniConsole.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">// miniConsole.js 代码</span><br>miniConsole = &#123;<br>    <span class="hljs-attr">log</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、缓存代理-——-计算乘积"><a href="#4、缓存代理-——-计算乘积" class="headerlink" title="4、缓存代理 —— 计算乘积"></a>4、缓存代理 —— 计算乘积</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript">val mult = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>        a = a * <span class="hljs-variable language_">arguments</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">var</span> plus = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span> <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>        a = a + <span class="hljs-variable language_">arguments</span>[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> a<br>&#125;<br><span class="hljs-keyword">var</span> createProxyFactory = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">var</span> cache = &#123;&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-string">&#x27;,&#x27;</span>)<br>        <span class="hljs-keyword">if</span> (args <span class="hljs-keyword">in</span> cache) &#123;<br>            <span class="hljs-keyword">return</span> cache[args]<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache[args] = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> proxyMult = <span class="hljs-title function_">createProxyFactory</span>(mult)<br><span class="hljs-keyword">var</span> proxyPlus = <span class="hljs-title function_">createProxyFactory</span>(plus)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">proxyMult</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">proxyMult</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">proxyPlus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">proxyPlus</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><h4 id="5、其他代理模式"><a href="#5、其他代理模式" class="headerlink" title="5、其他代理模式"></a>5、其他代理模式</h4><ul><li>防火墙代理： 控制网络资源的访问，保护主题不让”坏人”接近</li><li>远程代理： 为了一个对象在不同的地址空间提供局部代表，在Java中，远程代理可以是另一个虚拟机中的对象。</li><li>保护代理： 用于对象应该有不同访问权限的情况</li><li>智能引用代理： 取代了简单的指针，它在访问对象时执行一些附加操作，比如计算一个对象被引用的次数。</li><li>写时复制代理:  通常用于复制一个庞大对象的情况。写时复制代理延迟了复制的过程，当对象被真正修改时，才对它进行复制操作。写时复制代理是虚拟代理对一种变体，DLL（操作系统中的动态链接库）是其典型运用场景。</li></ul><h2 id="四、-迭代器模式"><a href="#四、-迭代器模式" class="headerlink" title="四、 迭代器模式"></a>四、 迭代器模式</h2><p>迭代器模式是为了一个对象提供一个代用品或占位符，以便控制对它的访问。</p><h4 id="1、内部迭代器"><a href="#1、内部迭代器" class="headerlink" title="1、内部迭代器"></a>1、内部迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> each = <span class="hljs-keyword">function</span> (<span class="hljs-params">arr, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = arr.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>        callback.<span class="hljs-title function_">call</span>(arr[i], i , arr[i])<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">each</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">i, n</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, n)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、外部迭代器"><a href="#2、外部迭代器" class="headerlink" title="2、外部迭代器"></a>2、外部迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Iterator</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> next = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        current += <span class="hljs-number">1</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> isDone = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> current &gt;= obj.<span class="hljs-property">length</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> getCurrentItem = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> obj[current]<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">next</span>: next,<br>        <span class="hljs-attr">isDone</span>: isDone,<br>        <span class="hljs-attr">getCurrentItem</span>: getCurrentItem,<br>        <span class="hljs-attr">length</span>: obj.<span class="hljs-property">length</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> compare = <span class="hljs-keyword">function</span> (<span class="hljs-params">iterator1, iterator2</span>) &#123;<br>    <span class="hljs-keyword">if</span> (iterator1.<span class="hljs-property">length</span> !== iterator2.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;iterator1 和 iterator2不相等&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!iterator1.<span class="hljs-property">isDone</span> &amp;&amp; !iterator2.<span class="hljs-property">isDone</span>) &#123;<br>        <span class="hljs-keyword">if</span> (iterator1.<span class="hljs-title function_">getCurrentItem</span>() !== iterator2.<span class="hljs-title function_">getCurrentItem</span>()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;iterator1 和 iterator2不相等&#x27;</span>)<br>        &#125;<br>        iterator1.<span class="hljs-title function_">next</span>()<br>        iterator2.<span class="hljs-title function_">next</span>()<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;iterator1 和 iterator2相等&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> iterator1 = <span class="hljs-title class_">Iterator</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-keyword">var</span> iterator2 = <span class="hljs-title class_">Iterator</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])<br><span class="hljs-title function_">compare</span>(iterator1, iterator2)<br></code></pre></td></tr></table></figure><h4 id="3、迭代类数组对象和字面量对象"><a href="#3、迭代类数组对象和字面量对象" class="headerlink" title="3、迭代类数组对象和字面量对象"></a>3、迭代类数组对象和字面量对象</h4><p>jQuery中提供了$.each函数来封装各种迭代行为。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.each = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj, callback</span>) &#123;<br>    <span class="hljs-keyword">var</span> value,<br>        i = <span class="hljs-number">0</span>,<br>        length = obj.<span class="hljs-property">length</span>,<br>        isArray = <span class="hljs-title function_">isArraylike</span>(obj)<br><br>    <span class="hljs-keyword">if</span> (isArray) &#123;<br>        <span class="hljs-keyword">for</span> (; i &lt; length; i++) &#123;<br>            value = callback.<span class="hljs-title function_">call</span>(obj[i], i, obj[i])<br>            <span class="hljs-keyword">if</span> (value === <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> obj) &#123;<br>            value = callback.<span class="hljs-title function_">call</span>(obj[i], i, obj[i])<br>            <span class="hljs-keyword">if</span> (value = <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、倒叙迭代器"><a href="#4、倒叙迭代器" class="headerlink" title="4、倒叙迭代器"></a>4、倒叙迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> reverseEach = <span class="hljs-keyword">function</span> (<span class="hljs-params">arr, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> l = arr.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>        <span class="hljs-title function_">callback</span>(l, arr[l])<br>    &#125;<br>&#125;<br><span class="hljs-title function_">reverseEach</span>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">i, n</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5、中止迭代器"><a href="#5、中止迭代器" class="headerlink" title="5、中止迭代器"></a>5、中止迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> each = <span class="hljs-keyword">function</span> (<span class="hljs-params">arr, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = arr.<span class="hljs-property">length</span>; i &lt; l; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (callback.<span class="hljs-title function_">call</span>(arr[i], i, arr[i]) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">each</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], <span class="hljs-keyword">function</span> (<span class="hljs-params">i, n</span>) &#123;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i, n)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="6、应用"><a href="#6、应用" class="headerlink" title="6、应用"></a>6、应用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> getActiveUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;TXFTNActiveX.FTNUpload&#x27;</span>) <span class="hljs-comment">// IE上传控件</span><br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> getFlashUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_">supportFlash</span>()) &#123;<br>        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&lt;object type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;&#x27;</span> <span class="hljs-comment">// supportFlash函数为提供</span><br>        <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>))<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">var</span> getFormUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&lt;input name=&quot;file&quot; type=&quot;file&quot; class=&quot;ui-file&quot;/&gt;&#x27;</span> <span class="hljs-comment">// 表单上传</span><br>    <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>))<br>&#125;<br><br><span class="hljs-keyword">var</span> iteratorUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, fn; fn = <span class="hljs-variable language_">arguments</span>[i++]) &#123;<br>        <span class="hljs-keyword">var</span> uploadObj = <span class="hljs-title function_">fn</span>()<br>        <span class="hljs-keyword">if</span> (uploadObj !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span> uploadObj<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> uploadObj = <span class="hljs-title function_">iteratorUploadObj</span>(getActiveUploadObj, getFlashUploadObj, getFormUploadObj)<br></code></pre></td></tr></table></figure><h2 id="五、-发布-订阅模式"><a href="#五、-发布-订阅模式" class="headerlink" title="五、 发布-订阅模式"></a>五、 发布-订阅模式</h2><blockquote><p>发布-订阅模式又叫观察者模式，它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p></blockquote><p>在JavaScript开发中，我们一般用事件模型来替代传统的发布-订阅模式。</p><h4 id="1、发布-订阅模式的通用实现"><a href="#1、发布-订阅模式的通用实现" class="headerlink" title="1、发布-订阅模式的通用实现"></a>1、发布-订阅模式的通用实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> event = &#123;<br>    <span class="hljs-attr">clientList</span>: [],<br>    <span class="hljs-attr">listen</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key]) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key] = []<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key].<span class="hljs-title function_">push</span>(fn)<br>    &#125;,<br>    <span class="hljs-attr">trigger</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>            fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key]<br>        <span class="hljs-keyword">if</span> (!fns || fns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, fn; fn = fns[i++];) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">remove</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">var</span> fns = <span class="hljs-variable language_">this</span>.<span class="hljs-property">clientList</span>[key]<br>        <span class="hljs-keyword">if</span> (!fns) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (fns.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> l = fns.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>                <span class="hljs-keyword">var</span> _fn = fns[l]<br>                <span class="hljs-keyword">if</span> (_fn === fn) &#123;<br>                    fns.<span class="hljs-title function_">splice</span>(l, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> installEvent = <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> event) &#123;<br>        obj[i] = event[i]<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> salesOffices = &#123;&#125;<br><span class="hljs-title function_">installEvent</span>(salesOffices)<br>salesOffices.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;价格= &#x27;</span> + price)<br>&#125;)<br>salesOffices.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;squareMeter100&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;价格= &#x27;</span> + price)<br>&#125;)<br>salesOffices.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, <span class="hljs-number">2000000</span>)<br>salesOffices.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;squareMeter100&#x27;</span>, <span class="hljs-number">3000000</span>)<br><br><br>salesOffices.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, fn1 = <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;价格= &#x27;</span> + price)<br>&#125;)<br>salesOffices.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, fn2 = <span class="hljs-keyword">function</span> (<span class="hljs-params">price</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;价格= &#x27;</span> + price)<br>&#125;)<br>salesOffices.<span class="hljs-title function_">remove</span>(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, fn1)<br>salesOffices.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;squareMeter88&#x27;</span>, <span class="hljs-number">2000000</span>)<br></code></pre></td></tr></table></figure><h4 id="2、全局的发布-订阅对象"><a href="#2、全局的发布-订阅对象" class="headerlink" title="2、全局的发布-订阅对象"></a>2、全局的发布-订阅对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Event</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> clientList = &#123;&#125;,<br>        listen,<br>        trigger,<br>        remove<br>    listen = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!clientList[key]) &#123;<br>            clientList[key] = []<br>        &#125;<br>        clientList[key].<span class="hljs-title function_">push</span>(fn)<br>    &#125;,<br>    trigger = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>),<br>        fns = clientList[key]<br>        <span class="hljs-keyword">if</span> (!fns || fns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, fn; fn = fns[i++];) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        &#125;<br>    &#125;,<br>    remove = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">var</span> fns = clientList[key]<br>        <span class="hljs-keyword">if</span> (!fns) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (fns.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> l = fns.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>                <span class="hljs-keyword">var</span> _fn = fns[l]<br>                <span class="hljs-keyword">if</span> (_fn === fn) &#123;<br>                    fns.<span class="hljs-title function_">splice</span>(l, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">listen</span>: listen,<br>        <span class="hljs-attr">trigger</span>: trigger,<br>        <span class="hljs-attr">remove</span>: remove<br>    &#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><h4 id="3、全局事件的命名冲突"><a href="#3、全局事件的命名冲突" class="headerlink" title="3、全局事件的命名冲突"></a>3、全局事件的命名冲突</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Event</span> =(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">global</span> = <span class="hljs-variable language_">this</span>,<br>        <span class="hljs-title class_">Event</span>,<br>        _default = <span class="hljs-string">&#x27;default&#x27;</span><br>    <span class="hljs-title class_">Event</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> _listen,<br>            _trigger,<br>            _remove,<br>            _slice = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span>,<br>            _shift = <span class="hljs-title class_">Array</span>,prototype.<span class="hljs-property">shift</span>,<br>            namespaceCache = &#123;&#125;,<br>            _create,<br>            find,<br>            each = <span class="hljs-keyword">function</span> (<span class="hljs-params">ary, fn</span>) &#123;<br>                <span class="hljs-keyword">var</span> ret<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l &lt; ary.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>                    <span class="hljs-keyword">var</span> n = ary[i]<br>                    ret = fn.<span class="hljs-title function_">call</span>(n, i, n)<br>                &#125;<br>                <span class="hljs-keyword">return</span> ret<br>            &#125;<br>        _listen = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn, cache</span>) &#123;<br>            <span class="hljs-keyword">if</span> (!cache[key]) &#123;<br>                cache[key] = []<br>            &#125;<br>            cache[key].<span class="hljs-title function_">push</span>(fn)<br>        &#125;<br>        _remove = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, cache, fn</span>) &#123;<br>            <span class="hljs-keyword">if</span> (cache[key]) &#123;<br>                <span class="hljs-keyword">if</span> (fn) &#123;<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = cache[key].<span class="hljs-property">length</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                        <span class="hljs-keyword">if</span> (cache[key][i] === fn) &#123;<br>                            cache[key].<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>                        &#125;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    cache[key] = []<br>                &#125;<br>            &#125;<br>        &#125;<br>        _trigger = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> cache = _shift.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>                key = _shift.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>                args = <span class="hljs-variable language_">arguments</span><br>                _self = <span class="hljs-variable language_">this</span>,<br>                ret,<br>                stack = cache[key]<br>            <span class="hljs-keyword">if</span> (!stack || !stack.<span class="hljs-property">length</span>) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">each</span>(stack, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">apply</span>(_self, args)<br>            &#125;)<br>        &#125;<br>        _create = <span class="hljs-keyword">function</span> (<span class="hljs-params">namespace</span>) &#123;<br>            <span class="hljs-keyword">var</span> namespace = namespace || _default<br>            <span class="hljs-keyword">var</span> cache = &#123;&#125;<br>                offlineStack = []<br>                ret = &#123;<br>                    <span class="hljs-attr">listen</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn, last</span>) &#123;<br>                        <span class="hljs-title function_">_listen</span>(key, fn, cache)<br>                        <span class="hljs-keyword">if</span> (offlineStack === <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">return</span><br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (last === <span class="hljs-string">&#x27;last&#x27;</span>) &#123;<br>                            offlineStack.<span class="hljs-property">length</span> &amp;&amp; offlineStack.<span class="hljs-title function_">pop</span>()()<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-title function_">each</span>(offlineStack, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                                <span class="hljs-title function_">this</span>()<br>                            &#125;)<br>                        &#125;<br>                        offlineStack = <span class="hljs-literal">null</span><br>                    &#125;,<br>                    <span class="hljs-attr">one</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn, last</span>) &#123;<br>                        <span class="hljs-title function_">_remove</span>(key, cache)<br>                        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">listen</span>(key, fn, last)<br>                    &#125;,<br>                    <span class="hljs-attr">remove</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>                        <span class="hljs-title function_">_remove</span>(key, cache, fn)<br>                    &#125;,<br>                    <span class="hljs-attr">trigger</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                        <span class="hljs-keyword">var</span> fn,<br>                            args,<br>                            _self = <span class="hljs-variable language_">this</span><br>                        _unshift.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, cache)<br>                        args = <span class="hljs-variable language_">arguments</span><br>                        fn = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                            <span class="hljs-keyword">return</span> _trigger.<span class="hljs-title function_">apply</span>(_self, args)<br>                        &#125;<br>                        <span class="hljs-keyword">if</span> (offlineStack) &#123;<br>                            <span class="hljs-keyword">return</span> offlineStack.<span class="hljs-title function_">push</span>(fn)<br>                        &#125;  <br>                        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fn</span>()<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> namespace ? (namespaceCache[namespace] ? namespaceCache[namespace] : namespaceCache[namespace] = ret) : ret<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">create</span>: _create,<br>            <span class="hljs-attr">one</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn, last</span>) &#123;<br>                <span class="hljs-keyword">var</span> event = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>()<br>                    event.<span class="hljs-title function_">one</span>(key, fn, last)<br>            &#125;,<br>            <span class="hljs-attr">remove</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>                <span class="hljs-keyword">var</span> event = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">creaete</span>()<br>                    event.<span class="hljs-title function_">remove</span>(key, fn)<br>            &#125;,<br>            <span class="hljs-attr">listen</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn, last</span>) &#123;<br>                <span class="hljs-keyword">var</span> event = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>()<br>                    event.<span class="hljs-title function_">listen</span>(key, fn, last)<br>            &#125;,<br>            <span class="hljs-attr">trigger</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">var</span> event = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">create</span>()<br>                    event.<span class="hljs-property">trigger</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>            &#125;<br>        &#125;<br>    &#125;()<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Event</span><br>&#125;)()<br></code></pre></td></tr></table></figure><h2 id="六、-命令模式"><a href="#六、-命令模式" class="headerlink" title="六、 命令模式"></a>六、 命令模式</h2><p>应用场景： 有时候需要向某些对象发送请求，但是并不知道请求的接受者是谁，也不知道被请求的操作是什么，此时希望用一种松耦合的方式来设计软件，使得请求发送者和请求接受者能够消除彼此之间的耦合关系。</p><h4 id="1、基于类的命令模式"><a href="#1、基于类的命令模式" class="headerlink" title="1、基于类的命令模式"></a>1、基于类的命令模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> setCommand = <span class="hljs-keyword">function</span> (<span class="hljs-params">button, command</span>) &#123;<br>    button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        command.<span class="hljs-title function_">execute</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MenuBar</span> = &#123;<br>    <span class="hljs-attr">refresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;刷新菜单目录&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">SubMenu</span> = &#123;<br>    <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;增加子菜单&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">del</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除子菜单&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">RefreshMenuBarCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver<br>&#125;<br><span class="hljs-title class_">RefreshMenuBarCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">execute</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">refresh</span>()<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">AddSubMenuCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver<br>&#125;<br><span class="hljs-title class_">AddSubMenuCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">execute</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">add</span>()<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">DelSubMenuCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver<br>&#125;<br><span class="hljs-title class_">DelSubMenuCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">execute</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除子菜单&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> refreshMenubarcommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RefreshMenuBarCommand</span>(<span class="hljs-title class_">MenuBar</span>)<br><span class="hljs-keyword">var</span> addSubMenuCommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AddSubMenuCommand</span>(<span class="hljs-title class_">SubMenu</span>)<br><span class="hljs-keyword">var</span> delSubMenuCommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelSubMenuCommand</span>(<span class="hljs-title class_">SubMenu</span>)<br><br><span class="hljs-title function_">setCommand</span>(button1, refreshMenuBarCommand)<br><span class="hljs-title function_">setCommand</span>(button2, addSubMenuCommand)<br><span class="hljs-title function_">setCommand</span>(button3, delSubMenuCommand)<br></code></pre></td></tr></table></figure><h4 id="2、基于JavaScript的命令模式"><a href="#2、基于JavaScript的命令模式" class="headerlink" title="2、基于JavaScript的命令模式"></a>2、基于JavaScript的命令模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> bindClick = <span class="hljs-keyword">function</span> (<span class="hljs-params">button, func</span>) &#123;<br>    button.<span class="hljs-property">onclik</span> = func<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MenuBar</span> = &#123;<br>    <span class="hljs-attr">refresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;刷新菜单界面&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">SubMenu</span> = &#123;<br>    <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;增加子菜单&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">del</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;删除子菜单&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-title function_">bindClick</span>(button1, <span class="hljs-title class_">MenuBar</span>.<span class="hljs-property">refresh</span>)<br><span class="hljs-title function_">bindClick</span>(button2, <span class="hljs-title class_">SubMenu</span>.<span class="hljs-property">add</span>)<br><span class="hljs-title function_">bindClick</span>(button3, <span class="hljs-title class_">SubMenu</span>.<span class="hljs-property">del</span>)<br><br><span class="hljs-comment">/* 用闭包实现命令模式 */</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MenuBar</span> = &#123;<br>    <span class="hljs-attr">refresh</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;刷新菜单界面&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">RefreshMenuBarCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            receiver.<span class="hljs-title function_">refresh</span>()<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> setCommand = <span class="hljs-keyword">function</span> (<span class="hljs-params">button, command</span>) &#123;<br>    button.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        command.<span class="hljs-title function_">execute</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> refreshMenuBarCommand = <span class="hljs-title class_">RefreshMenuBarCommand</span>(<span class="hljs-title class_">MenuBar</span>)<br><span class="hljs-title function_">setCommand</span>(button1, refreshMenuBarCommand)<br></code></pre></td></tr></table></figure><h4 id="3、撤销命令"><a href="#3、撤销命令" class="headerlink" title="3、撤销命令"></a>3、撤销命令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ball = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElemnetById</span>(<span class="hljs-string">&#x27;ball&#x27;</span>)<br><span class="hljs-keyword">var</span> pos = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElemnetById</span>(<span class="hljs-string">&#x27;pos&#x27;</span>)<br><span class="hljs-keyword">var</span> moveBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElemnetById</span>(<span class="hljs-string">&#x27;moveBtn&#x27;</span>)<br><span class="hljs-keyword">var</span> cancelBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElemnetById</span>(<span class="hljs-string">&#x27;cancelBtn&#x27;</span>)<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MoveCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver, pos</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = rreceiver<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">pos</span> = pos<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oldPos</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">MoveCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">execute</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">start</span>(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">pos</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;strongEaseOut&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">oldPos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-property">dom</span>.<span class="hljs-title function_">getBoundingClientRect</span>()[<span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-property">propertyName</span>]<br>&#125;<br><span class="hljs-title class_">MoveCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">undo</span> = funciton () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">start</span>(<span class="hljs-string">&#x27;left&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">oldPos</span>, <span class="hljs-number">1000</span>, <span class="hljs-string">&#x27;strongEaseOut&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> moveCommand<br>moveBtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> animate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animate</span>(ball)<br>    moveCommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MoveCommand</span>(animate, pos.<span class="hljs-property">value</span>)<br>    moveCommand.<span class="hljs-title function_">execute</span>()<br>&#125;<br>cancelBtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    moveCommand.<span class="hljs-title function_">undo</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、撤销和重做"><a href="#4、撤销和重做" class="headerlink" title="4、撤销和重做"></a>4、撤销和重做</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Ryu</span> = &#123;<br>    <span class="hljs-attr">attack</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;攻击&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">defense</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;防御&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">jump</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳跃&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">crouch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;蹲下&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> makeCommand = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver, state</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        receiver[state]<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> commands = &#123;<br>    <span class="hljs-string">&#x27;119&#x27;</span>: <span class="hljs-string">&#x27;jump&#x27;</span>,<br>    <span class="hljs-string">&#x27;115&#x27;</span>: <span class="hljs-string">&#x27;crouch&#x27;</span>,<br>    <span class="hljs-string">&#x27;97&#x27;</span>: <span class="hljs-string">&#x27;defense&#x27;</span>,<br>    <span class="hljs-string">&#x27;100&#x27;</span> <span class="hljs-string">&#x27;attack&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> commandStack = []<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">onkeypress</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">ev</span>) &#123;<br>    <span class="hljs-keyword">var</span> keyCode = ev.<span class="hljs-property">keyCode</span><br>        command = <span class="hljs-title function_">makeCommand</span>(<span class="hljs-title class_">Ryu</span>, commands[keyCode])<br>    <span class="hljs-keyword">if</span> (command) &#123;<br>        <span class="hljs-title function_">command</span>()<br>        commandStack.<span class="hljs-title function_">push</span>(command)<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;replay&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> command<br>    <span class="hljs-keyword">while</span> (command = commandStack.<span class="hljs-title function_">shift</span>()) &#123;<br>        <span class="hljs-title function_">command</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、宏命令"><a href="#5、宏命令" class="headerlink" title="5、宏命令"></a>5、宏命令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> closeDoorCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关门&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openPcCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开电脑&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openQQCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;登录QQ&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MacroCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">commandsList</span>: [],<br>        <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">commandsList</span>.<span class="hljs-title function_">push</span>(command)<br>        &#125;,<br>        <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, command; command = <span class="hljs-variable language_">this</span>.<span class="hljs-property">commandsList</span>[i++]) &#123;<br>                command.<span class="hljs-title function_">execute</span>()<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> macroCommand = <span class="hljs-title class_">MacroCommand</span>()<br>macroCommand.<span class="hljs-title function_">add</span>(closeDoorCommand)<br>macroCommand.<span class="hljs-title function_">add</span>(openPcCommand)<br>macroCommand.<span class="hljs-title function_">add</span>(openQQCommand)<br>macroCommand.<span class="hljs-title function_">execute</span>()<br></code></pre></td></tr></table></figure><h2 id="六、-组合模式"><a href="#六、-组合模式" class="headerlink" title="六、 组合模式"></a>六、 组合模式</h2><p>用途： 组合模式将对象组合成树形结构，以表示’部分-整体’的层次结构。除了用来表示树形结构之外，组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象对使用具有一致性。</p><h4 id="1、更强大的宏命令"><a href="#1、更强大的宏命令" class="headerlink" title="1、更强大的宏命令"></a>1、更强大的宏命令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">MacroCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">commandsList</span>: [],<br>        <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">command</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">commandsList</span>.<span class="hljs-title function_">push</span>(command)<br>        &#125;,<br>        <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, command; command = <span class="hljs-variable language_">this</span>.<span class="hljs-property">commandsList</span>[i++];) &#123;<br>                command.<span class="hljs-title function_">execute</span>()<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openAcCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打开空调&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openTvCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打开电视&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openSoundCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打开音响&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> macroCommand1 = <span class="hljs-title class_">MacroCommand</span>()<br>macroCommand1.<span class="hljs-title function_">add</span>(openTvCommand)<br>macroCommand1.<span class="hljs-title function_">add</span>(openSoundCommand)<br><br><span class="hljs-keyword">var</span> closeDoorCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关门&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openPcCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打电脑&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openQQCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;登录QQ&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> macroCommand2 = <span class="hljs-title class_">MacroCommand</span>()<br>macroCommand2.<span class="hljs-title function_">add</span>(closeDoorCommand)<br>macroCommand2.<span class="hljs-title function_">add</span>(openPcCommand)<br>macroCommand2.<span class="hljs-title function_">add</span>(openQQCommand)<br><br><span class="hljs-keyword">var</span> macroCommand = <span class="hljs-title class_">MacroCommand</span>()<br>macroCommand.<span class="hljs-title function_">add</span>(openAcCommand)<br>macroCommand.<span class="hljs-title function_">add</span>(macroCommand1)<br>macroCommand.<span class="hljs-title function_">add</span>(macroCommand2)<br><br><span class="hljs-keyword">var</span> setCommand = (<span class="hljs-keyword">function</span> (<span class="hljs-params">command</span>) &#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title class_">GetElementById</span>(<span class="hljs-string">&#x27;button&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        command.<span class="hljs-title function_">execute</span>()<br>    &#125;<br>&#125;)(macroCommand)<br></code></pre></td></tr></table></figure><h4 id="2、抽象类在组合模式中的作用"><a href="#2、抽象类在组合模式中的作用" class="headerlink" title="2、抽象类在组合模式中的作用"></a>2、抽象类在组合模式中的作用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component child)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component child)</span>&#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Composite</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component child)</span> &#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Component child)</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Component</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Component child)</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Componet child)</span> &#123;&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">client</span>() &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>()<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>()<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Composite</span>()<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">leaf1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>()<br>        <span class="hljs-type">Component</span> <span class="hljs-variable">leaf2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>()<br>        root.add(c1)<br>        root.add(c2)<br>        c1.add(leaf1)<br>        c1.add(leaf2)<br>        root.remove()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、透明性的问题"><a href="#3、透明性的问题" class="headerlink" title="3、透明性的问题"></a>3、透明性的问题</h4><p>组合模式的透明性使得发起请求的客户不用去顾忌树中组合对象和叶对象的区别，但它们在本质上是有区别的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">MacroCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">commandsList</span>: [],<br>        <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">command</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">commandsList</span>.<span class="hljs-title function_">push</span>(command)<br>        &#125;,<br>        <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, command; command = <span class="hljs-variable language_">this</span>.<span class="hljs-property">commandsList</span>[i++];) &#123;<br>                command.<span class="hljs-title function_">execute</span>()<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> openTvCommand = &#123;<br>    <span class="hljs-attr">execute</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;打开电视&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 有时候会发生误操作，比如往叶对象中添加子节点，解决方案通常是给叶对象也增加add方法，并且调用这个方法时，抛出一个异常。</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Errow</span>(<span class="hljs-string">&#x27;叶对象不能添加子节点&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> macroCommand = <span class="hljs-title class_">MacroCommand</span>()<br>macroCommand.<span class="hljs-title function_">add</span>(openTvCommand)<br>openTvCommand.<span class="hljs-title function_">add</span>(macroCommand)<br></code></pre></td></tr></table></figure><h4 id="4、组合模式例子——扫描文件夹"><a href="#4、组合模式例子——扫描文件夹" class="headerlink" title="4、组合模式例子——扫描文件夹"></a>4、组合模式例子——扫描文件夹</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Folder</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span> = []<br>&#125;<br><span class="hljs-title class_">Folder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>.<span class="hljs-title function_">push</span>(file)<br>&#125;<br><span class="hljs-title class_">Folder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">scan</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始扫描文件夹：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, file, files = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>; file = files[i++];) &#123;<br>        file.<span class="hljs-title function_">scan</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">File</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><span class="hljs-title class_">File</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;文件下面不能再添加文件&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">File</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">scan</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始扫描文件:&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-keyword">var</span> folder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;学习资料&#x27;</span>)<br><span class="hljs-keyword">var</span> folder1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;JavaScript&#x27;</span>)<br><span class="hljs-keyword">var</span> folder2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;jQuery&#x27;</span>)<br><br><span class="hljs-keyword">var</span> file1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;JavaScript设计模式与开发实践&#x27;</span>)<br><span class="hljs-keyword">var</span> file2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;精通jQurey&#x27;</span>)<br><span class="hljs-keyword">var</span> file3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;重构与模式&#x27;</span>)<br><br>folder1.<span class="hljs-title function_">add</span>(file1)<br>folder2.<span class="hljs-title function_">add</span>(file2)<br><br>folder.<span class="hljs-title function_">add</span>(folder1)<br>folder.<span class="hljs-title function_">add</span>(folder2)<br>folder.<span class="hljs-title function_">add</span>(file3)<br><br><span class="hljs-keyword">var</span> folder3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;Nodejs&#x27;</span>)<br><span class="hljs-keyword">var</span> file4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;深入浅出Node.js&#x27;</span>)<br>folder3.<span class="hljs-title function_">add</span>(file4)<br><br><span class="hljs-keyword">var</span> file5 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;JavaScript语言精髓与编程实践&#x27;</span>)<br>folder.<span class="hljs-title function_">add</span>(folder3)<br>folder.<span class="hljs-title function_">add</span>(file5)<br><br>folder.<span class="hljs-title function_">scan</span>()<br></code></pre></td></tr></table></figure><h4 id="5、值得注意的地方"><a href="#5、值得注意的地方" class="headerlink" title="5、值得注意的地方"></a>5、值得注意的地方</h4><ul><li>组合模式不是父子关系</li><li>对叶对象操作对一致性</li><li>双向映射关系</li><li>用职责链模式提高组合模式性能</li></ul><h4 id="6、引用父对象"><a href="#6、引用父对象" class="headerlink" title="6、引用父对象"></a>6、引用父对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Folder</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span> = <span class="hljs-literal">null</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span> = []<br>&#125;<br><span class="hljs-title class_">Folder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">file</span>) &#123;<br>    file.<span class="hljs-property">parent</span> = <span class="hljs-variable language_">this</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>.<span class="hljs-title function_">push</span>(file)<br>&#125;<br><span class="hljs-title class_">Folder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">scan</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始扫描文件夹：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, file, files = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>; file = files[i++];) &#123;<br>        file.<span class="hljs-title function_">scan</span>()<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Folder</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">remove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> files = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">files</span>, l = files.<span class="hljs-property">lenth</span> - <span class="hljs-number">1</span>; l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>        <span class="hljs-keyword">var</span> file = files[l]<br>        <span class="hljs-keyword">if</span> (file === files[l]) &#123;<br>            files.<span class="hljs-title function_">splice</span>(l, <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">File</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">File</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">add</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    thorw <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;不能添加在文件夹下面&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">File</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">scan</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始扫描文件：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><span class="hljs-title class_">File</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">remove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> files = <span class="hljs-variable language_">this</span>.<span class="hljs-property">parent</span>.<span class="hljs-property">files</span>, l = files.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>        <span class="hljs-keyword">var</span> files = files[l]<br>        <span class="hljs-keyword">if</span> (file === <span class="hljs-variable language_">this</span>) &#123;<br>            files.<span class="hljs-title function_">splice</span>(l, <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> folder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;学习资料&#x27;</span>)<br><span class="hljs-keyword">var</span> folder1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;JavaScript&#x27;</span>)<br><span class="hljs-keyword">var</span> file1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Folder</span>(<span class="hljs-string">&#x27;深入浅出Node.js&#x27;</span>)<br><br>folder1.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&#x27;JavaScript设计模式与开发实践&#x27;</span>))<br>folder.<span class="hljs-title function_">add</span>(folder1)<br>folder.<span class="hljs-title function_">add</span>(file1)<br><br>folder1.<span class="hljs-title function_">remove</span>()<br>folder.<span class="hljs-title function_">scan</span>()<br></code></pre></td></tr></table></figure><h4 id="7、何时使用组合模式"><a href="#7、何时使用组合模式" class="headerlink" title="7、何时使用组合模式"></a>7、何时使用组合模式</h4><ul><li>表示对象的部分-整体层次结构</li><li>客户希望统一对待树中的所有对象</li></ul><h2 id="七、-模板方法模式"><a href="#七、-模板方法模式" class="headerlink" title="七、 模板方法模式"></a>七、 模板方法模式</h2><blockquote><p>模板方法模式是一种只需使用继承就可以实现的非常简单的模式。模板方法模式有两部分组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法以及封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p></blockquote><h4 id="1、例子——Coffee-or-Tea"><a href="#1、例子——Coffee-or-Tea" class="headerlink" title="1、例子——Coffee or Tea"></a>1、例子——Coffee or Tea</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把水煮沸&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">boilWater</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">brew</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pourInCup</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCondiments</span>()<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Coffee</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>()<br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水冲泡咖啡&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把咖啡倒进被子&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖和牛奶&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Coffee</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>()<br><span class="hljs-title class_">Coffee</span>.<span class="hljs-title function_">init</span>()<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Tea</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>()<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水浸泡茶叶&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把茶倒进被子&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加柠檬&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Tea</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>()<br><span class="hljs-title class_">Tea</span>.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><h4 id="2、JavaScript没有抽象类的缺点和解决方案"><a href="#2、JavaScript没有抽象类的缺点和解决方案" class="headerlink" title="2、JavaScript没有抽象类的缺点和解决方案"></a>2、JavaScript没有抽象类的缺点和解决方案</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写brew方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写pourInCup方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写addCondiments方法&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、钩子方法"><a href="#3、钩子方法" class="headerlink" title="3、钩子方法"></a>3、钩子方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把水煮沸&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写brew方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写pourInCup方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写addCondiments方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">customerWantsCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">boilWater</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">brew</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pourInCup</span>()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">customerWantsCondiments</span>()) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCondiments</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CoffeeWithHook</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>()<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水冲泡咖啡&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用咖啡倒进杯子&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖和牛奶&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">customerWantsCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;请问需要咖啡吗&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> coffeeWithHook = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeeWithHook</span>()<br>coffeeWithHook.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><h4 id="4、好莱坞原则"><a href="#4、好莱坞原则" class="headerlink" title="4、好莱坞原则"></a>4、好莱坞原则</h4><ul><li>模板方法模式</li><li>发布-订阅模式</li><li>回调函数</li></ul><h4 id="5、高阶函数实现模板方法模式"><a href="#5、高阶函数实现模板方法模式" class="headerlink" title="5、高阶函数实现模板方法模式"></a>5、高阶函数实现模板方法模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">param</span>) &#123;<br>    <span class="hljs-keyword">var</span> boilWater = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把水煮沸&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">var</span> brew = param.<span class="hljs-property">brew</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须传递brew方法&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">var</span> pourInCup = param.<span class="hljs-property">pourInCup</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须传递pourInCup方法&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">var</span> addCondiments = param.<span class="hljs-property">addCondiments</span> || <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;必须传递addCondiments方法&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">var</span> F = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br>    F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">boilWater</span>()<br>        <span class="hljs-title function_">brew</span>()<br>        <span class="hljs-title function_">pourInCup</span>()<br>        <span class="hljs-title function_">addCondiments</span>()<br>    &#125;<br>    <span class="hljs-keyword">return</span> F<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Coffee</span> = <span class="hljs-title class_">Beverage</span>(&#123;<br>    <span class="hljs-attr">brew</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水冲泡咖啡&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">pourInCup</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用咖啡倒进杯子&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">addCondiments</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖和牛奶&#x27;</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Tea</span> = <span class="hljs-title class_">Beverage</span>(&#123;<br>    <span class="hljs-attr">brew</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用沸水浸泡茶叶&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">pourInCup</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;用茶倒进杯子&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">addCondiments</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加柠檬&#x27;</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-keyword">var</span> coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>()<br>coffee.<span class="hljs-title function_">init</span>()<br><br><span class="hljs-keyword">var</span> tea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>()<br>tea.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><h2 id="八、-享元模式"><a href="#八、-享元模式" class="headerlink" title="八、 享元模式"></a>八、 享元模式</h2><p>享元模式是一种用于性能优化的模式，核心是运用共享技术来有效支持大量细粒度的对象。</p><h4 id="1、享元模式的内部状态和外部状态"><a href="#1、享元模式的内部状态和外部状态" class="headerlink" title="1、享元模式的内部状态和外部状态"></a>1、享元模式的内部状态和外部状态</h4><ul><li>内部状态存储于对象内部</li><li>内部状态可以被一些对象共享</li><li>内部状态独立于具体的场景，通常不会改变</li><li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享</li></ul><h4 id="2、享元模式的通用结构"><a href="#2、享元模式的通用结构" class="headerlink" title="2、享元模式的通用结构"></a>2、享元模式的通用结构</h4><p>共享对象可以通过对象工厂中被创建出来，然后可以用一个管理器来记录对象相关的外部状态，使这些外部状态通过某个钩子和共享对象联系起来。</p><h4 id="3、文件上传的例子"><a href="#3、文件上传的例子" class="headerlink" title="3、文件上传的例子"></a>3、文件上传的例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* 未使用享元模式 */</span><br><span class="hljs-keyword">var</span> id = <span class="hljs-number">0</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">startUpload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">uploadType, files</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, file; file = files[i++];) &#123;<br>        <span class="hljs-keyword">var</span> uploadObj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Upload</span>(uploadType, file.<span class="hljs-property">fileName</span>, file.<span class="hljs-property">fileSize</span>)<br>        uploadObj.<span class="hljs-title function_">init</span>(id++)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Upload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">uploadType, fileName, fileSize</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uploadType</span> = uploadType<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileName</span> = fileName<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span> = fileSize<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Upload</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;span&gt;文件名称：&lt;/span&gt;&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileName</span> + <span class="hljs-string">&#x27;，文件大小：&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span> + <span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span> +<br>                         <span class="hljs-string">&#x27;&lt;button class=&quot;delFile&quot;&gt;删除&lt;/button&gt;&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.delFile&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        that.<span class="hljs-title function_">delFile</span>()<br>    &#125;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>)<br>&#125;<br><span class="hljs-title class_">Upload</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">delFile</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span> &lt; <span class="hljs-number">3000</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;确定要删除该文件吗？&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileName</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">startUpload</span>(<span class="hljs-string">&#x27;plugin&#x27;</span>, [<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;1.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;2.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">3000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;3.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">5000</span><br>    &#125;<br>])<br><span class="hljs-title function_">startUpload</span>(<span class="hljs-string">&#x27;flash&#x27;</span>, [<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;4.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;5.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">3000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;6.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">5000</span><br>    &#125;<br>])<br><br><span class="hljs-comment">/* 使用享元模式实现 */</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Upload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">uploadType</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">uploadType</span> = uploadType<br>&#125;<br><span class="hljs-title class_">Upload</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">delFile</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">id</span>) &#123;<br>    uploadManager.<span class="hljs-title function_">setExternalState</span>(id, <span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">fileSize</span> &lt; <span class="hljs-number">3000</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>)<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;确定要删除该文件吗？&#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">fileName</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>.<span class="hljs-property">parentNode</span>.<span class="hljs-title function_">removeChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">dom</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">UploadFactory</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> createFlyWeightObjs = &#123;&#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">create</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">uploadType</span>) &#123;<br>            <span class="hljs-keyword">if</span> (createFlyWeightObjs[uploadType]) &#123;<br>                <span class="hljs-keyword">return</span> createdFlyWeightObjs[uploadType]<br>            &#125;<br>            <span class="hljs-keyword">return</span> createdFlyWeightObjs[uploadType] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Upload</span>(uploadType)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> uploadManager = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> uploadDatabase = &#123;&#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">id, uploadType, fileName, fileSize</span>) &#123;<br>            <span class="hljs-keyword">var</span> flyWeightObj = <span class="hljs-title class_">UploadFactory</span>.<span class="hljs-title function_">create</span>(uploadType)<br>            <span class="hljs-keyword">var</span> dom = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>            dom.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;&lt;span&gt;文件名称：&lt;/span&gt;&#x27;</span> + fileName + <span class="hljs-string">&#x27;，文件大小：&#x27;</span> + fileSize + <span class="hljs-string">&#x27;&lt;/span&gt;&#x27;</span> +<br>                         <span class="hljs-string">&#x27;&lt;button class=&quot;delFile&quot;&gt;删除&lt;/button&gt;&#x27;</span><br>            dom.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;.delFile&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                flyWeightObj.<span class="hljs-title function_">delFile</span>(id)<br>            &#125;<br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(dom)<br>            uploadDatabase[id] = &#123;<br>                <span class="hljs-attr">fileName</span>: fileName,<br>                <span class="hljs-attr">fileSize</span>: fileSize,<br>                <span class="hljs-attr">dom</span>: dom<br>            &#125;<br>            <span class="hljs-keyword">return</span> flyWeightObj<br>        &#125;,<br>        <span class="hljs-attr">setExternalState</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">id, flyWeightObj</span>) &#123;<br>            <span class="hljs-keyword">var</span> uploadData = uploadDatabase[id]<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> uploadData) &#123;<br>                flyWeightObj[i] = uplaodData[i]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> id = <span class="hljs-number">0</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">startUpload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">uploadType, files</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, file; file = files[i++];) &#123;<br>        <span class="hljs-keyword">var</span> uploadObj = uploadManager.<span class="hljs-title function_">add</span>(++id, uploadType, file.<span class="hljs-property">fileName</span>, file.<span class="hljs-property">fileSize</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">startUpload</span>(<span class="hljs-string">&#x27;plugin&#x27;</span>, [<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;1.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;2.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">3000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;3.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">5000</span><br>    &#125;<br>])<br><span class="hljs-title function_">startUpload</span>(<span class="hljs-string">&#x27;flash&#x27;</span>, [<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;4.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">1000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;5.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">3000</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-attr">fileName</span>: <span class="hljs-string">&#x27;6.text&#x27;</span>,<br>        <span class="hljs-attr">fileSize</span>: <span class="hljs-number">5000</span><br>    &#125;<br>])<br></code></pre></td></tr></table></figure><h4 id="4、享元模式的适用性"><a href="#4、享元模式的适用性" class="headerlink" title="4、享元模式的适用性"></a>4、享元模式的适用性</h4><ul><li>一个程序中使用了大量的相似对象</li><li>由于使用了大量对象，造成很大的内存开销</li><li>对象的大多数状态可以变为外部状态</li><li>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</li></ul><h4 id="4、对象池"><a href="#4、对象池" class="headerlink" title="4、对象池"></a>4、对象池</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> toolTipFactory = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> toolTipPool = []<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">create</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span> (toolTipPool.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>                <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>                <span class="hljs-keyword">return</span> div<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> toolTipPool.<span class="hljs-title function_">shift</span>()<br>            &#125;<br>        &#125;,<br>        <span class="hljs-attr">recover</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">tooltipDom</span>) &#123;<br>            <span class="hljs-keyword">return</span> toolTipPool.<span class="hljs-title function_">push</span>(tooltipDom)<br>        &#125;<br>    &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> ary = []<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, str; str = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>][i+++];) &#123;<br>    <span class="hljs-keyword">var</span> toolTip = toolTipFactory.<span class="hljs-title function_">create</span>()<br>    toolTip.<span class="hljs-property">innerHTML</span> = str<br>    ary.<span class="hljs-title function_">push</span>(toolTip)<br>&#125;<br><br><span class="hljs-comment">// 地图重绘前把节点再收进对象池</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, toolTip; toolTip = ary[i++];) &#123;<br>    toolTipFactory.<span class="hljs-title function_">recover</span>(toolTip)<br>&#125;<br><br><span class="hljs-comment">// 再创建6个</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, str; str = [<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>][i++];) &#123;<br>    <span class="hljs-keyword">var</span> toolTip = toolTipFactory.<span class="hljs-title function_">create</span>()<br>    toolTip.<span class="hljs-property">innerHTML</span> = str<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、通用对象池实现"><a href="#4、通用对象池实现" class="headerlink" title="4、通用对象池实现"></a>4、通用对象池实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> objectPoolFactory = <span class="hljs-keyword">function</span> (<span class="hljs-params">createObjFn</span>) &#123;<br>    <span class="hljs-keyword">var</span> objectPool = []<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">create</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> obj = objectPool.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> ? createObjFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>) : objectPool.<span class="hljs-title function_">shift</span>()<br>        &#125;,<br>        <span class="hljs-attr">recover</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>            objectPool.<span class="hljs-title function_">push</span>(obj)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> iframeFactory = <span class="hljs-title function_">objectPoolFactory</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElment</span>(<span class="hljs-string">&#x27;iframe&#x27;</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(iframe)<br>    iframe.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        iframe.<span class="hljs-property">onload</span> = <span class="hljs-literal">null</span><br>        iframeFactory.<span class="hljs-title function_">recover</span>(iframe)<br>    &#125;<br>    <span class="hljs-keyword">return</span> iframe<br>&#125;)<br><br><span class="hljs-keyword">var</span> iframe1 = iframeFactory.<span class="hljs-title function_">create</span>()<br>iframe1.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://baidu.com&#x27;</span><br>j<br><span class="hljs-keyword">var</span> iframe2 = iframeFactory.<span class="hljs-title function_">create</span>()<br>iframe2.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://QQ.com&#x27;</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> iframe3 = iframeFactory.<span class="hljs-title function_">create</span>()<br>    iframe3.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;http://163.com&#x27;</span><br>&#125;, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p>对象池是另外一种性能优化方案，它和享元模式有一些相似之处，但没有分离内部状态和外部状态这个过程。前面文件上传的程序也可以用对象池+事件委托来代替实现。</p><h2 id="九、-职责链模式"><a href="#九、-职责链模式" class="headerlink" title="九、 职责链模式"></a>九、 职责链模式</h2><blockquote><p>职责链模式的定义是：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它为止。</p></blockquote><h4 id="1、职责链模式的实现"><a href="#1、职责链模式的实现" class="headerlink" title="1、职责链模式的实现"></a>1、职责链模式的实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> order500 = <span class="hljs-keyword">function</span>(<span class="hljs-params">orderType, pay, stock</span>) &#123;<br>    <span class="hljs-keyword">if</span> (orderType === <span class="hljs-number">1</span> &amp;&amp; pay === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;500元定金预购，得到100优惠券&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> order200 = <span class="hljs-keyword">function</span>(<span class="hljs-params">orderType, pay, stock</span>) &#123;<br>    <span class="hljs-keyword">if</span> (orderType === <span class="hljs-number">2</span> &amp;&amp; pay === <span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;200元定金预购，得到50优惠券&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> orderNormal = <span class="hljs-keyword">function</span>(<span class="hljs-params">orderType, pay, stock</span>) &#123;<br>    <span class="hljs-keyword">if</span> (stock &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;普通购买，无优惠券&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;手机库存不足&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Chain</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span> = fn<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Chain</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setNextSuccessor</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">successor</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> = successor<br>&#125;<br><span class="hljs-title class_">Chain</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">passRequest</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> ret = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    <span class="hljs-keyword">if</span> (ret === <span class="hljs-string">&#x27;nextSuccessor&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>.<span class="hljs-property">passRequest</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret<br>&#125;<br><br><span class="hljs-keyword">var</span> chainOrder500 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(order500)<br><span class="hljs-keyword">var</span> chainOrder200 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(order200)<br><span class="hljs-keyword">var</span> chainOrderNormal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(orderNormal)<br>chainOrder500.<span class="hljs-title function_">setNextSuccessor</span>(chainOrder200)<br>chainOrder200.<span class="hljs-title function_">setNextSuccessor</span>(chainOrderNormal)<br>chainOrder500.<span class="hljs-title function_">passRequest</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span>)<br>chainOrder500.<span class="hljs-title function_">passRequest</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span>)<br>chainOrder500.<span class="hljs-title function_">passRequest</span>(<span class="hljs-number">3</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span>)<br>chainOrder500.<span class="hljs-title function_">passRequest</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">var</span> order300 = funciton () &#123;<br><br>&#125;<br>chainOrder300 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(order300)<br>chainOrder500.<span class="hljs-title function_">setNextSuccessor</span>(chainOrder300)<br>chainOrder500.<span class="hljs-title function_">setNextSuccessor</span>(chainOrder200)<br></code></pre></td></tr></table></figure><h4 id="2、异步的职责链"><a href="#2、异步的职责链" class="headerlink" title="2、异步的职责链"></a>2、异步的职责链</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Chain</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">next</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>.<span class="hljs-property">passRequest</span>.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>, <span class="hljs-variable language_">arguments</span>)<br>&#125;<br><span class="hljs-keyword">var</span> fn1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span><br>&#125;)<br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        self.<span class="hljs-title function_">next</span>()<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;)<br><span class="hljs-keyword">var</span> fn3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>)<br>&#125;)<br>fn1.<span class="hljs-title function_">setNextSuccessor</span>(fn2).<span class="hljs-title function_">setNextSuccessor</span>(fn3)<br>fn1.<span class="hljs-title function_">passRequest</span>()<br></code></pre></td></tr></table></figure><h4 id="3、用AOP实现职责链"><a href="#3、用AOP实现职责链" class="headerlink" title="3、用AOP实现职责链"></a>3、用AOP实现职责链</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> ret = self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">if</span> (ret === <span class="hljs-string">&#x27;nextSuccessor&#x27;</span>) &#123;<br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> order = order500yuan.<span class="hljs-title function_">after</span>(order200yuan).<span class="hljs-title function_">after</span>(orderNormal)<br><span class="hljs-title function_">order</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span>)<br><span class="hljs-title function_">order</span>(<span class="hljs-number">2</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span>)<br><span class="hljs-title function_">order</span>(<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">500</span>)<br></code></pre></td></tr></table></figure><h4 id="4、用职责链模式获取文件上传对象"><a href="#4、用职责链模式获取文件上传对象" class="headerlink" title="4、用职责链模式获取文件上传对象"></a>4、用职责链模式获取文件上传对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> getActiveUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&#x27;TXFTNActiveX.FTNUpload&#x27;</span>)<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> getFlashUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (supportFlash) &#123;<br>        <span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;&lt;object type=&quot;application/x-shockwave-flash&quot;&gt;&lt;/object&gt;&#x27;</span><br>        <span class="hljs-keyword">return</span> $(str).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>))<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span><br>&#125;<br><span class="hljs-keyword">var</span> getFormUploadObj = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> $(<span class="hljs-string">&#x27;&lt;form&gt;&lt;input name=&quot;file&quot; type=&quot;file&quot; /&gt;&lt;/form&gt;&#x27;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&#x27;body&#x27;</span>))<br>&#125;<br><span class="hljs-keyword">var</span> getUploadObj = getActiveUplaodObj.<span class="hljs-title function_">after</span>(getFlashUploadObj).<span class="hljs-title function_">after</span>(getFormUploadObj)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">getUploadObj</span>())<br></code></pre></td></tr></table></figure><h2 id="十、-中介者模式"><a href="#十、-中介者模式" class="headerlink" title="十、 中介者模式"></a>十、 中介者模式</h2><p>中介者模式的作用就是解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者模式使网状的多对多关系变成了相对简单的一对多关系。</p><h4 id="1、泡泡堂游戏"><a href="#1、泡泡堂游戏" class="headerlink" title="1、泡泡堂游戏"></a>1、泡泡堂游戏</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Player</span> (name) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">enemy</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">win</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;won&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">lose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;lost&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">die</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">lose</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">enemy</span>.<span class="hljs-title function_">win</span>()<br>&#125;<br><span class="hljs-keyword">var</span> player1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(<span class="hljs-string">&#x27;小贰&#x27;</span>)<br><span class="hljs-keyword">var</span> player2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(<span class="hljs-string">&#x27;小柒&#x27;</span>)<br>player1.<span class="hljs-property">enemy</span> = player2<br>player2.<span class="hljs-property">enemy</span> = player1<br>player1.<span class="hljs-title function_">die</span>()<br></code></pre></td></tr></table></figure><h4 id="2、用中介者模式改造泡泡堂游戏"><a href="#2、用中介者模式改造泡泡堂游戏" class="headerlink" title="2、用中介者模式改造泡泡堂游戏"></a>2、用中介者模式改造泡泡堂游戏</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Player</span>(<span class="hljs-params">name, teamColor</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">teamColor</span> = teamColor<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;alive&#x27;</span><br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">win</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;won&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">lose</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;lose&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">die</span> = funtion () &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = <span class="hljs-string">&#x27;dead&#x27;</span><br>    playerDirector.<span class="hljs-title class_">ReceiveMessage</span>(<span class="hljs-string">&#x27;playerDead&#x27;</span>, <span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">remove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    playerDirector.<span class="hljs-title class_">ReceiveMessage</span>(<span class="hljs-string">&#x27;removePlayer&#x27;</span>, <span class="hljs-variable language_">this</span>)<br>&#125;<br><span class="hljs-title class_">Player</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">changeTeam</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    playerDirector.<span class="hljs-title class_">ReceiveMessage</span>(<span class="hljs-string">&#x27;changeTeam&#x27;</span>, <span class="hljs-variable language_">this</span>, color)<br>&#125;<br><span class="hljs-keyword">var</span> playerFactory = <span class="hljs-keyword">function</span> (<span class="hljs-params">name, teamColor</span>) &#123;<br>    <span class="hljs-keyword">var</span> newPlayer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>(name, teamColor)<br>    playerDirector.<span class="hljs-title class_">ReceiveMessage</span>(<span class="hljs-string">&#x27;addPlayer&#x27;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Player</span>)<br>    <span class="hljs-keyword">return</span> newPlayer<br>&#125;<br><span class="hljs-keyword">var</span> playerDirector = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> players = &#123;&#125;,<br>    oprations = &#123;&#125;<br>    oprations.<span class="hljs-property">addPlayer</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player</span>) &#123;<br>        <span class="hljs-keyword">var</span> teamColor = player.<span class="hljs-property">teamColor</span><br>        players[teamColor] = players[teamColor] || []<br>        players[teamColor].<span class="hljs-title function_">push</span>(player)<br>    &#125;<br>    oprations.<span class="hljs-property">removePlayer</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player</span>) &#123;<br>        <span class="hljs-keyword">var</span> teamColor = player.<span class="hljs-property">teamColor</span>,<br>        teamPlayers = players[teamColor] || []<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = teamPlayer.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (teamPlayer[i] === player) &#123;<br>                teamPlayers.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br>    oprations.<span class="hljs-property">changeTeam</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player, newTeamColor</span>) &#123;<br>        oprations.<span class="hljs-title function_">removePlayer</span>(player)<br>        player.<span class="hljs-property">teamColor</span> = newTeamColor<br>        oprations.<span class="hljs-title function_">addPlayer</span>(player)<br>    &#125;<br>    oprations.<span class="hljs-property">playerDead</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player</span>) &#123;<br>        <span class="hljs-keyword">var</span> teamColor = player.<span class="hljs-property">teamColor</span>,<br>        teamPlayers = players[teamColor]<br>        <span class="hljs-keyword">var</span> all_dead = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, player; player = teamPlayers[i++];) &#123;<br>            <span class="hljs-keyword">if</span> (player.<span class="hljs-property">state</span> !== <span class="hljs-string">&#x27;dead&#x27;</span>) &#123;<br>                all_dead = <span class="hljs-literal">false</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (all_dead === <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, player; player = teamPlayers[i++];) &#123;<br>                player.<span class="hljs-title function_">lose</span>()<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> color <span class="hljs-keyword">in</span> players) &#123;<br>                <span class="hljs-keyword">if</span> (color !== teamColor) &#123;<br>                    <span class="hljs-keyword">var</span> teamPlayers = palyers[color]<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>,player; player = teamPlayers[i++];) &#123;<br>                        player.<span class="hljs-title function_">win</span>()<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">ReceiveMessage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> message = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>        operations[message].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title class_">ReceiveMessage</span>: <span class="hljs-title class_">ReceiveMessage</span><br>    &#125;<br>&#125;)()<br><br><span class="hljs-keyword">var</span> player1 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小贰1&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>),<br>    player2 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小贰2&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>),<br>    player3 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小贰3&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>),<br>    player4 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小贰4&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)<br><br><span class="hljs-keyword">var</span> player5 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小柒1&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>),<br>    player6 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小柒2&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>),<br>    player7 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小柒3&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>),<br>    player8 = <span class="hljs-title function_">playerFactory</span>(<span class="hljs-string">&#x27;小柒4&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>)<br><br><span class="hljs-comment">// test1</span><br>player1.<span class="hljs-title function_">die</span>()<br>player2.<span class="hljs-title function_">die</span>()<br>player3.<span class="hljs-title function_">die</span>()<br>palyer4.<span class="hljs-title function_">die</span>()<br><span class="hljs-comment">// test2</span><br>player1.<span class="hljs-title function_">remove</span>()<br>player2.<span class="hljs-title function_">remove</span>()<br>player3.<span class="hljs-title function_">die</span>()<br>palyer4.<span class="hljs-title function_">die</span>()<br><span class="hljs-comment">// test3</span><br>player1.<span class="hljs-title function_">changeTeam</span>(<span class="hljs-string">&#x27;blue&#x27;</span>)<br>player2.<span class="hljs-title function_">die</span>()<br>player3.<span class="hljs-title function_">die</span>()<br>palyer4.<span class="hljs-title function_">die</span>()<br></code></pre></td></tr></table></figure><h4 id="3、中介者模式——购买商品"><a href="#3、中介者模式——购买商品" class="headerlink" title="3、中介者模式——购买商品"></a>3、中介者模式——购买商品</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> goods = &#123;<br>    <span class="hljs-string">&quot;red|32G&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&quot;red|16G&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;blue|32G&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;blue|16G&quot;</span>: <span class="hljs-number">6</span><br>&#125;<br><span class="hljs-keyword">var</span> mediator = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> colorSelect = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;colorSelect&#x27;</span>),<br>        memorySelect = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;memorySelect&#x27;</span>),<br>        numberInput = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;numberInput&#x27;</span>),<br>        colorInfo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;colorInfo&#x27;</span>),<br>        memoryInfo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;memoryInfo&#x27;</span>),<br>        numberInfo = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;numberInfo&#x27;</span>),<br>        nextBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;nextBtn&#x27;</span>)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">changed</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>            <span class="hljs-keyword">var</span> color = colorSelect.<span class="hljs-property">value</span>,<br>                memory = memorySelect.<span class="hljs-property">value</span>,<br>                stock = goods[color + <span class="hljs-string">&#x27;|&#x27;</span> + memory]<br>            <span class="hljs-keyword">if</span> (obj === colorSelect) &#123;<br>                colorInfo.<span class="hljs-property">innerHTML</span> = color<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj === memorySelect) &#123;<br>                memoryInfo.<span class="hljs-property">innerHTML</span> = memory<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (obj === numberInput) &#123;<br>                numberInfo.<span class="hljs-property">innerHTML</span> = number<br>            &#125;<br>            <br>            <span class="hljs-keyword">if</span> (!color) &#123;<br>                nextBtn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span><br>                nextBtn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;请选择手机颜色&#x27;</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (!memory) &#123;<br>                nextBtn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span><br>                nextBtn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;请选择内存大小&#x27;</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(number - <span class="hljs-number">0</span>) &amp;&amp; nubmer &gt; <span class="hljs-number">0</span>) &#123;<br>                nextBtn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">true</span><br>                nextBtn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;请输入正确的购买数量&#x27;</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            nextBtn.<span class="hljs-property">disabled</span> = <span class="hljs-literal">false</span><br>            nextBtn.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;放入购物车&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)()<br><br>colorSelect.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    mediator.<span class="hljs-title function_">changed</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br>memorySelect.<span class="hljs-property">onchange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    mediator.<span class="hljs-title function_">changed</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br>numberInput.<span class="hljs-property">oninput</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    mediator.<span class="hljs-title function_">changed</span>(<span class="hljs-variable language_">this</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十一、-装饰者模式"><a href="#十一、-装饰者模式" class="headerlink" title="十一、 装饰者模式"></a>十一、 装饰者模式</h2><blockquote><p>给对象动态地增加职责的方式成为装饰者模式。</p></blockquote><p>装饰者模式能够在不改变对象自身的基础上，在程序运行期间给对象动态地添加职责。是一种”即用即付”的方式，比继承更轻便灵活。</p><h4 id="1、传统的面向对象语言的装饰者模式"><a href="#1、传统的面向对象语言的装饰者模式" class="headerlink" title="1、传统的面向对象语言的装饰者模式"></a>1、传统的面向对象语言的装饰者模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Plane</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;<br><span class="hljs-title class_">Plane</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fire</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发射普通子弹&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">MissieDecorator</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">plane</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">plane</span> = plane<br>&#125;<br><span class="hljs-title class_">MissileDecorator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fire</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">plane</span>.<span class="hljs-title function_">fire</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发射导弹&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">AtomDecorator</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">plane</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">plane</span> = plane<br>&#125;<br><span class="hljs-title class_">AtomDecorator</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">fire</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">plane</span>.<span class="hljs-title function_">fire</span>()<br>    conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发射原子弹&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> plane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Plane</span>()<br>plane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MissileDecorator</span>(plane)<br>plane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomDecorator</span>(plane)<br>plane.<span class="hljs-title function_">fire</span>()<br></code></pre></td></tr></table></figure><h4 id="2、JavaScript的装饰者模式"><a href="#2、JavaScript的装饰者模式" class="headerlink" title="2、JavaScript的装饰者模式"></a>2、JavaScript的装饰者模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> plane = &#123;<br>    <span class="hljs-attr">fire</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发射普通子弹&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> missileDecorator = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发射导弹&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> atomDecorator = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;发射原子弹&#x27;</span>)<br>&#125;<br><span class="hljs-keyword">var</span> fire1 = plane.<span class="hljs-property">fire</span><br>plane.<span class="hljs-property">fire</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fire1</span>()<br>    <span class="hljs-title function_">missileDecorator</span>()<br>&#125;<br><span class="hljs-keyword">var</span> fire2 = plane.<span class="hljs-property">fire</span><br>plane.<span class="hljs-property">fire</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">fire2</span>()<br>    <span class="hljs-title function_">atomDecorator</span>()<br>&#125;<br>plane.<span class="hljs-title function_">fire</span>()<br></code></pre></td></tr></table></figure><h4 id="3、用AOP装饰函数"><a href="#3、用AOP装饰函数" class="headerlink" title="3、用AOP装饰函数"></a>3、用AOP装饰函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">beforefn</span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        beforefn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">afterfn</span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> ret = self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        afterfn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、用AOP动态改变函数的参数"><a href="#4、用AOP动态改变函数的参数" class="headerlink" title="4、用AOP动态改变函数的参数"></a>4、用AOP动态改变函数的参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> ajax = <span class="hljs-keyword">function</span> (<span class="hljs-params">type, url, param</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(param)<br>&#125;<br><span class="hljs-keyword">var</span> getToken = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Token&#x27;</span><br>&#125;<br>ajax = ajax.<span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">type, url, param</span>) &#123;<br>    param.<span class="hljs-property">Token</span> = <span class="hljs-title function_">getToken</span>()<br>&#125;)<br><span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&#x27;http://xxx.com/userinfo&#x27;</span>, &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure><h4 id="5、插件式表单验证"><a href="#5、插件式表单验证" class="headerlink" title="5、插件式表单验证"></a>5、插件式表单验证</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">beforefn</span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (beforefn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> validata = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (username.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;用户名不能为空&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (password.<span class="hljs-property">value</span> === <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;密码不能为空&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> formSubmit = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> param = &#123;<br>        <span class="hljs-attr">username</span>: username.<span class="hljs-property">value</span>,<br>        <span class="hljs-attr">password</span>: password.<span class="hljs-property">value</span><br>    &#125;<br>    <span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;http://xxx.com/login&#x27;</span>, parm)<br>&#125;<br>formSubmit = formSubmit.<span class="hljs-title function_">before</span>(validata)<br>submitBtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">formSubmit</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="十二、-状态模式"><a href="#十二、-状态模式" class="headerlink" title="十二、 状态模式"></a>十二、 状态模式</h2><blockquote><p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p></blockquote><p>状态模式的关键是区分事物内部的状态，事物内部状态的改变往往会带来事物的行为的改变。</p><h4 id="1、-状态模式例子——电灯程序"><a href="#1、-状态模式例子——电灯程序" class="headerlink" title="1、 状态模式例子——电灯程序"></a>1、 状态模式例子——电灯程序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">OffLightState</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">light</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span> = light<br>&#125;<br><span class="hljs-title class_">OffLightState</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">buttonWasPressed</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;弱光&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-property">weakLightState</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">WeakLightState</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">light</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span> = light<br>&#125;<br><span class="hljs-title class_">WeakLightState</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">buttonWasPressed</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;强光&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-property">strongLightState</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">StrongLightState</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">light</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span> = light<br>&#125;<br><span class="hljs-title class_">StrongLightState</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">buttonWasPressed</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关灯&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-title function_">setState</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-property">offLightState</span>)<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Light</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">offLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OffLightState</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">weakLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakLightState</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">strongLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrongLightState</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Light</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;button&#x27;</span>),<br>        self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(button)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-title function_">innerHTML</span>(<span class="hljs-string">&#x27;开关&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">offLightState</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        self.<span class="hljs-property">currState</span>.<span class="hljs-title function_">buttonWasPressed</span>()<br>    &#125;<br>&#125;<br><span class="hljs-title class_">Light</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setState</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">newState</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = newState<br>&#125;<br><span class="hljs-keyword">var</span> light = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>()<br>light.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><h4 id="2、-JavaScript的状态模式——电灯程序"><a href="#2、-JavaScript的状态模式——电灯程序" class="headerlink" title="2、 JavaScript的状态模式——电灯程序"></a>2、 JavaScript的状态模式——电灯程序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 把变量保存为对象的属性</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Light</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable constant_">FSM</span>.<span class="hljs-property">off</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Light</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;button&#x27;</span>),<br>        self = <span class="hljs-variable language_">this</span><br>    button.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;已关灯&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(button)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        self.<span class="hljs-property">currState</span>.<span class="hljs-property">buttonWasPressed</span>.<span class="hljs-title function_">call</span>(self)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">FSM</span> = &#123;<br>    <span class="hljs-attr">off</span>: &#123;<br>        <span class="hljs-attr">buttonWasPressed</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关灯&#x27;</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;下一次按我是开灯&#x27;</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable constant_">FSM</span>.<span class="hljs-property">on</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">on</span>: &#123;<br>        <span class="hljs-attr">buttonWasPressed</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开灯&#x27;</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;下一次按我是关灯&#x27;</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable constant_">FSM</span>.<span class="hljs-property">off</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> light = nwe <span class="hljs-title class_">Light</span>()<br>light.<span class="hljs-title function_">init</span>()<br><br><span class="hljs-comment">// 把变量封闭在闭包形成的环境中</span><br><span class="hljs-keyword">var</span> delegate =  <span class="hljs-keyword">function</span> (<span class="hljs-params">client, delegation</span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">buttonWasPressed</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> delegation.<span class="hljs-property">buttonWasPressed</span>.<span class="hljs-title function_">apply</span>(client, <span class="hljs-variable language_">arguments</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-variable constant_">FSM</span> = &#123;<br>    <span class="hljs-attr">off</span>: &#123;<br>        <span class="hljs-attr">buttonWasPressed</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;关灯&#x27;</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;下一次按我是开灯&#x27;</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">onState</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">on</span>: &#123;<br>        <span class="hljs-attr">buttonWasPressed</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            conosle.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开灯&#x27;</span>)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;下一次按我是关灯&#x27;</span><br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offState</span><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Light</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">offState</span> = <span class="hljs-title function_">delegate</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable constant_">FSM</span>.<span class="hljs-property">off</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">onState</span> = <span class="hljs-title function_">delegate</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable constant_">FSM</span>.<span class="hljs-property">on</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offState</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-literal">null</span><br>&#125;<br><span class="hljs-title class_">Light</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;button&#x27;</span>),<br>        self = <span class="hljs-variable language_">this</span><br>    button.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;已关灯&#x27;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(button)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        self.<span class="hljs-property">currState</span>.<span class="hljs-title function_">buttonWasPressed</span>()<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> light = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>()<br>light.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><h2 id="十三、-适配器模式"><a href="#十三、-适配器模式" class="headerlink" title="十三、 适配器模式"></a>十三、 适配器模式</h2><p>适配器模式的作用是解决两个软件实体间的接口不兼容的问题。使用适配器模式之后，原本由于接口不兼容而不能工作的两个软件实体可以一起工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 例子1</span><br><span class="hljs-keyword">var</span> googleMap = &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始渲染谷歌地图&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> baiduMap = &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始渲染百度地图&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> renderMap = <span class="hljs-keyword">function</span> (<span class="hljs-params">map</span>) &#123;<br>    <span class="hljs-keyword">if</span> (map.<span class="hljs-property">show</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Function</span>) &#123;<br>        map.<span class="hljs-title function_">show</span>()<br>    &#125;<br>&#125;<br><span class="hljs-title function_">renderMap</span>(googleMap)<br><span class="hljs-title function_">renderMap</span>(baiduMap)<br><br><span class="hljs-comment">// 适配模式解决不兼容</span><br><span class="hljs-keyword">var</span> googleMap = &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始渲染谷歌地图&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> baiduMap = &#123;<br>    <span class="hljs-attr">display</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;开始渲染百度地图&#x27;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> baiduMapAdapter = &#123;<br>    <span class="hljs-attr">show</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> baiduMap.<span class="hljs-title function_">display</span>()<br>    &#125;<br>&#125;<br><span class="hljs-title function_">renderMap</span>(googleMap)<br><span class="hljs-title function_">renderMap</span>(baiduMapAdapter)<br></code></pre></td></tr></table></figure><p>(摘自: JavaScript设计模式与实践)</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入JavaScript原型链笔记</title>
    <link href="/2020/04/21/%E6%B7%B1%E5%85%A5JavaScript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2020/04/21/%E6%B7%B1%E5%85%A5JavaScript%E4%B9%8B%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="一、对象属性"><a href="#一、对象属性" class="headerlink" title="一、对象属性"></a>一、对象属性</h1><blockquote><p>ECMAScript中有两种属性：数据属性和访问器属性</p></blockquote><h2 id="1、数据属性"><a href="#1、数据属性" class="headerlink" title="1、数据属性"></a>1、数据属性</h2><blockquote><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。</p></blockquote><p>数据属性有4个描述其行为的特性：</p><ul><li>[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认值为true。</li><li>[[Enumerable]]：表示能否通过<code>for-in</code>循环返回属性。默认值为true。</li><li>[[Writable]]：表示能否修改属性对数据值。默认值为true。</li><li>[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。默认值为undefined。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这里创建了一个名为name的属性，值为“Jason”。也就是说[[Value]]特性将被设置为“Jason”，而[[Configurable]]、[[Enumerable]]、[[Writable]]特性默认被设置为true。</p><span id="more"></span><p><code>Object.defineProperty()</code>方法可以修改属性默认的特性。这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&quot;name&quot;</span>, &#123;<br>  <span class="hljs-attr">writable</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Jason&#x27;</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot;</span><br>pperson.<span class="hljs-property">name</span> =  <span class="hljs-string">&#x27;chenyajie&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot;</span><br></code></pre></td></tr></table></figure><p>这个例子创建了一个名为name的属性，其值“Jason”是只读的。这个属性的值是不可修改的，如果尝试为它指定新值，则在非严格模式下，赋值操作将被忽略；在严格模式下，赋值操作将会导致抛出错误。</p><p>同理，把configurable设置为false，表示不能从对象中删除属性。如果对这个属性调用delete，则在非严格模式下什么也不会发生，而在严格模式下会导致错误。而且，<strong>一旦把属性定义为不可配置对，就不能再把它变回可配置了。</strong>此时，再调用Object.defineProperty()方法修改除writable之外的特性，都会导致错误。</p><h2 id="2、访问器属性"><a href="#2、访问器属性" class="headerlink" title="2、访问器属性"></a>2、访问器属性</h2><blockquote><p>访问器属性不包含数据值；它们包含一对<code>getter</code>和<code>setter</code>函数(不过，这两个函数都不是必须的)。在读取访问器属性时，会调用getter函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter函数并传入新值，这个函数负责决定和如何处理数据。</p></blockquote><p>访问器属性有如下4个特性：</p><ul><li>[[Configurable]]：表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。默认值为true。</li><li>[[Enumerable]]：表示能否通过<code>for-in</code>循环返回属性。默认值为true。</li><li>[[Get]]：在读取属性时调用的函数。默认值为undefined。</li><li>[[Set]]：在写入属性时调用的函数。默认值为undefined。</li></ul><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">28</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;<br>  <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span><br>  &#125;,<br>  <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>) &#123;<br>    <span class="hljs-keyword">if</span> (newValue &gt; <span class="hljs-number">30</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">30</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;陈大叔&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;)<br><br>person.<span class="hljs-property">age</span> = <span class="hljs-number">31</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>) <span class="hljs-comment">// “陈大叔”</span><br></code></pre></td></tr></table></figure><p>这里创建了一个person对象，并给它定义两个默认的属性：name和age。访问器属性age包含一个getter函数和一个setter函数。getter函数返回age的值，setter函数通过计算来确定正确的版本。因此，把age属性修改为31会导致age变成30，而name变为“陈大叔”。这是使用访问器属性的常见方式，即设置一个属性的值会导致其他属性发生变化。</p><p>注意：不一定非要同时指定getter和setter。只指定getter意味着属性是不能写，尝试写入属性会被忽略。类似地，只指定setter函数的属性也不能读。</p><h2 id="3、定义多个属性"><a href="#3、定义多个属性" class="headerlink" title="3、定义多个属性"></a>3、定义多个属性</h2><blockquote><p>利用<code>Object.defineProperties()</code>方法可以通过描述符一次定义多个属性，这个方法接收两个对象参数：第一个对象是要添加和修改其属性的对象，第二个对象的属性与第一个对象中要添加或修改的属性一一对应。</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(person, &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">writable</span>: ture,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Jason&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">__age</span>: &#123;<br>    <span class="hljs-attr">writable</span>: ture,<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">28</span><br>  &#125;,<br>  <span class="hljs-attr">age</span>: &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">__age</span><br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>) &#123;<br>      <span class="hljs-keyword">if</span> (newValue &gt; <span class="hljs-number">30</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">__age</span> = <span class="hljs-number">30</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;陈大叔&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>以上代码在person对象上定义了两个数据属性(name和__age)和一个访问器属性(age)，这里的属性都是在同一时间创建的。</p><h2 id="4、读取属性的特性"><a href="#4、读取属性的特性" class="headerlink" title="4、读取属性的特性"></a>4、读取属性的特性</h2><blockquote><p>利用<code>Object.getOwnPropertyDescriptor()</code>方法可以取得给定属性的描述符。这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable、enmumerable、get和set；如果是数据属性，这个对象的属性有：configurable、enmumerable、writable和value。</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(person, &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Jason&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">__age</span>: &#123;<br>    <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">value</span>: <span class="hljs-number">28</span><br>  &#125;,<br>  <span class="hljs-attr">age</span>: &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">__age</span><br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>) &#123;<br>      <span class="hljs-keyword">if</span> (newValue &gt; <span class="hljs-number">30</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">__age</span> = <span class="hljs-number">30</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;陈大叔&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br><br><span class="hljs-keyword">var</span> descriptor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(person, <span class="hljs-string">&#x27;__age&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor.<span class="hljs-property">value</span>) <span class="hljs-comment">// 28</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor.<span class="hljs-property">configurable</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> descriptor.<span class="hljs-property">get</span>) <span class="hljs-comment">// undefined</span><br><br><span class="hljs-keyword">var</span> descriptor = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(person, <span class="hljs-string">&#x27;age&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor.<span class="hljs-property">value</span>) <span class="hljs-comment">// undefined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(descriptor.<span class="hljs-property">enumerable</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> descriptor.<span class="hljs-property">get</span>) <span class="hljs-comment">// function</span><br></code></pre></td></tr></table></figure><h1 id="二、创建对象"><a href="#二、创建对象" class="headerlink" title="二、创建对象"></a>二、创建对象</h1><h2 id="1、工厂模式"><a href="#1、工厂模式" class="headerlink" title="1、工厂模式"></a>1、工厂模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createPerson</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>  o.<span class="hljs-property">name</span> = name<br>  o.<span class="hljs-property">age</span> = age<br>  o.<span class="hljs-property">job</span> = job<br>  o.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> o<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-title function_">createPerson</span>(<span class="hljs-string">&#x27;ChenYajie&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Android Software Engineer&#x27;</span>)<br></code></pre></td></tr></table></figure><p>缺点：工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题(即怎样知道一个对象的类型)。</p><h2 id="2、构造函数模式"><a href="#2、构造函数模式" class="headerlink" title="2、构造函数模式"></a>2、构造函数模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;ChenYajie&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Android Software Engineer&#x27;</span>)<br></code></pre></td></tr></table></figure><p>除了与createPerson相同的部分外，还存在以下不同：</p><ul><li>没有显示地创建对象</li><li>直接将属性和方法赋给了this对象</li><li>没有return语句</li></ul><p>要创建Person的新示例，必须使用new操作符。以这种方式调用构造函数实际上会经历以下4个步骤：</p><ol><li>创建一个对象</li><li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新对象</li></ol><p>person1和person2分别保存着Person的一个不同的示例，这两个对象都有一个constructtor（构造函数）属性，该属性指向Person，通过以下代码可以证明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>)  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>检测对象类型，还是用<code>instanceof</code>操作符要更可靠一些。这个例子中，创建的所有对象既是Object的实例，同时也是Person的实例，这一点通过instanceof操作符可以得到验证：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>)  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2 <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Person</span>)  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>创建自定义的构造函数意味着将来可以将它的实例标识为一种特定的类型；而这正是构造函数模式胜过工厂模式的地方。</p><p>存在的缺点： person1和person2都有一个名为introduceMyself()的方法，但那两个方法不是同一个Function的实例。ECMAScript中的函数是对象，因此每定义一个函数，也就是实例化了一个对象。从逻辑角度讲，此时的构造函数是这样定义的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>(<span class="hljs-string">&quot;console.log(&#x27;My name is &#x27; + this.name + &#x27;, &#x27; + this.age + &#x27; years old now, a &#x27; + this.job)&quot;</span>) <span class="hljs-comment">// 与声明函数在逻辑上是等价的</span><br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;ChenYajie&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Android Software Engineer&#x27;</span>)<br><br><span class="hljs-comment">// 以下代码可以证明这一点</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">introduceMyself</span> == person2.<span class="hljs-property">introduceMyself</span>)  <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>优化方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">introduceMyself</span> = introduceMyself<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">introduceMyself</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;ChenYajie&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Android Software Engineer&#x27;</span>)<br> <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">introduceMyself</span> == person2.<span class="hljs-property">introduceMyself</span>)  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>这样，我们把introduceMyself()函数的定义转移到了构造函数外部，而在构造函数内部，我们将introduceMyself属性设置成等于全局的introduceMyself函数。这样一来，由于introduceMyself包含的是一个指向函数的指针，因此person1和person2对象就共享了在全局作用域中定义的同一个introduceMyself函数。</p><p>还存在缺点：在全局作用域中定义的函数实际上只能被某个对象调用，这让全局作用域有点名不副实。而更糟糕的是：如果对象需要定义很多方法，那么就要定义很多个全局函数，于是我们这个自定义的引用类型就丝毫没有封装性可言了。</p><p>好在可以通过使用原型模式来解决。</p><h2 id="3、原型模式"><a href="#3、原型模式" class="headerlink" title="3、原型模式"></a>3、原型模式</h2><blockquote><p>我们创建的每一个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。即prototype就是通过调用构造函数而创建的那个对象实例的原型对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Jason&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">28</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">job</span> = <span class="hljs-string">&#x27;Software Engineer&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>person1.<span class="hljs-title function_">introduceMyself</span>()<br><br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br>person1.<span class="hljs-title function_">introduceMyself</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">introduceMyself</span> == person2.<span class="hljs-property">introduceMyself</span>)  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>与构造函数不同的是：新对象的这些属性和方法是由所有实例共享的。换句话说，person1和person2访问的都是同一组属性和同一个introduceMyself()函数。</p><p>要理解原型模式的工作原理，必须先理解ECMAScript中原型对象的性质。</p><h3 id="i、理解原型对象"><a href="#i、理解原型对象" class="headerlink" title="i、理解原型对象"></a>i、理解原型对象</h3><blockquote><p>无论何时，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数的原型对象。默认情况下，所有原型对象都会自动获得一个constructor（构造函数）属性，这个属性是一个指向prototype属性所在函数的指针。<br>创建了自定义的构造函数之后，其原型对象默认只会取得constructor属性；至于其他方法，则都是从Object继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部属性），指向构造函数的原型对象。</p></blockquote><p>以上面使用Person构造函数和Person.prototype创建实例的代码为例，图二-1展示了各个对象之间的关系。</p><p> <img src="/images/prototype/prototype_1.jpg" alt="图二-1"></p> <p style="text-align: center;">图二-1</p><p>Person的每个实例——person1和person2都包含一个内部属性，该属性仅仅指向了Person.prototype；换句话说，它们与构造函数没有直接的关系。要格外注意的是，虽然这两个实例都不包含属性和方法，但我们却可以调用person1.introduceMyself()。这是通过查找对象属性的过程来实现的。</p><p>在图二-1中，实例的内部属性[[Prototype]]与构造函数的原型对象Person.prototype之间的这种关系，可通过<code>isPrototypeOf()</code>方法来验证,如果[[Prototype]]指向isPrototypeOf()方法的对象（Person.prototype），那么这个方法就返回true：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(person1))  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(person2))   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>另外，<code>Object.getPrototypeOf()</code>可以获取对象的原型：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(person1) == <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)  <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getPrototypeOf</span>(person1).<span class="hljs-property">name</span>)   <span class="hljs-comment">// “Jason”</span><br></code></pre></td></tr></table></figure><p>每当代码读取某个对象的某个属性时，都会执行一次搜索，目标是具有给定名字的属性。搜索首先从对象实例本身开始，如果在实例中找到了具有给定名字的属性，则返回该属性的值；如果没有找到，则继续搜索指针指向的原型对象，在原型对象中查找具有给定名字的属性。如果在原型对象中找到了这个属性，则返回该属性的值。</p><p>也就是说，在我们调用person1.introduceMyself()的时候，会先后执行两次搜索。首先，解析器会问：“实例person1有introduceMyself属性吗 ？” 答：“没有。” 然后，它继续搜索，再问：“person1的原型有introduceMyself属性吗？” 答：“有。” 于是，他就读取那个保存在原型对象中的函数。当我们调用person2.introduceMyself时，将会重现相同的搜索过程，得到相同的结果。而这正是多个对象实例共享原型所保存的属性和方法的基本原理。</p><p>注意：虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Jason&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">28</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">job</span> = <span class="hljs-string">&#x27;Software Engineer&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br>person1.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;ChenYajie&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;ChenYajie&quot; ——来自实例</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot; ——来自原型</span><br></code></pre></td></tr></table></figure><p>当为对象实例添加一个属性时，这个属性就会<strong>屏蔽</strong>原型对象中保存当同名属性；换句话说，添加这个属性只会阻止我们访问原型中的那个属性，但不会修改那个属性。不过，使用delete操作符则可以完全删除实例属性，从而让我们能够冲洗你访问原型中的属性，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Jason&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">28</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">job</span> = <span class="hljs-string">&#x27;Software Engineer&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br>person1.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;ChenYajie&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;ChenYajie&quot; ——来自实例</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot; ——来自原型</span><br><br><span class="hljs-keyword">delete</span> person1.<span class="hljs-property">name</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot; ——来自原型</span><br></code></pre></td></tr></table></figure><p>使用<code>hasOwnProperty()</code>方法可以检测一个属性是存在于实例中，还是存在于原型中。这个方法（Object继承来的）只在给定属性存在于对象实例中，才会返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Jason&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">age</span> = <span class="hljs-number">28</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">job</span> = <span class="hljs-string">&#x27;Software Engineer&#x27;</span><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>()<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>)) <span class="hljs-comment">// false</span><br><br>person1.<span class="hljs-property">name</span> = <span class="hljs-string">&quot;ChenYajie&quot;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;ChenYajie&quot; ——来自实例</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>)) <span class="hljs-comment">// true</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot; ——来自原型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>)) <span class="hljs-comment">// false</span><br><br><span class="hljs-keyword">delete</span> person1.<span class="hljs-property">name</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot; ——来自原型</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-title function_">hasOwnProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>)) <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>下图展示了上面例子在不同情况下的实现与原型的关系（为了简单期间，图中省略了与Person构造函数的关系）：</p><p>Initially</p><p> <img src="/images/prototype/prototype_2.jpg" alt="图二-2"></p> <p style="text-align: center;">图二-2</p><p> Person.name&#x3D;”ChenYajie”</p><p> <img src="/images/prototype/prototype_3.jpg" alt="图二-3"></p> <p style="text-align: center;">图二-3</p><p> delete person1.name</p><p> <img src="/images/prototype/prototype_2.jpg" alt="图二-4"></p> <p style="text-align: center;">图二-4</p><h3 id="ii、原型与in操作符"><a href="#ii、原型与in操作符" class="headerlink" title="ii、原型与in操作符"></a>ii、原型与in操作符</h3><blockquote><p>有两种方式使用in操作符：单独使用和在<code>for-in</code>循环中使用。在单独使用时，in操作符会在通过对象能够访问给定属性时返回true，<strong>无论该属性存在于实例中还是原型中</strong>。</p></blockquote><p>判断属性存在于对象中还是存在于原型中，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hasPrototypeProperty</span>(<span class="hljs-params">object, name</span>) &#123;<br>  <span class="hljs-keyword">return</span> !object.<span class="hljs-title function_">hasOwnProperty</span>(name) &amp;&amp; (name <span class="hljs-keyword">in</span> object)<br>&#125;<br></code></pre></td></tr></table></figure><p>由于in操作符只要通过对象能够访问到属性就返回true，hasOwnProperty()只在属性存在于实例中时才返回true，因此只要in操作符返回true而hasOwnProperty()返回false，就可以确定属性时原型中的属性。</p><p>在使用for-in循环时，返回的是所有能够通过对象访问的、可枚举(enumerated)属性，其中既包括存在于实例中的属性，也包括存在于原型中的属性。屏蔽了原型中不可枚举属性（即将[[Enumerable]]标记为false的属性）的实例属性也会在for-in循环中返回哦，因为根据规定，所有开发人员定义的属性都是可枚举的——只有在IE8及更早版本中例外。</p><p>要取得对象上所有可枚举的实例属性，可以使用<code>EMCMAScript5的Object.keys()</code>方法。这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。</p><p>如果想要得到所有实例属性，无论它是否可枚举，都可以使用<code>Object.getOwnPropertyNames()</code>方法。（结果包含了不可枚举的constructor属性）</p><h3 id="iii、更简单的原型语法"><a href="#iii、更简单的原型语法" class="headerlink" title="iii、更简单的原型语法"></a>iii、更简单的原型语法</h3><p>前面例子中每添加一个属性和方法就要敲一遍Person.prototype。为减少不必要的输入每，也为了从视觉上更好地封装原型的功能，更常见的方法是用一个包含所有属性和方法的对象字面量来重写整个原型对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>  <span class="hljs-attr">constructor</span>: <span class="hljs-title class_">Person</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br>  <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;Software Engineer&#x27;</span>,<br>  <span class="hljs-attr">introduceMyself</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码特意包含了一个constructor属性，并将它的值设置为Person，从而确保了通过该属性能能够访问到适当的值。但是，以这种方式重设constructor属性会导致它的[[Enumerable]]特性被设置为true。默认情况下，原生的constructor属性是不可枚举的，因此如果你使用兼容ECMAScript5的JavaScript引擎，可以试一试Object.defineProperty()。如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params"></span>) &#123;&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">28</span>,<br>  <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;Software Engineer&#x27;</span>,<br>  <span class="hljs-attr">introduceMyself</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 重设构造函数，只适用于ECMAScript5兼容的浏览器</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(<span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, <span class="hljs-string">&#x27;construcotr&#x27;</span>, &#123;<br>  <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">false</span>,<br>  <span class="hljs-attr">value</span>: <span class="hljs-title class_">Person</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="iv、原型对象的问题"><a href="#iv、原型对象的问题" class="headerlink" title="iv、原型对象的问题"></a>iv、原型对象的问题</h3><p> 原型模式也不是没有缺点：</p><ul><li>它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。</li><li>最大的问题是：原型中所有属性是被很多实例共享的，这种共享对于函数非常合适，对于那些包含基本值但属性倒也说的过去，毕竟通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，对于包含引用类型值的属性来说，问题就比较突出了。</li></ul><h2 id="4、组合使用构造函数模式和原型模式"><a href="#4、组合使用构造函数模式和原型模式" class="headerlink" title="4、组合使用构造函数模式和原型模式"></a>4、组合使用构造函数模式和原型模式</h2><blockquote><p>创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">ageg</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span> = [<span class="hljs-string">&#x27;WuHangxuan&#x27;</span>, <span class="hljs-string">&#x27;Heby&#x27;</span>]<br>&#125;<br><br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = &#123;<br>  <span class="hljs-attr">constructor</span>: <span class="hljs-title class_">Person</span>,<br>  <span class="hljs-attr">introduceMyself</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br><span class="hljs-keyword">var</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">30</span>, <span class="hljs-string">&#x27;Android Software Engineer&#x27;</span>)<br><br>person1.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Ella&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">friends</span>) <span class="hljs-comment">// &quot;WuHangxuan, Heby, Ella&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person2.<span class="hljs-property">friends</span>) <span class="hljs-comment">// &quot;WuHangxuan, Heby&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">friends</span> == person2.<span class="hljs-property">friends</span>) <span class="hljs-comment">// false</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person1.<span class="hljs-property">introduceMyself</span> == person2.<span class="hljs-property">introduceMyself</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>这种构造函数与原型混成的模式，是目前在ECMAScript中使用最广泛、认同度最高的一种创建自定义类型的方法。可以说，这是用来定义引用类型的一种默认模式。</p><h2 id="5、动态原型模式"><a href="#5、动态原型模式" class="headerlink" title="5、动态原型模式"></a>5、动态原型模式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-comment">// 属性</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">ageg</span> = age<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span> = job<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">friends</span> = [<span class="hljs-string">&#x27;WuHangxuan&#x27;</span>, <span class="hljs-string">&#x27;Heby&#x27;</span>]<br><br>  <span class="hljs-comment">// 方法</span><br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">introduceMyself</span> != <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>    <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br>friend.<span class="hljs-title function_">introduceMyself</span>()<br></code></pre></td></tr></table></figure><p>这里只在introduceMyself()方法不存在的情况下，才会将它添加到原型中。这段代码只会在初次调用构造函数时才会执行。此后，原型已经完成初始化，不需要在做什么修改了。（对于采用这种模式创建的对象，还可以使用instanceof操作符确定它的类型）</p><h2 id="6、寄生构造函数模式"><a href="#6、寄生构造函数模式" class="headerlink" title="6、寄生构造函数模式"></a>6、寄生构造函数模式</h2><blockquote><p>通常，在前述的几种模式都不适用的情况下，可以使用寄生构造函数模式。这种模式的基本思想是创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，这个函数又很像是典型的构造函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br>  o.<span class="hljs-property">name</span> = name<br>  o.<span class="hljs-property">age</span> = age<br>  o.<span class="hljs-property">job</span> = job<br>  o.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">job</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> o<br>&#125;<br><br><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br>friend.<span class="hljs-title function_">introduceMyself</span>()<br></code></pre></td></tr></table></figure><p>这个例子中，Person函数创建了一个新对象，并以相应的属性和方法初始化该对象，然后又返回了这个对象。除了使用new操作符并把使用的包装函数叫做构造函数之外，这个模式跟工厂模式其实是一模一样的。构造函数在不返回值的情况下，默认会返回新对象实例。而通过在构造函数的末尾添加一个return语句，可以重写调用构造函数时返回的值。</p><p>这个模式可以在特殊情况下用来为对象创建构造函数。假设我们像创建一个具有额外方法的特殊数组。由于不能直接修改Array构造函数，因此可以使用这个模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SpecialArray</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//创建数组</span><br>  <span class="hljs-keyword">var</span> values = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>()<br><br>  <span class="hljs-comment">//添加值</span><br>  values.<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>(values, <span class="hljs-variable language_">arguments</span>)<br><br>  <span class="hljs-comment">//添加方法</span><br>  values.<span class="hljs-property">toPipedString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;|&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> values<br>&#125;<br><br><span class="hljs-keyword">var</span> colors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SpecialArray</span>(<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(colors.<span class="hljs-title function_">toPipedString</span>()) <span class="hljs-comment">// &quot;red|blue|green&quot;</span><br></code></pre></td></tr></table></figure><h2 id="7、稳妥构造函数模式"><a href="#7、稳妥构造函数模式" class="headerlink" title="7、稳妥构造函数模式"></a>7、稳妥构造函数模式</h2><blockquote><p>所谓稳妥对象，指的是没有公共属性，而且其方法也不引用this的对象。稳妥对象最适合在一些安全的环境中（这些环境中会禁止使用this和new），或者在防止数据被其他应用程序（如Mashup程序）改动时的使用。稳妥构造函数遵循与寄生构造函数类似的模式，但有两点不同：一是新创建对象的实例方法不引用this；二是不实用new操作符调用构造函数。</p></blockquote><p>按照稳妥构造函数的要求，可以将前面的Person构造函数重写如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age, job</span>) &#123;<br>  <span class="hljs-comment">// 创建要返回的对象</span><br>  <span class="hljs-keyword">var</span> o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()<br><br>  <span class="hljs-comment">// 可以在这里定义私有变量和函数</span><br><br>  <span class="hljs-comment">// 添加方法</span><br>  o.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + name + <span class="hljs-string">&#x27;, &#x27;</span> + age + <span class="hljs-string">&#x27; years old now, a &#x27;</span> + job)<br>  &#125;<br><br>  <span class="hljs-comment">// 返回对象</span><br>  <span class="hljs-keyword">return</span> o<br>&#125;<br><br><span class="hljs-keyword">var</span> friend = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>)<br>friend.<span class="hljs-title function_">introduceMyself</span>()<br></code></pre></td></tr></table></figure><h2 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h2><h3 id="1、原型链"><a href="#1、原型链" class="headerlink" title="1、原型链"></a>1、原型链</h3><blockquote><p>ECMAScript中描述了<strong>原型链</strong>的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型对象让一个引用类型继承另一个引用类型的属性和方法。简单回顾下构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。那么，假如我们让原型对象等于另一个类型的实例，结果会怎么样呢？显然，此时的原型对象将包含一个指向原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针。假如另一个原型又是另一个类型的实例，那么上述关系依然成立，如此层层递进，就构成了实例与原型的链条。这就是所谓原型链的基本概念。</p></blockquote><p>实现原型链有一种基本模式，其代码大致如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span> = <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSuperValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">property</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span> = <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-comment">// 继承了SuperType</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getSubValue</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subproperty</span><br>&#125;<br><br><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-title function_">getSuperValue</span>()) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>以上代码定义了两个类型：SuperType和SubType。每个类型分别有一个属性和一个方法。它们的主要区别丝是SubType继承了SuperType，而继承是通过创建SuperType的实例，并将该实例赋给SubType.prototype实现的。实现的本质是重写原型对象，代之以一个新类型的实例。换句话说，原来存在于SuperType的实例中的所有属性和方法，现在也存在于SubType.prototype中了。在确立了继承关系之后，我们给SubType.prototype添加了一个方法，这样就在继承了SuperType的属性和方法的基础上又添加了一个新方法。</p><p>这个例子中的实例以及构造函数和原型之间的关系如下图所示：</p><p> <img src="/images/prototype/prototype_4.jpg" alt="图三-1"></p> <p style="text-align: center;">图三-1</p><p> 事实上，上面例子中展示的原型链还少一环。我们知道，所有引用类型默认都继承了Object，而这个继承也是通过原型链实现的。如图三-2展示了该例子中完整的原型链：</p><p>  <img src="/images/prototype/prototype_5.jpg" alt="图三-2"></p> <p style="text-align: center;">图三-2</p><p>有两种方式可以确定原型和实例之间的关系：</p><ul><li><p>使用<code>instanceof</code>操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Object</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">SuperType</span>) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">SubType</span>) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li><p>使用<code>isPrototypeOf()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(instance)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(instance)) <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-title function_">isPrototypeOf</span>(instance)) <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li></ul><p>通过原型链实现继承的问题：</p><p>主要问题来自包含引用类型值的原型。包含引用类型值的原型属性会被所有实例共享；而这也是为什么要在构造函数中，而不是在原型对象中定义属性的原因。再通过原型链实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了。</p><h3 id="2、借用构造函数"><a href="#2、借用构造函数" class="headerlink" title="2、借用构造函数"></a>2、借用构造函数</h3><blockquote><p>有时候也叫做为伪造对象或经典继承。基本思想是：在自类型构造函数的内部调用超类型构造函数。别忘了，函数只不过是在特定环境中执行代码的对象，因此通过使用apply()和call()方法也可以在（将来）新创建的对象上执行构造函数，如下所示：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 继承了SuperType</span><br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-string">&#x27;Jason&#x27;</span>)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = <span class="hljs-number">28</span><br>&#125;<br><br><span class="hljs-keyword">var</span> instance1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance1.<span class="hljs-property">colors</span>)  <span class="hljs-comment">// “red,blue,green,black”</span><br><br><span class="hljs-keyword">var</span> instance2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance2.<span class="hljs-property">colors</span>) <span class="hljs-comment">// “red,blue,green”</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance2.<span class="hljs-property">name</span>) <span class="hljs-comment">// “Jason“</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance2.<span class="hljs-property">age</span>) <span class="hljs-comment">// 28</span><br></code></pre></td></tr></table></figure><p>缺点：</p><ul><li>如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此函数复用就无从谈起了。</li><li>在超类型的原型中定义方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。</li></ul><h3 id="3、组合继承"><a href="#3、组合继承" class="headerlink" title="3、组合继承"></a>3、组合继承</h3><blockquote><p>组合继承，有时候也叫做伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]<br>&#125;<br><br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">introduceMyself</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-comment">// 继承属性</span><br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperType</span>()<br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">SubType</span><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;I am &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;years old.&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> instance1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>)<br>instance1.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance1.<span class="hljs-property">colors</span>)  <span class="hljs-comment">// “red,blue,green,black”</span><br>instance1.<span class="hljs-title function_">introduceMyself</span>() <span class="hljs-comment">// Jason</span><br>instance1.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// 28</span><br><br><span class="hljs-keyword">var</span> instance2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&#x27;ChenYajie&#x27;</span>, <span class="hljs-number">30</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance2.<span class="hljs-property">colors</span>)  <span class="hljs-comment">// “red,blue,green&quot;</span><br>instance2.<span class="hljs-title function_">introduceMyself</span>() <span class="hljs-comment">// ChenYajie</span><br>instance2.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// 30</span><br></code></pre></td></tr></table></figure><p>组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为JavaScript中最常用的继承模式。而且，<code>instanceof</code>和<code>isPrototypeof()</code>也能够用于识别基于组合继承创建的对象。</p><h3 id="4、原型式继承"><a href="#4、原型式继承" class="headerlink" title="4、原型式继承"></a>4、原型式继承</h3><blockquote><p>原型式继承实现继承的方法，并没有使用严格意义上的构造函数。它的思路是借助原型可以基于已有的对象创建新对象，同时还不必因此创建自定义类型。</p></blockquote><p>为了达到这个目的，给出如下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;WuHangxuan&#x27;</span>, <span class="hljs-string">&#x27;Heby&#x27;</span>, <span class="hljs-string">&#x27;Ella&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">var</span> anotherPerson = <span class="hljs-title function_">object</span>(person)<br>anotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;ChenYajie&#x27;</span><br>anotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Sellina&#x27;</span>)<br><br><span class="hljs-keyword">var</span> yetAnotherPerson = <span class="hljs-title function_">object</span>(person)<br>yetAnotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Linda&#x27;</span><br>yetAnotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;JaneChou&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">friends</span>) <span class="hljs-comment">// &quot;WuHangxuan, Heby, Ella, Sellina, JaneChou&quot;</span><br></code></pre></td></tr></table></figure><p>ECMAScript5通过新增Object.create()方法规范化了原型式继承。这个方法接收两个参数：一个用作新对象原型的对象和（可选的）一个为新对象定义额外属性的对象。在传入一个参数的情况下，Object.create()与object()方法的行为相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;WuHangxuan&#x27;</span>, <span class="hljs-string">&#x27;Heby&#x27;</span>, <span class="hljs-string">&#x27;Ella&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">var</span> anotherPerson =  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person)<br>anotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;ChenYajie&#x27;</span><br>anotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Sellina&#x27;</span>)<br><br><span class="hljs-keyword">var</span> yetAnotherPerson = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person)<br>yetAnotherPerson.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;Linda&#x27;</span><br>yetAnotherPerson.<span class="hljs-property">friends</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;JaneChou&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">friends</span>) <span class="hljs-comment">// &quot;WuHangxuan, Heby, Ella, Sellina, JaneChou&quot;</span><br></code></pre></td></tr></table></figure><p>Object.create()方法的第二个参数与Object.defineProperties()方法的第二个参数格式相同：每个属性都是通过自己的描述符定义的。以这种方式指定的任何属性都会覆盖原型对象上的同名属性。</p><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;WuHangxuan&#x27;</span>, <span class="hljs-string">&#x27;Heby&#x27;</span>, <span class="hljs-string">&#x27;Ella&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">var</span> anotherPerson =  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(person, &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Jason Chan&#x27;</span><br>  &#125;<br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason&quot;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(anotherPerson.<span class="hljs-property">name</span>) <span class="hljs-comment">// &quot;Jason Chan&quot;</span><br></code></pre></td></tr></table></figure><p>在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下，原型式继承是完全可以胜任的。不过别忘了，包含引用类型值的属性始终都会共享相应的值，就像使用原型模式一样。</p><h3 id="5、寄生式继承"><a href="#5、寄生式继承" class="headerlink" title="5、寄生式继承"></a>5、寄生式继承</h3><blockquote><p>寄生式继承是与原型式继承紧密相关的一种思路。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createAnother</span>(<span class="hljs-params">original</span>) &#123;<br>  <span class="hljs-keyword">var</span> clone = <span class="hljs-title function_">object</span>(original) <span class="hljs-comment">// 通过调用函数创建一个新对象。（不限于用object()这个函数，任何能够返回新对象的函数都适用于此模式）</span><br>  clone.<span class="hljs-property">sayHi</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hi!&#x27;</span>)<br>  &#125;<br>  <span class="hljs-keyword">return</span> clone<br>&#125;<br><br><span class="hljs-keyword">var</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Jason&#x27;</span>,<br>  <span class="hljs-attr">friends</span>: [<span class="hljs-string">&#x27;WuHangxuan&#x27;</span>, <span class="hljs-string">&#x27;Heby&#x27;</span>, <span class="hljs-string">&#x27;Ella&#x27;</span>]<br>&#125;<br><br><span class="hljs-keyword">var</span> anotherPerson =  <span class="hljs-title function_">createAnother</span>(person)<br>anotherPerson.<span class="hljs-title function_">sayHi</span>() <span class="hljs-comment">// &#x27;hi!&#x27;</span><br></code></pre></td></tr></table></figure><p>在主要考虑对象而不是自定义类型和构造函数的情况下，寄生式继承也是一种有用的模式。</p><p>缺点：</p><ul><li>使用寄生式继承来为对象添加函数，会由于不能做到函数复用而降低效率；这一点与构造函数模式类似。</li></ul><h3 id="6、寄生组合式继承"><a href="#6、寄生组合式继承" class="headerlink" title="6、寄生组合式继承"></a>6、寄生组合式继承</h3><p>组合式继承缺点：</p><ul><li>无论什么情况下，都会调用两次超类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。</li></ul><blockquote><p>所谓寄生组合式继承，即通过借用构造函数来继承属性，通过原型链的混成形式来继承方法。其背后的基本思路是：不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是超类型原型的一个副本而已。本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型。</p></blockquote><p>例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">object</span>(<span class="hljs-params">o</span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">F</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  F.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = o<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">F</span>()<br>&#125;<br><br><span class="hljs-comment">// 寄生组合式继承的基本模式</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-params">subType, superType</span>) &#123;<br>  <span class="hljs-keyword">var</span> prototype = <span class="hljs-title function_">object</span>(superType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>) <span class="hljs-comment">// 创建对象，创建超类型原型的一个副本</span><br>  prototype.<span class="hljs-property">constructor</span> = subType <span class="hljs-comment">// 增强对象，弥补因重写原型而失去的默认的constructor属性</span><br>  subType.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = prototype <span class="hljs-comment">// 指定对象，将新创建的对象（即副本）赋值给子类型的原型。</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SuperType</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">colors</span> = [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>]<br>&#125;<br><br><span class="hljs-title class_">SuperType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My name is &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">SubType</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-title class_">SuperType</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>, name)<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br><br><span class="hljs-title function_">inheritPrototype</span>(<span class="hljs-title class_">SubType</span>, <span class="hljs-title class_">SuperType</span>)<br><br><span class="hljs-title class_">SubType</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayAge</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubType</span>(<span class="hljs-string">&#x27;Jason&#x27;</span>, <span class="hljs-number">28</span>)<br>instance.<span class="hljs-property">colors</span>.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;black&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(instance.<span class="hljs-property">colors</span>)  <span class="hljs-comment">// “red,blue,green,black”</span><br>instance.<span class="hljs-title function_">sayName</span>() <span class="hljs-comment">// Jason</span><br>instance.<span class="hljs-title function_">sayAge</span>() <span class="hljs-comment">// 28</span><br></code></pre></td></tr></table></figure><p>开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。</p><p>(摘自: JavaScript高级程序设计（第3版）)</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型链</tag>
      
      <tag>继承</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hybrid</title>
    <link href="/2018/09/03/Hybrid/"/>
    <url>/2018/09/03/Hybrid/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对-hybrid-的理解"><a href="#一、对-hybrid-的理解" class="headerlink" title="一、对 hybrid 的理解"></a>一、对 hybrid 的理解</h2><h4 id="1、解释"><a href="#1、解释" class="headerlink" title="1、解释"></a>1、解释</h4><ul><li>hybrid 即“混合”，即前端和客户端的混合开发</li><li>需前端开发人员和客户端开发人员配合完成</li><li>某些环节也可能涉及到 server 端</li><li>前端也需了解客户端的知识</li></ul><h4 id="2、hybrid-的存在价值"><a href="#2、hybrid-的存在价值" class="headerlink" title="2、hybrid 的存在价值"></a>2、hybrid 的存在价值</h4><ul><li>可以快速迭代更新，无需 app 审核(关键)</li><li>体验流畅（和 NA 的体验基本类似）</li><li>减少开发和沟通成本，双端公用一套代码</li></ul><span id="more"></span><h4 id="3、webview"><a href="#3、webview" class="headerlink" title="3、webview"></a>3、webview</h4><ul><li>是 app 中的一个组件（ app 可以有 webview ，也可以没有）</li><li>用于加载 h5 页面，即一个小型的浏览器内核</li></ul><h4 id="4、file-x2F-x2F-协议"><a href="#4、file-x2F-x2F-协议" class="headerlink" title="4、file:&#x2F;&#x2F; 协议"></a>4、file:&#x2F;&#x2F; 协议</h4><ul><li>其实在一开始接触 html 开发，就已经使用了 file 协议</li><li>只不过当时没有“协议”“标准”等这些概念</li><li>file 协议：本地文件，快</li><li>http(s) 协议：网络加载，慢</li></ul><h4 id="5、hybrid-实现流程"><a href="#5、hybrid-实现流程" class="headerlink" title="5、hybrid 实现流程"></a>5、hybrid 实现流程</h4><ul><li>不是所有场景都适合使用 hybrid：<ul><li>使用 NA ：体验要求极致，变化不频繁（无头条的首页）</li><li>使用 hybrid ：体验要求高，变化频繁（如头条的新闻详情页）</li><li>使用 h5 ：体验无要求，不常用（如举报、反馈等页面）</li></ul></li><li>前端做好静态页面（html js css），将文件交给客户端</li><li>客户端拿到前端静态页面，以文件形式存储在 app 中</li><li>客户端在一个 webview 中</li><li>使用 file 协议加载静态页面</li></ul><h2 id="二、更新上线流程"><a href="#二、更新上线流程" class="headerlink" title="二、更新上线流程"></a>二、更新上线流程</h2><ul><li>分版本，有版本号，如 201803211015</li><li>将静态文件压缩成 zip 包，上传到服务端</li><li>客户端每次启动，都去服务端检查版本号</li><li>如果服务端版本号大于客户端版本号，就去下载最新的 zip 包</li><li>下载完之后解压包，然后将现有文件覆盖</li></ul><h2 id="三、hybrid-和-h5-对比"><a href="#三、hybrid-和-h5-对比" class="headerlink" title="三、hybrid 和 h5 对比"></a>三、hybrid 和 h5 对比</h2><h4 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h4><ul><li>体验更好，跟 NA 体验基本一致</li><li>可快速迭代，无需 app 审核【关键】</li></ul><h4 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h4><ul><li>开发成本高。联调、测试、查 bug 都比较麻烦</li><li>运维成本高。</li></ul><h4 id="3、适用的场景"><a href="#3、适用的场景" class="headerlink" title="3、适用的场景"></a>3、适用的场景</h4><ul><li>hybrid ： 产品的稳定功能，体验要求高，迭代频繁</li><li>h5 ： 单次的运营活动（如 举报、反馈）或不常用功能</li><li>hybrid 适合产品型，h5 使用运营型</li></ul><h2 id="四、客户端通讯"><a href="#四、客户端通讯" class="headerlink" title="四、客户端通讯"></a>四、客户端通讯</h2><h4 id="1、需要解决的问题"><a href="#1、需要解决的问题" class="headerlink" title="1、需要解决的问题"></a>1、需要解决的问题</h4><ul><li>新闻详情页适用 hybrid ，前端如何获取新闻内容？</li><li>不能用 ajax 获取。第一 跨域，第二 速度慢</li><li>客户端获取新闻内容，然后 JS 通讯拿到内容，再渲染</li></ul><h4 id="2、JS-和客户端通讯的基本形式"><a href="#2、JS-和客户端通讯的基本形式" class="headerlink" title="2、JS 和客户端通讯的基本形式"></a>2、JS 和客户端通讯的基本形式</h4><ul><li>JS 访问客户端能力，传递参数和回调函数</li><li>客户端通过回调函数返回内容</li></ul><h4 id="3、schema-协议简介和使用"><a href="#3、schema-协议简介和使用" class="headerlink" title="3、schema 协议简介和使用"></a>3、schema 协议简介和使用</h4><p>schema 协议 —— 前端和客户端通讯的约定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">invokeScan</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;_invoke_scan_callback_&quot;</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>    <span class="hljs-title function_">alert</span>(result);<br>  &#125;;<br><br>  <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;iframe&quot;</span>);<br>  iframe.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>; <span class="hljs-comment">//iframe 访问 schema</span><br>  iframe.<span class="hljs-property">src</span> =<br>    <span class="hljs-string">&quot;weixin://dl/scan?key1=v1&amp;k2=v2&amp;key3=v3&amp;callback=_invoke_scan_callback_&quot;</span>;<br>  <span class="hljs-keyword">var</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br>  body.<span class="hljs-title function_">appendChild</span>(iframe);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    body.<span class="hljs-title function_">removeChild</span>(iframe); <span class="hljs-comment">//销毁 iframe</span><br>    iframe = <span class="hljs-literal">null</span>;<br>  &#125;);<br>&#125;<br><br><span class="hljs-variable language_">window</span>[<span class="hljs-string">&quot;_weixin_scan_callback&quot;</span>] = <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>  <span class="hljs-title function_">alert</span>(result);<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="4、schema-使用的封装"><a href="#4、schema-使用的封装" class="headerlink" title="4、schema 使用的封装"></a>4、schema 使用的封装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script src=<span class="hljs-string">&quot;invoke.js&quot;</span>&gt;&lt;/script&gt;;<br><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn1&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>),<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">invoke</span>.<span class="hljs-title function_">scan</span>(&#123;&#125;, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;&#125;);<br>  &#125;;<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;btn2&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>),<br>  <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">invoke</span>.<span class="hljs-title function_">share</span>(<br>      &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>        <span class="hljs-attr">content</span>: <span class="hljs-string">&quot;yyy&quot;</span>,<br>      &#125;,<br>      <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (result.<span class="hljs-property">errno</span> == <span class="hljs-number">0</span>) &#123;<br>          <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;分享成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">alert</span>(result.<span class="hljs-property">message</span>);<br>        &#125;<br>      &#125;<br>    );<br>  &#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* invoke.js */</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span>, <span class="hljs-literal">undefined</span></span>) &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">_invoke</span>(<span class="hljs-params">action, data, callback</span>) &#123;<br>    <span class="hljs-comment">//拼接 schema 协议</span><br>    <span class="hljs-keyword">var</span> schema = <span class="hljs-string">&quot;myapp://utils&quot;</span> + action;<br>    schema += <span class="hljs-string">&quot;?a=a&quot;</span>;<br>    <span class="hljs-keyword">var</span> key;<br>    <span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> data) &#123;<br>      <span class="hljs-keyword">if</span> (data.<span class="hljs-title function_">hasOwnProperty</span>(key)) &#123;<br>        schema += <span class="hljs-string">&quot;&amp;&quot;</span> + key + data[key];<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 处理callback</span><br>    <span class="hljs-keyword">var</span> callbackName = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&quot;string&quot;</span>) &#123;<br>      callbackName = callback;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      callbackName = action + <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">now</span>();<br>      <span class="hljs-variable language_">window</span>[callbackName] = callback;<br>    &#125;<br>    schema += <span class="hljs-string">&quot;callback=callbackName&quot;</span>;<br><br>    <span class="hljs-keyword">var</span> iframe = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;iframe&quot;</span>);<br>    iframe.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>    iframe.<span class="hljs-property">src</span> = schema;<br>    <span class="hljs-keyword">var</span> body = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>;<br>    body.<span class="hljs-title function_">appendChild</span>(iframe);<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>      body.<span class="hljs-title function_">removeChild</span>(iframe);<br>    &#125;);<br>  &#125;<br><br>  <span class="hljs-comment">//暴露给全局</span><br>  <span class="hljs-variable language_">window</span>.<span class="hljs-property">invoke</span> = &#123;<br>    <span class="hljs-comment">//分享</span><br>    <span class="hljs-attr">share</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data, callback</span>) &#123;<br>      <span class="hljs-title function_">_invoke</span>(<span class="hljs-string">&quot;share&quot;</span>, data, callback);<br>    &#125;,<br>    <span class="hljs-comment">//扫一扫</span><br>    <span class="hljs-attr">scan</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data, callback</span>) &#123;<br>      <span class="hljs-title function_">_invoke</span>(<span class="hljs-string">&quot;scan&quot;</span>, data, callback);<br>    &#125;,<br>    <span class="hljs-comment">//登陆</span><br>    <span class="hljs-attr">login</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data, callback</span>) &#123;<br>      <span class="hljs-title function_">_invoke</span>(<span class="hljs-string">&quot;login&quot;</span>, data, callback);<br>    &#125;,<br>  &#125;;<br>&#125;)(<span class="hljs-variable language_">window</span>);<br></code></pre></td></tr></table></figure><h4 id="5、内置上线"><a href="#5、内置上线" class="headerlink" title="5、内置上线"></a>5、内置上线</h4><ul><li>将以上封装的代码打包，叫做 invoke.js，内置到客户端</li><li>客户端每次启动 webview ，都默认执行 invoke.js</li><li>本地加载，免去网络加载的时间，更快。</li><li>本地加载，没有网络请求，黑客看不到 schema 协议，更安全</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hybrid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组件化</title>
    <link href="/2018/09/03/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    <url>/2018/09/03/%E7%BB%84%E4%BB%B6%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="一、对组件化的理解"><a href="#一、对组件化的理解" class="headerlink" title="一、对组件化的理解"></a>一、对组件化的理解</h2><h4 id="1、组件的封装"><a href="#1、组件的封装" class="headerlink" title="1、组件的封装"></a>1、组件的封装</h4><ul><li>视图</li><li>数据</li><li>变化逻辑（数据驱动视图变化）</li></ul><h4 id="2、组件的复用"><a href="#2、组件的复用" class="headerlink" title="2、组件的复用"></a>2、组件的复用</h4><ul><li>props 传递</li><li>复用</li></ul><span id="more"></span><h2 id="二、JSX-的本质"><a href="#二、JSX-的本质" class="headerlink" title="二、JSX 的本质"></a>二、JSX 的本质</h2><h4 id="1、JSX-语法"><a href="#1、JSX-语法" class="headerlink" title="1、JSX 语法"></a>1、JSX 语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* src/app.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Todo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/todo/index.js&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>  <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Todo</span>/&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">App</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* src/components/todo/index.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./list/index.js&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./input/index.js&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Todo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">list</span>: []<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">addTitle</span>=<span class="hljs-string">&#123;this.addTitle.bind(this)&#125;/</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">List</span> <span class="hljs-attr">data</span>=<span class="hljs-string">&#123;this.state.list&#125;/</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>        <span class="hljs-comment">// React.createElement(List, &#123;data:this.state.list&#125;)</span><br>        <span class="hljs-comment">// var list = new List(&#123;data:this.state.list&#125;)</span><br>        <span class="hljs-comment">// var vnode = list.render()</span><br>    &#125;<br>    <span class="hljs-title function_">addTitle</span>(<span class="hljs-params">title</span>) &#123;<br>        <span class="hljs-keyword">const</span> currentList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentList)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">list</span>: currentList.<span class="hljs-title function_">concat</span>(title)<br>        &#125;)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Todo</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* src/components/todo/input/index.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Input</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;this.state.title&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;this.changeHandle.bind(this)&#125;/</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.clickHandle.bind(this)&#125;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>    <span class="hljs-title function_">changeHandle</span>(<span class="hljs-params">event</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">title</span>: event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>        &#125;)<br>    &#125;<br>    <span class="hljs-title function_">clickHandle</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> title = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">title</span><br>        <span class="hljs-keyword">const</span> addTitle = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">addTitle</span><br>        <span class="hljs-title function_">addTitle</span>(title)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">Input</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* src/components/todo/list/index.js */</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123;<span class="hljs-title class_">Component</span>&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> list = <span class="hljs-variable language_">this</span>.<span class="hljs-property">props</span>.<span class="hljs-property">data</span><br>        <span class="hljs-keyword">return</span>(<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                &#123;</span><br><span class="language-xml">                  list.map((item, index) =&gt; &#123;</span><br><span class="language-xml">                      return <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span>&gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                    &#125;)</span><br><span class="language-xml">                &#125;</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br>        )<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">List</span><br></code></pre></td></tr></table></figure><p>语法：</p><ul><li>html 形式</li><li>引入 JS 变量和表达式</li><li>if…else…</li><li>循环</li><li>style 和 className</li><li>事件</li></ul><h4 id="2、JSX-解析成-JS"><a href="#2、JSX-解析成-JS" class="headerlink" title="2、JSX 解析成 JS"></a>2、JSX 解析成 JS</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* JSX */</span><br><span class="hljs-keyword">var</span> profile = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;avatar.png&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;profile&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;[user.firstName, user.lastName].join(&#x27; &#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* JS */</span><br><span class="hljs-keyword">var</span> profile = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>        <span class="hljs-string">&quot;div&quot;</span>,<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>, &#123; <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;avatar.png&quot;</span>, <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;profile&quot;</span> &#125;),<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>                <span class="hljs-string">&quot;h3&quot;</span>,<br>                <span class="hljs-literal">null</span>,<br>                [user.<span class="hljs-property">firstName</span>, user.<span class="hljs-property">lastName</span>].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>        )<br>);<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>JSX 其实是语法糖</li><li>开发环境会将 JSX 编译成 JS 代码</li><li>JSX 的写法大大降低了学习成本和编码工作量</li><li>同时，JSX 也会增加 debug 成本</li></ul><h4 id="3、JSX独立的标准"><a href="#3、JSX独立的标准" class="headerlink" title="3、JSX独立的标准"></a>3、JSX独立的标准</h4><ul><li>JSX 是 React 引入的，但不是 React 独有的</li><li>React 已经将它作为一个独立标准开放，其他项目也可用</li><li>React.createElement 是可以自定义修改的</li><li>说明：JSX本身功能已经完备；和其他标准兼容；扩展性没问题</li></ul><h2 id="三、JSX-和-vdom-的关系"><a href="#三、JSX-和-vdom-的关系" class="headerlink" title="三、JSX 和 vdom 的关系"></a>三、JSX 和 vdom 的关系</h2><h4 id="1、JSX-需要-vdom"><a href="#1、JSX-需要-vdom" class="headerlink" title="1、JSX 需要 vdom"></a>1、JSX 需要 vdom</h4><p>JSX 需要渲染成 html，数据驱动视图</p><ul><li>vdom 是 React 初次推广开来的，结合 JSX</li><li>JSX 就是模板，最终要渲染成 html</li><li>初次渲染 + 修改 state 后的 re-render</li><li>正好符合 vdom 的应用场景</li></ul><h4 id="2、React-createElement-和-h"><a href="#2、React-createElement-和-h" class="headerlink" title="2、React.createElement 和 h"></a>2、React.createElement 和 h</h4><p> React.createElement 和 h ，都生成 vnode</p><h4 id="3、何时-patch-？"><a href="#3、何时-patch-？" class="headerlink" title="3、何时 patch ？"></a>3、何时 patch ？</h4><ul><li>初次渲染 - ReactDOM.render(<App/>, container)<ul><li>会触发 patch(container, vnode)</li></ul></li><li>re-render - setState<ul><li>会触发 patch(vnode, newVnode)</li></ul></li></ul><h4 id="4、自定义组件的解析"><a href="#4、自定义组件的解析" class="headerlink" title="4、自定义组件的解析"></a>4、自定义组件的解析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* JSX */</span><br><span class="hljs-keyword">var</span> profile = <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;avatar.png&quot;</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;profile&quot;</span>/&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>&#123;[user.firstName, user.lastName].join(&#x27; &#x27;)&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* JS */</span><br><span class="hljs-keyword">var</span> profile = <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>        <span class="hljs-string">&quot;div&quot;</span>,<br>        <span class="hljs-literal">null</span>,<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;img&quot;</span>, &#123; <span class="hljs-attr">src</span>: <span class="hljs-string">&quot;avatar.png&quot;</span>, <span class="hljs-attr">className</span>: <span class="hljs-string">&quot;profile&quot;</span> &#125;),<br>        <span class="hljs-title class_">React</span>.<span class="hljs-title function_">createElement</span>(<br>                <span class="hljs-string">&quot;h3&quot;</span>,<br>                <span class="hljs-literal">null</span>,<br>                [user.<span class="hljs-property">firstName</span>, user.<span class="hljs-property">lastName</span>].<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27; &#x27;</span>)<br>        )<br>);<br></code></pre></td></tr></table></figure><ul><li>‘div’ - 直接渲染 <code>&lt;div&gt;</code> 即可，vdom 可以做到</li><li>Input 和 List ，是自定义组件（class），vdom 默认不认识</li><li>因此 Input 和 List 定义的时候必须声明 render 函数</li><li>根据 props 初始化实例，然后执行实例的 render 函数</li><li>render 函数返回的还是 vnode对象</li></ul><h2 id="四、setState-的过程"><a href="#四、setState-的过程" class="headerlink" title="四、setState 的过程"></a>四、setState 的过程</h2><h4 id="1、setState-的异步"><a href="#1、setState-的异步" class="headerlink" title="1、setState 的异步"></a>1、setState 的异步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">addTitle</span>(<span class="hljs-params">title</span>) &#123;<br>        <span class="hljs-keyword">const</span> currentList = <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentList)   <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;]</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123;<br>            <span class="hljs-attr">list</span>: currentList.<span class="hljs-title function_">concat</span>(title) <span class="hljs-comment">// &#x27;c&#x27;</span><br>        &#125;)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">list</span>)  <span class="hljs-comment">//[&#x27;a&#x27;, &#x27;b&#x27;]</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>注：出始数据为a和b，使用setState添加c后，输出的还是a和b，所以是异步操作。</p><p>原因：</p><ul><li>可能会一次执行多次 setState</li><li>你无法规定、限制用户如何使用 setState</li><li>没必要每次 setState 都重新渲染，考虑性能</li><li>即便是每次重新渲染，用户也看不到中间的效果</li><li>只看到最后的结果即可</li></ul><p>注：vue 修改属性也是异步</p><h4 id="2、setState-的过程"><a href="#2、setState-的过程" class="headerlink" title="2、setState 的过程"></a>2、setState 的过程</h4><ul><li>每个组件实例，都有 renderComponent 方法</li><li>执行 renderComponent  会重新执行实例的 render</li><li>render 函数返回 newVnode ，然后拿到 preVnode</li><li>执行 patch(preVnode, newVnode)</li></ul><h2 id="五、对-React-和-vue-的认识"><a href="#五、对-React-和-vue-的认识" class="headerlink" title="五、对 React 和 vue 的认识"></a>五、对 React 和 vue 的认识</h2><h4 id="1、两者的本质区别"><a href="#1、两者的本质区别" class="headerlink" title="1、两者的本质区别"></a>1、两者的本质区别</h4><ul><li>vue - 本质是 MVVM 框架，由 MVC 发展而来</li><li>React - 本质是前端组件化框架，由后端组件化发展而来</li><li>但这并不妨碍他们两者都能实现相同的功能</li></ul><h4 id="2、看模板和组件化的区别"><a href="#2、看模板和组件化的区别" class="headerlink" title="2、看模板和组件化的区别"></a>2、看模板和组件化的区别</h4><h6 id="i、模板的区别"><a href="#i、模板的区别" class="headerlink" title="i、模板的区别"></a>i、模板的区别</h6><p>区别：</p><ul><li>vue - 使用模板（最初由 angular 提出）</li><li>React - 使用 JSX</li><li>模板语法上，倾向于 JSX。JSX模板大括号里就是一个js表达式，学习成本较低</li><li>模板分离上，倾向于 vue。React模板和JS混在了一起，未分离</li></ul><p>注意：</p><ul><li>模板应该和 JS 逻辑分离</li><li>遵循”开放封闭原则”</li></ul><h6 id="ii、组件化的区别"><a href="#ii、组件化的区别" class="headerlink" title="ii、组件化的区别"></a>ii、组件化的区别</h6><ul><li>React 本身就是组件化，没有组件化就不是 React</li><li>vue 也支持组件化，不过是在 MVVM 上的扩展</li><li>vue 组件化的文档，比较复杂。不过文档更易读、易学、社区够大。</li><li>对于组件化，倾向于 React ，做的彻底而清晰</li></ul><h4 id="3、两者共同点"><a href="#3、两者共同点" class="headerlink" title="3、两者共同点"></a>3、两者共同点</h4><ul><li>都支持组件化</li><li>都是数据驱动试图</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>组件化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MVVM</title>
    <link href="/2018/09/02/MVVM/"/>
    <url>/2018/09/02/MVVM/</url>
    
    <content type="html"><![CDATA[<h2 id="一、理解-MVVM"><a href="#一、理解-MVVM" class="headerlink" title="一、理解 MVVM"></a>一、理解 MVVM</h2><h4 id="1、jquery和vue的不同"><a href="#1、jquery和vue的不同" class="headerlink" title="1、jquery和vue的不同"></a>1、jquery和vue的不同</h4><h6 id="i、-jQuery-实现-todo-list"><a href="#i、-jQuery-实现-todo-list" class="headerlink" title="i、 jQuery 实现 todo-list"></a>i、 jQuery 实现 todo-list</h6><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text-title&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn-submit&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;ul-list&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery_3.2.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $textTitle = $(<span class="hljs-string">&#x27;#text-title&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $btnSubmit = $(<span class="hljs-string">&#x27;#btn-submit&#x27;</span>)</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> $ulList = $(<span class="hljs-string">&#x27;#ul-list&#x27;</span>)</span><br><span class="language-javascript">        $btnSubmit.<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> title = $textTitle.<span class="hljs-title function_">val</span>()</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(!title) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> $li = $(<span class="hljs-string">&#x27;&lt;li&gt;&#x27;</span> + title + <span class="hljs-string">&#x27;&lt;/li&gt;&#x27;</span>)</span><br><span class="language-javascript">            $ulList.<span class="hljs-title function_">append</span>($li)</span><br><span class="language-javascript">            $textTitle.<span class="hljs-title function_">val</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="ii、-vue-实现-todo-list"><a href="#ii、-vue-实现-todo-list" class="headerlink" title="ii、 vue 实现 todo-list"></a>ii、 vue 实现 todo-list</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">list</span>: []</span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">add</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span>)</span><br><span class="language-javascript">                    <span class="hljs-variable language_">this</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;&#x27;</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="iii、vue-和-jQuery-框架的区别"><a href="#iii、vue-和-jQuery-框架的区别" class="headerlink" title="iii、vue 和 jQuery 框架的区别"></a>iii、vue 和 jQuery 框架的区别</h6><ul><li>数据和视图的分离。解耦，体现了开放封闭原则</li><li>以数据驱动视图。只关心数据变化，DOM 操作被封装</li></ul><h2 id="二、什么是MVVM"><a href="#二、什么是MVVM" class="headerlink" title="二、什么是MVVM"></a>二、什么是MVVM</h2><ul><li>Model - 模型、数据</li><li>View - 视图、模板（视图和模型是分离的）</li><li>ViewModel - 连接 Model 和 View</li><li>ViewModel其实就是创建的vue实例</li></ul><p><img src="/images/mvvm.png" alt="MVVM"></p><h2 id="三、vue三要素"><a href="#三、vue三要素" class="headerlink" title="三、vue三要素"></a>三、vue三要素</h2><ul><li>响应式：vue 如何监听到 data 的每个属性变化？</li><li>模板引擎：vue 的模板如何被解析，指令如何处理？</li><li>渲染：vue 的模板如何被渲染成 html ？以及渲染过程</li></ul><h2 id="四、响应式"><a href="#四、响应式" class="headerlink" title="四、响应式"></a>四、响应式</h2><h4 id="1、什么是响应式"><a href="#1、什么是响应式" class="headerlink" title="1、什么是响应式"></a>1、什么是响应式</h4><ul><li>修改 data 属性之后，vue 立刻监听到</li><li>data 属性被代理到 vm 上</li></ul><h4 id="2、Object-defineProperty"><a href="#2、Object-defineProperty" class="headerlink" title="2、Object.defineProperty"></a>2、Object.defineProperty</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> obj = &#123;&#125;<br><span class="hljs-keyword">var</span> _name = <span class="hljs-string">&#x27;zhangsan&#x27;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;_name&#x27;</span>, &#123;<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;get&#x27;</span>, _name)<br>        <span class="hljs-keyword">return</span> _name<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;set&#x27;</span>, _name)<br>        _name = newVal<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>)  <span class="hljs-comment">//可以监听到</span><br>obj.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;lisi&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>)  <span class="hljs-comment">//可以监听到</span><br></code></pre></td></tr></table></figure><h4 id="3、模拟实现响应式"><a href="#3、模拟实现响应式" class="headerlink" title="3、模拟实现响应式"></a>3、模拟实现响应式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = &#123;&#125;<br><span class="hljs-keyword">var</span> data = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>&#125;<br><br><span class="hljs-keyword">var</span> key, value<br><span class="hljs-keyword">for</span>(key <span class="hljs-keyword">in</span> data) &#123;<br>    (<span class="hljs-keyword">function</span> (<span class="hljs-params">key</span>) &#123;<br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(vm, key, &#123;<br>            <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;get&#x27;</span>, data[key])<br>                <span class="hljs-keyword">return</span> data[key]<br>            &#125;,<br>            <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;set&#x27;</span>, data[key])<br>                data[key] = newVal<br>            &#125;<br>        &#125;)<br>    &#125;)(key)<br>&#125;<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>Object.defineProperty可以做到修改 data 属性之后，vue 立刻监听到。</li><li>将 data 的属性代理到了 vm 上</li></ul><h2 id="五、模板解析"><a href="#五、模板解析" class="headerlink" title="五、模板解析"></a>五、模板解析</h2><h4 id="1、模板是什么"><a href="#1、模板是什么" class="headerlink" title="1、模板是什么"></a>1、模板是什么</h4><ul><li>本质：字符串</li><li>有逻辑，如 v-if v-for 等</li><li>与 html 格式很像，但有很大区别</li><li>最终还要转换为 html 来显示</li><li>模板最终必须转换成 JS 代码，因为：<ul><li>有逻辑（v-if v-for），必须用 JS 才能实现（图灵完备）</li><li>转换为 html 渲染页面，必须用 JS 才能实现</li><li>因此，模板最重要转换成一个 JS 函数（render 函数）</li></ul></li></ul><h4 id="2、render-函数"><a href="#2、render-函数" class="headerlink" title="2、render 函数"></a>2、render 函数</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">/* 模板 */<br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>submit<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* render函数 */</span><br><span class="hljs-title function_">with</span>(<span class="hljs-params"><span class="hljs-variable language_">this</span></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">_c</span>(<br>        <span class="hljs-string">&#x27;div&#x27;</span>,<br>        &#123;<br>            <span class="hljs-attr">attrs</span>:&#123;<span class="hljs-string">&quot;id&quot;</span>:<span class="hljs-string">&quot;app&quot;</span>&#125;<br>        &#125;,<br>        [<br>            <span class="hljs-title function_">_c</span>(<br>                <span class="hljs-string">&#x27;div&#x27;</span>,<br>                [<span class="hljs-title function_">_c</span>(<br>                    <span class="hljs-string">&#x27;input&#x27;</span>,<br>                    &#123;<br>                        <span class="hljs-attr">directives</span>:[<br>                            &#123;<br>                                <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;model&quot;</span>,<br>                                <span class="hljs-attr">rawName</span>:<span class="hljs-string">&quot;v-model&quot;</span>,<br>                                <span class="hljs-attr">value</span>:(title),<br>                                <span class="hljs-attr">expression</span>:<span class="hljs-string">&quot;title&quot;</span><br>                            &#125;<br>                        ],<br>                        <span class="hljs-attr">domProps</span>:&#123;<br>                            <span class="hljs-string">&quot;value&quot;</span>:(title)<br>                        &#125;,<br>                        <span class="hljs-attr">on</span>:&#123;<br>                            <span class="hljs-string">&quot;input&quot;</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">$event</span>)&#123;<br>                                <span class="hljs-keyword">if</span>($event.<span class="hljs-property">target</span>.<span class="hljs-property">composing</span>)<br>                                    <span class="hljs-keyword">return</span>;<br>                                title=$event.<span class="hljs-property">target</span>.<span class="hljs-property">value</span><br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                   ),<br>                    <span class="hljs-title function_">_v</span>(<span class="hljs-string">&quot; &quot;</span>),<br>                    <span class="hljs-title function_">_c</span>(<br>                        <span class="hljs-string">&#x27;button&#x27;</span>,<br>                        &#123;<br>                            <span class="hljs-attr">on</span>:&#123;<br>                                <span class="hljs-string">&quot;click&quot;</span>:add<br>                            &#125;<br>                        &#125;,<br>                        [<span class="hljs-title function_">_v</span>(<span class="hljs-string">&quot;submit&quot;</span>)]<br>                    )<br>                ]<br>            ),<br>            <span class="hljs-title function_">_v</span>(<span class="hljs-string">&quot; &quot;</span>),<br>            <span class="hljs-title function_">_c</span>(<br>                <span class="hljs-string">&#x27;div&#x27;</span>,<br>                [<br>                    <span class="hljs-title function_">_c</span>(<br>                        <span class="hljs-string">&#x27;ul&#x27;</span>,<br>                        <span class="hljs-title function_">_l</span>((list),<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-title function_">_c</span>(<br>                                <span class="hljs-string">&#x27;li&#x27;</span>,<br>                                [<br>                                    <span class="hljs-title function_">_v</span>(<span class="hljs-title function_">_s</span>(item))<br>                                ]<br>                            )<br>                        &#125;)<br>                    )<br>                ]<br>            )<br>        ]<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>模板中所有信息都包含在了 render 函数中</li><li>this 即 vm</li><li>submit 即 this.submit 即 vm.submit，即 data 中的 submit</li><li>_c 即 this._c 即 vm._c</li></ul><h4 id="3、render-函数与-vdom"><a href="#3、render-函数与-vdom" class="headerlink" title="3、render 函数与 vdom"></a>3、render 函数与 vdom</h4><p>结合上面可以看出：</p><ul><li>vm._c 其实就相当于 snabbdom 中的 h 函数(因为snabbdom的h函数和render函数结构相似)</li><li>render 函数执行之后，返回的是 vnode</li><li>updateComponent 中实现了 vdom 的 patch</li><li>页面首次渲染执行 updateComponent</li><li>data 中每次修改属性，执行 updateComponent</li></ul><h2 id="六、整体流程"><a href="#六、整体流程" class="headerlink" title="六、整体流程"></a>六、整体流程</h2><ul><li>第一步：解析模板成 render 函数<ul><li>使用了with</li><li>模板中的所有信息都被 render 函数包含</li><li>模板中用到的 data 中的属性，都变成了 JS 变量</li><li>模板中的 v-model  v-for  v-on 都变成了 JS 逻辑</li><li>render 函数返回 vnode</li></ul></li><li>第二步：响应式开始监听<ul><li>Object.defineProperty</li><li>将 data 的属性代理到 vm 上</li></ul></li><li>第三步：首次渲染，显示页面，且绑定依赖<ul><li>初次渲染，执行 updateComponent，执行 vm._render()</li><li>执行 render 函数，会访问到 vm.list vm.title</li><li>会被响应式的 get 方法监听到</li><li>执行 updateComponent ，会走到 vdom 的 patch 方法</li><li>patch 将 vnode 渲染成 DOM ，初次渲染完成</li><li>为何要监听 get ，直接监听 set 不行吗？<ul><li>data 中有很多属性，有些被用到，有些可能不被用到</li><li>被用到的会走到 get ，不被用到的不会走到 get</li><li>未走到 get 中的属性，set 的时候我们也无需关心</li><li>避免不必要的重复渲染</li></ul></li></ul></li><li>第四步：data 属性变化，触发 rerender<ul><li>修改属性，被响应式的 set 监听到</li><li>set 中执行 updateComponent</li><li>updateComponent 重新执行 vm._render()</li><li>生成的 vnode 和 prevVnode ，通过 patch 进行对比</li><li>渲染到 html 中</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MVVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vdom</title>
    <link href="/2018/09/01/vdom/"/>
    <url>/2018/09/01/vdom/</url>
    
    <content type="html"><![CDATA[<h2 id="一、理解-vdom"><a href="#一、理解-vdom" class="headerlink" title="一、理解 vdom"></a>一、理解 vdom</h2><h4 id="1、什么是-vdom"><a href="#1、什么是-vdom" class="headerlink" title="1、什么是 vdom"></a>1、什么是 vdom</h4><ul><li>virtual dom ， 虚拟 DOM</li><li>用 JS 模拟 DOM 结构</li><li>DOM 变化的对比，放在 JS 层来做（图灵完备语言）</li><li>提高重绘性能</li></ul><span id="more"></span><h4 id="2、设计一个需求场景"><a href="#2、设计一个需求场景" class="headerlink" title="2、设计一个需求场景"></a>2、设计一个需求场景</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;20&#x27;</span>,<br>            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;北京&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;21&#x27;</span>,<br>            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海&#x27;</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>,<br>            <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,<br>            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广州&#x27;</span><br>        &#125;<br>]<br></code></pre></td></tr></table></figure><p>要求：</p><ul><li>将该数据展示成一个表格</li><li>随便修改一个信息，表格也跟着修改</li></ul><h4 id="3、用-jQuery-实现"><a href="#3、用-jQuery-实现" class="headerlink" title="3、用 jQuery 实现"></a>3、用 jQuery 实现</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn-change&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;jquery_3.2.1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> data = [</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;20&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;21&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海&#x27;</span></span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广州&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">]</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//渲染函数</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> $container = $(<span class="hljs-string">&#x27;#container&#x27;</span>)</span><br><span class="language-javascript">    <span class="hljs-comment">// 清空容器，重要！！！</span></span><br><span class="language-javascript">    $container.<span class="hljs-title function_">html</span>(<span class="hljs-string">&#x27;&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">//拼接 table</span></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> $table = $(<span class="hljs-string">&#x27;&lt;table&gt;&#x27;</span>)</span><br><span class="language-javascript">    $table.<span class="hljs-title function_">append</span>($(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;name&lt;/td&gt;&lt;td&gt;age&lt;/td&gt;&lt;td&gt;address&lt;/td&gt;&lt;/tr&gt;&#x27;</span>))</span><br><span class="language-javascript">    data.<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">         $table.<span class="hljs-title function_">append</span>($(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;&#x27;</span> + item.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="hljs-property">age</span> + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;td&gt;&#x27;</span> + item.<span class="hljs-property">address</span> + <span class="hljs-string">&#x27;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>))</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">    $container.<span class="hljs-title function_">append</span>($table)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">$(<span class="hljs-string">&#x27;#btn-change&#x27;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    data[<span class="hljs-number">1</span>].<span class="hljs-property">age</span> = <span class="hljs-number">30</span></span><br><span class="language-javascript">    data[<span class="hljs-number">2</span>].<span class="hljs-property">address</span> = <span class="hljs-string">&#x27;深圳&#x27;</span></span><br><span class="language-javascript">    <span class="hljs-comment">//re-render</span></span><br><span class="language-javascript">    <span class="hljs-title function_">render</span>(data)</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-comment">//页面加载完立刻执行(初次渲染)</span></span><br><span class="language-javascript"><span class="hljs-title function_">render</span>(data)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、遇到的问题"><a href="#4、遇到的问题" class="headerlink" title="4、遇到的问题"></a>4、遇到的问题</h4><ul><li>DOM 操作是“昂贵”的，js 运行效率高</li><li>尽量减少 DOM 操作，而不是“推倒重来”</li><li>项目越复杂，影响就越严重</li><li>vdom 即可解决这个问题</li></ul><h2 id="二、vdom-的应用及核心-API"><a href="#二、vdom-的应用及核心-API" class="headerlink" title="二、vdom 的应用及核心 API"></a>二、vdom 的应用及核心 API</h2><h4 id="1、snabbdom"><a href="#1、snabbdom" class="headerlink" title="1、snabbdom"></a>1、snabbdom</h4><h6 id="i、h函数"><a href="#i、h函数" class="headerlink" title="i、h函数"></a>i、h函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    tag:&#x27;ul&#x27;,</span><br><span class="hljs-comment">    attrs: &#123;</span><br><span class="hljs-comment">        id:&#x27;list&#x27;</span><br><span class="hljs-comment">    &#125;,</span><br><span class="hljs-comment">    children: [</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            tag: &#x27;li&#x27;,</span><br><span class="hljs-comment">            attrs: &#123; className: &#x27;item&#x27; &#125;,</span><br><span class="hljs-comment">            children: [&#x27;Item1&#x27;]</span><br><span class="hljs-comment">        &#125;,&#123;</span><br><span class="hljs-comment">            tag: &#x27;li&#x27;,</span><br><span class="hljs-comment">            attrs: &#123; className: &#x27;item&#x27; &#125;,</span><br><span class="hljs-comment">            children: [&#x27;Item2&#x27;]</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    ]</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">var</span> vnode = <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;ul#list&#x27;</span>, &#123;&#125;, [<br>    <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item1&#x27;</span>),<br>    <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item2&#x27;</span>)<br>])<br></code></pre></td></tr></table></figure><h6 id="ii、patch函数"><a href="#ii、patch函数" class="headerlink" title="ii、patch函数"></a>ii、patch函数</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vnode = <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;ul#list&#x27;</span>, &#123;&#125;, [<br>    <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item1&#x27;</span>),<br>    <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item2&#x27;</span>)<br>])<br><br><span class="hljs-keyword">var</span> container =  <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>)<br><span class="hljs-title function_">patch</span>(container, vnode)<br><br><span class="hljs-comment">//模拟改变</span><br><span class="hljs-keyword">var</span> btnChange = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn-change&#x27;</span>)<br>btnChange.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> newVnode = <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;ul#list&#x27;</span>, &#123;&#125;, [<br>        <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item 111&#x27;</span>),<br>        <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item 222&#x27;</span>),<br>        <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;li.item&#x27;</span>, &#123;&#125;, <span class="hljs-string">&#x27;Item 333&#x27;</span>)<br>    ])<br>    <span class="hljs-title function_">patch</span>(vnode, newVnode)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、重做之后的-demo"><a href="#2、重做之后的-demo" class="headerlink" title="2、重做之后的 demo"></a>2、重做之后的 demo</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!doctype <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;btn-change&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snabbdom.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snabbdom-class.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snabbdom-props.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snabbdom-style.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;snabbdom-eventlisteners.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;h.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> snabbdom = <span class="hljs-variable language_">window</span>.<span class="hljs-property">snabbdom</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> patch = snabbdom.<span class="hljs-title function_">init</span>([</span><br><span class="language-javascript">            snabbdom_class,</span><br><span class="language-javascript">            snabbdom_props,</span><br><span class="language-javascript">            snabbdom_style,</span><br><span class="language-javascript">            snabbdom_eventlisteners</span><br><span class="language-javascript">        ])</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> h = snabbdom.<span class="hljs-property">h</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> data = [</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;20&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;北京&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;21&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;上海&#x27;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;王五&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;22&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;广州&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        ]</span><br><span class="language-javascript"></span><br><span class="language-javascript">        data.<span class="hljs-title function_">unshift</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;姓名&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">age</span>: <span class="hljs-string">&#x27;年龄&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;地址&#x27;</span></span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span>  container = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;container&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> vnode</span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> newVnode = <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;table&#x27;</span>, &#123;&#125;, data.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> tds = []</span><br><span class="language-javascript">                <span class="hljs-keyword">var</span> i</span><br><span class="language-javascript">                <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> item) &#123;</span><br><span class="language-javascript">                    <span class="hljs-keyword">if</span>(item.<span class="hljs-title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="language-javascript">                        tds.<span class="hljs-title function_">push</span>(<span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;td&#x27;</span>, &#123;&#125;, item[i] + <span class="hljs-string">&#x27;&#x27;</span>))</span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;tr&#x27;</span>, &#123;&#125;, tds)</span><br><span class="language-javascript">            &#125;))</span><br><span class="language-javascript"></span><br><span class="language-javascript">            <span class="hljs-keyword">if</span>(vnode) &#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">patch</span>(vnode, newVnode)</span><br><span class="language-javascript">            &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="language-javascript">                <span class="hljs-title function_">patch</span>(container, newVnode)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">            vnode = newVnode</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">render</span>(data)</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> btnChange = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;btn-change&#x27;</span>)</span><br><span class="language-javascript">        btnChange.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            data[<span class="hljs-number">1</span>].<span class="hljs-property">age</span> = <span class="hljs-number">30</span></span><br><span class="language-javascript">            data[<span class="hljs-number">2</span>].<span class="hljs-property">address</span> = <span class="hljs-string">&#x27;深圳&#x27;</span></span><br><span class="language-javascript">            <span class="hljs-title function_">render</span>(data)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注：</p><ul><li>使用 data 生成 vnode</li><li>第一次渲染，将 vnode 渲染到 #container 中</li><li>并将 vnode 缓存下来</li><li>修改 data 之后，用新 data 生成 newVnode</li><li>将 vnode 和 newVnode 对比</li></ul><h4 id="3、核心-API"><a href="#3、核心-API" class="headerlink" title="3、核心 API"></a>3、核心 API</h4><ul><li>h(‘&lt;标签名&gt;’, {…属性…}, […子元素…])</li><li>h(‘&lt;标签名&gt;’, {…属性…}, ‘….’)</li><li>patch(container, vnode)</li><li>patch(vnode, newVnode)</li></ul><h2 id="三、diff-算法"><a href="#三、diff-算法" class="headerlink" title="三、diff 算法"></a>三、diff 算法</h2><h4 id="1、什么是-diff-算法"><a href="#1、什么是-diff-算法" class="headerlink" title="1、什么是 diff 算法"></a>1、什么是 diff 算法</h4><ul><li>是 linux 的基础命令</li><li>diff命令可以找出两个文本内容的不用的地方。</li><li>git diff可以查看修改的内容</li></ul><h4 id="2、vdom-为何用-diff-算法"><a href="#2、vdom-为何用-diff-算法" class="headerlink" title="2、vdom 为何用 diff 算法"></a>2、vdom 为何用 diff 算法</h4><ul><li>vdom 中应用 diff 算法是为了找出需要更新的节点</li><li>DOM 操作是“昂贵”的，因此尽量减少 DOM 操作</li><li>找出本次 DOM 必须更新的节点来更新，其他的不更新</li><li>这个“找出”的过程，就需要 diff 算法</li></ul><h4 id="3、diff-算法的实现过程"><a href="#3、diff-算法的实现过程" class="headerlink" title="3、diff 算法的实现过程"></a>3、diff 算法的实现过程</h4><ul><li>patch(container, vnode)</li><li>patch(vnode, newVnode)</li></ul><h4 id="4、diff-算法的核心逻辑"><a href="#4、diff-算法的核心逻辑" class="headerlink" title="4、diff 算法的核心逻辑"></a>4、diff 算法的核心逻辑</h4><ul><li>createElement</li><li>updateChildren</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vdom</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异步</title>
    <link href="/2018/08/31/%E5%BC%82%E6%AD%A5/"/>
    <url>/2018/08/31/%E5%BC%82%E6%AD%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="一、单线程"><a href="#一、单线程" class="headerlink" title="一、单线程"></a>一、单线程</h2><blockquote><p>只有一个线程，只能做一件事</p></blockquote><h4 id="1、单线程原因：避免-DOM-渲染冲突"><a href="#1、单线程原因：避免-DOM-渲染冲突" class="headerlink" title="1、单线程原因：避免 DOM 渲染冲突"></a>1、单线程原因：避免 DOM 渲染冲突</h4><ul><li>浏览器需要渲染 DOM</li><li>JS 可以修改 DOM 结构</li><li>JS 执行的时候，浏览器 DOM 渲染会暂停</li><li>两段 JS 也不能同时执行（都修改 DOM 就冲突了）</li><li>webworker 支持多线程，但是不能访问 DOM</li></ul><span id="more"></span><h4 id="2、解决方案——异步"><a href="#2、解决方案——异步" class="headerlink" title="2、解决方案——异步"></a>2、解决方案——异步</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">100</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">200</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">300</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">400</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;./data.json&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">300</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">400</span>)<br></code></pre></td></tr></table></figure><h2 id="二、异步的实现方式——event-loop"><a href="#二、异步的实现方式——event-loop" class="headerlink" title="二、异步的实现方式——event loop"></a>二、异步的实现方式——event loop</h2><blockquote><p>事件轮询，JS 实现异步的具体解决方案</p></blockquote><h4 id="1、机制"><a href="#1、机制" class="headerlink" title="1、机制"></a>1、机制</h4><ul><li>同步代码，直接执行</li><li>异步函数先放在异步队列中</li><li>待同步函数执行完毕，轮询执行异步队列的函数</li></ul><h4 id="2、示例"><a href="#2、示例" class="headerlink" title="2、示例"></a>2、示例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;./data.json&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;c&#x27;</span>)<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;d&#x27;</span>)<br></code></pre></td></tr></table></figure><p>注：结果理论上是d-&gt;c-&gt;a-&gt;b或者d-&gt;c-&gt;b-&gt;a，但测试结果为d-&gt;a-&gt;c-&gt;b。可能本地获取速度太快但原因，不用纠结。。</p><h2 id="三、jquery解决异步"><a href="#三、jquery解决异步" class="headerlink" title="三、jquery解决异步"></a>三、jquery解决异步</h2><h4 id="1、jquery-1-5的前后变化"><a href="#1、jquery-1-5的前后变化" class="headerlink" title="1、jquery 1.5的前后变化"></a>1、jquery 1.5的前后变化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//jquery 1.5之前</span><br><span class="hljs-keyword">var</span> ajax = $.<span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;data.json&#x27;</span>,<br>    <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success1&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success2&#x27;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success3&#x27;</span>)<br>    &#125;,<br>    <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    &#125;<br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ajax)  <span class="hljs-comment">//返回一个XHR对象</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//jquery 1.5之后</span><br><span class="hljs-keyword">var</span> ajax = $.<span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>)<br>ajax.<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success1&#x27;</span>)<br>    &#125;)<br>    .<span class="hljs-title function_">fail</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>    &#125;)<br>    .<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success2&#x27;</span>)<br>    &#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ajax)  <span class="hljs-comment">//返回一个deferred对象</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//jquery 1.5之后</span><br><span class="hljs-keyword">var</span> ajax = $.<span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>)<br>ajax.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success1&#x27;</span>)<br>    &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error1&#x27;</span>)<br>    &#125;)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;success2&#x27;</span>)<br>    &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;error2&#x27;</span>)<br>    &#125;)<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>无法改变 JS 异步和单线程的本质</li><li>只能从写法上杜绝 callback 这种形式</li><li>它是一种语法糖形式，但是解耦了代码</li><li>很好的体现：开放封闭原则</li></ul><h4 id="2、jQuery-Deferred"><a href="#2、jQuery-Deferred" class="headerlink" title="2、jQuery Deferred"></a>2、jQuery Deferred</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">waitHandle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> dtd = $.<span class="hljs-title class_">Deferred</span>()  <span class="hljs-comment">//创建一个 deferred 对象</span><br><br>    <span class="hljs-comment">//使用setTimeout函数操作异步</span><br>    <span class="hljs-keyword">var</span> wait = <span class="hljs-keyword">function</span> (<span class="hljs-params">dtd</span>) &#123;  <span class="hljs-comment">//要求传入一个 deferred 对象</span><br>        <span class="hljs-keyword">var</span> task = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行完成&#x27;</span>)<br>            dtd.<span class="hljs-title function_">resolve</span>()  <span class="hljs-comment">//表示异步任务已经完成</span><br>            <span class="hljs-comment">// dtd.reject()  //表示异步任务失败或出错</span><br>        &#125;<br>        <span class="hljs-built_in">setTimeout</span>(task, <span class="hljs-number">1000</span>)<br><br>        <span class="hljs-keyword">return</span> dtd  <span class="hljs-comment">//要求返回 deferred 对象</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">wait</span>(dtd)  <span class="hljs-comment">//一定要有返回值</span><br>&#125;<br><br><span class="hljs-keyword">var</span> w = <span class="hljs-keyword">new</span> <span class="hljs-title function_">waitHandle</span>()<br>w.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok 1&#x27;</span>)<br>&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err 1&#x27;</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok 2&#x27;</span>)<br>&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err 2&#x27;</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok 3&#x27;</span>)<br>&#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err 3&#x27;</span>)<br>&#125;)<br><br><span class="hljs-comment">//也可以使用w.done  w.fail</span><br></code></pre></td></tr></table></figure><p>注：</p><ul><li>dtd 的 API 可分成两类，用意不同<ul><li>第一类： dtd.resolve  dtd.reject</li><li>第二类： dtd.then  dtd.done  dtd.fail</li></ul></li></ul><h4 id="3、使用-dtd-promise"><a href="#3、使用-dtd-promise" class="headerlink" title="3、使用 dtd.promise()"></a>3、使用 dtd.promise()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">waitHandle</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> dtd = $.<span class="hljs-title class_">Deferred</span>()<br><br>    <span class="hljs-keyword">var</span> wait = <span class="hljs-keyword">function</span> (<span class="hljs-params">dtd</span>) &#123;<br>        <span class="hljs-keyword">var</span> task = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;执行完成&#x27;</span>)<br>            dtd.<span class="hljs-title function_">resolve</span>()<br>            <span class="hljs-comment">// dtd.reject()</span><br>        &#125;<br>        <span class="hljs-built_in">setTimeout</span>(task, <span class="hljs-number">1000</span>)<br><br>        <span class="hljs-keyword">return</span> dtd.<span class="hljs-title function_">promise</span>()  <span class="hljs-comment">//这里返回的是 promise 而不是直接返回 deferred对象</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">wait</span>(dtd)<br>&#125;<br><br><span class="hljs-keyword">var</span> w = <span class="hljs-keyword">new</span> <span class="hljs-title function_">waitHandle</span>()  <span class="hljs-comment">//经过改动，w 接收的就是一个 promise 对象</span><br>$.<span class="hljs-title function_">when</span>(w)<br>    .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;ok 1&#x27;</span>)<br>    &#125;,<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;err 1&#x27;</span>)<br>    &#125;)<br><br><span class="hljs-comment">// w.reject()  //执行这句话会直接报错</span><br></code></pre></td></tr></table></figure><h2 id="四、Promise-的基本使用和原理"><a href="#四、Promise-的基本使用和原理" class="headerlink" title="四、Promise 的基本使用和原理"></a>四、Promise 的基本使用和原理</h2><h4 id="1、异常捕获"><a href="#1、异常捕获" class="headerlink" title="1、异常捕获"></a>1、异常捕获</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 规定：then 只接收一个参数，最后统一用 catch 捕获异常</span><br>result.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">img</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>, img.<span class="hljs-property">width</span>)<br>    <span class="hljs-keyword">return</span> img<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">img</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2</span>, img.<span class="hljs-property">height</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ex</span>) &#123;<br>    <span class="hljs-comment">//最后统一 catch</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ex)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2、多个串联"><a href="#2、多个串联" class="headerlink" title="2、多个串联"></a>2、多个串联</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> src1 = <span class="hljs-string">&#x27;https://avatars3.githubusercontent.com/u/42384842?s=460&amp;v=4&#x27;</span><br><span class="hljs-keyword">var</span> result1 = <span class="hljs-title function_">loadImg</span>(src1)<br><span class="hljs-keyword">var</span> src2 = <span class="hljs-string">&#x27;https://jasonchencc.github.io/images/favicon.png&#x27;</span><br><span class="hljs-keyword">var</span> result2 = <span class="hljs-title function_">loadImg</span>(src2)<br><br><span class="hljs-comment">//链式操作</span><br>result1.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">img1</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一个图片加载完成&#x27;</span>,img1.<span class="hljs-property">width</span>)<br>    <span class="hljs-keyword">return</span> result2<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">img2</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二个图片加载完成&#x27;</span>,img2.<span class="hljs-property">width</span>)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ex</span>) &#123;<br>    <span class="hljs-comment">//最后统一 catch</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ex)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3、Promise-all-和-Promise-race"><a href="#3、Promise-all-和-Promise-race" class="headerlink" title="3、Promise.all 和 Promise.race"></a>3、Promise.all 和 Promise.race</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> src1 = <span class="hljs-string">&#x27;https://avatars3.githubusercontent.com/u/42384842?s=460&amp;v=4&#x27;</span><br><span class="hljs-keyword">var</span> result1 = <span class="hljs-title function_">loadImg</span>(src1)<br><span class="hljs-keyword">var</span> src2 = <span class="hljs-string">&#x27;https://jasonchencc.github.io/images/favicon.png&#x27;</span><br><span class="hljs-keyword">var</span> result2 = <span class="hljs-title function_">loadImg</span>(src2)<br><br><span class="hljs-comment">// romise.all 接收一个 promise 对象的数组</span><br><span class="hljs-comment">// 待全部完成后，统一执行 success</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([result1, result2]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">datas</span>) &#123;<br>    <span class="hljs-comment">//接收到的 datas 是一个数组，依次包含了多个 promise 返回的内容</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all&#x27;</span>, datas[<span class="hljs-number">0</span>])<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;all&#x27;</span>, datas[<span class="hljs-number">1</span>])<br>&#125;)<br><br><span class="hljs-comment">// Promise.race接收一个包含多个 promise 对象的数组</span><br><span class="hljs-comment">// 只要有一个完成，就执行 success</span><br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">race</span>([result1, result2]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-comment">// data 即最先完成的 promise  的返回值</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;race&#x27;</span>, data)<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="4、Promise-标准"><a href="#4、Promise-标准" class="headerlink" title="4、Promise 标准"></a>4、Promise 标准</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadImg</span>(<span class="hljs-params">src</span>) &#123;<br>    <span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>         <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>         <span class="hljs-comment">//语法错误会 throw new Error(&#x27;自定义错误&#x27;)</span><br>         img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-title function_">resolve</span>(img)<br>         &#125;<br>         img.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>             <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;图片加载失败&#x27;</span>)<br>         &#125;<br>         img.<span class="hljs-property">src</span> = src<br>     &#125;)<br>     <span class="hljs-keyword">return</span> promise<br> &#125;<br><br> result1.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">img1</span>) &#123;<br>             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第一个图片加载完成&#x27;</span>,img1.<span class="hljs-property">width</span>)<br>             <span class="hljs-keyword">return</span> result2<br>         &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">img2</span>) &#123;<br>             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;第二个图片加载完成&#x27;</span>,img2.<span class="hljs-property">width</span>)<br>         &#125;)<br></code></pre></td></tr></table></figure><ul><li>感想<ul><li>任何技术推广使用都需要一套标准来支撑</li><li>如 html js css http 等，无规矩不成方圆</li><li>任何不符合标准的东西，终将会被用户抛弃</li><li>不要挑战标准，不要自造标准</li></ul></li><li>状态变化<ul><li>三种状态：pending fulfilled rejected</li><li>初始状态是 pending</li><li>pending 变为 fulfilled ，或者 pending 变为 rejected</li><li>状态变化不可逆</li></ul></li><li>then<ul><li>Promise 实例必须实现 then 这个方法</li><li>then() 必须可以接收两个函数作为参数</li><li>then() 返回的必须是一个 Promise 实例</li></ul></li></ul><h2 id="五、async-await"><a href="#五、async-await" class="headerlink" title="五、async-await"></a>五、async-await</h2><h4 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h4><ul><li>then 只是将 callback 拆分了</li><li>async&#x2F;await 是最直接的同步写法</li><li>使用了 Promise ，并没有和 Promise 冲突</li><li>完全是同步的写法，再也没有回调函数</li><li>但是：改变不了 JS 单线程、异步的本质</li></ul><h4 id="2、用法"><a href="#2、用法" class="headerlink" title="2、用法"></a>2、用法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">loadImg</span>(<span class="hljs-params">src</span>) &#123;<br>    <span class="hljs-keyword">var</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) &#123;<br>        <span class="hljs-keyword">var</span> img = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>        <span class="hljs-comment">//语法错误会 throw new Error(&#x27;自定义错误&#x27;)</span><br>        img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">resolve</span>(img)<br>        &#125;<br>        img.<span class="hljs-property">onerror</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;图片加载失败&#x27;</span>)<br>        &#125;<br>        img.<span class="hljs-property">src</span> = src<br>    &#125;)<br>    <span class="hljs-keyword">return</span> promise<br>&#125;<br><br><span class="hljs-keyword">var</span> src1 = <span class="hljs-string">&#x27;https://avatars3.githubusercontent.com/u/42384842?s=460&amp;v=4&#x27;</span><br><span class="hljs-keyword">var</span> src2 = <span class="hljs-string">&#x27;https://jasonchencc.github.io/images/favicon.png&#x27;</span><br><br><span class="hljs-keyword">const</span> load = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> result1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">loadImg</span>(src1)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result1)<br>    <span class="hljs-keyword">const</span> result2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">loadImg</span>(src2)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result2)<br>&#125;<br><span class="hljs-title function_">load</span>()<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>使用 await ，函数必须用 async 标识</li><li>await 后面跟的是一个 Promise 实例</li><li>需要引入 babel-polyfill</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery对原型的使用</title>
    <link href="/2018/08/31/%E5%8E%9F%E5%9E%8B/"/>
    <url>/2018/08/31/%E5%8E%9F%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、jquery和zepto对原型的使用"><a href="#一、jquery和zepto对原型的使用" class="headerlink" title="一、jquery和zepto对原型的使用"></a>一、jquery和zepto对原型的使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> $p = $(<span class="hljs-string">&#x27;p&#x27;</span>)<br>        $p.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;font-size&#x27;</span>, <span class="hljs-string">&#x27;40px&#x27;</span>)  <span class="hljs-comment">// css是原型方法</span><br>        <span class="hljs-title function_">alert</span>($p.<span class="hljs-title function_">html</span>())  <span class="hljs-comment">// html是原型方法</span><br><br>        <span class="hljs-keyword">var</span> $div1 = $(<span class="hljs-string">&#x27;#div1&#x27;</span>)<br>        $div1.<span class="hljs-title function_">css</span>(<span class="hljs-string">&#x27;color&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>)  <span class="hljs-comment">// css是原型方法</span><br>        <span class="hljs-title function_">alert</span>($div1.<span class="hljs-title function_">html</span>())  <span class="hljs-comment">// html是原型方法</span><br></code></pre></td></tr></table></figure><span id="more"></span><h2 id="二、zepto-如何使用原型"><a href="#二、zepto-如何使用原型" class="headerlink" title="二、zepto 如何使用原型"></a>二、zepto 如何使用原型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 弱化了源码，只是用来理解zepto是如何使用原型的</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable language_">window</span></span>) &#123;<br>    <span class="hljs-keyword">var</span> zepto = &#123;&#125;<br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">Z</span>(<span class="hljs-params">dom,selector</span>) &#123;<br>        <span class="hljs-keyword">var</span> i, len = dom ? dom.<span class="hljs-property">length</span> : <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; len; i++) &#123;<br>            <span class="hljs-variable language_">this</span>[i] = dom [i]<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = len<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">selector</span> = selector || <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br><br>    zepto.<span class="hljs-property">Z</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">dom, selector</span>) &#123;<br>        <span class="hljs-comment">//Z new了一个实例，必然有它的构造函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title function_">Z</span>(dom, selector)<br>    &#125;<br><br>    zepto.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">selector</span>) &#123;<br>        <span class="hljs-keyword">var</span> slice = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span><br>        <span class="hljs-keyword">var</span> dom = slice.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(selector))<br>        <span class="hljs-keyword">return</span> zepto.<span class="hljs-title function_">Z</span>(dom,selector)<br>    &#125;<br><br>    <span class="hljs-comment">// 即使用 zepto 时候的$</span><br>    <span class="hljs-keyword">var</span> $ = <span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>) &#123;<br>        <span class="hljs-keyword">return</span> zepto.<span class="hljs-title function_">init</span>(selector)<br>    &#125;<br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">$</span> = $<br><br>    $.fn = &#123;<br>        <span class="hljs-attr">css</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;css&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-attr">html</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;这是一个模拟的html&#x27;</span><br>        &#125;<br>    &#125;<br>    Z.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = $.fn<br>&#125;)(<span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure><p>注：如$(‘p’)，则先会返回一个zepto.init函数，zepto.init方法会返回一个zepto.Z函数，zepto.Z函数new了一个Z的实例，而Z函数就是构造函数，然后把$.fn挂在Z函数的原型上，$.fn是zepto的api。</p><h2 id="三、jquery-如何使用原型"><a href="#三、jquery-如何使用原型" class="headerlink" title="三、jquery 如何使用原型"></a>三、jquery 如何使用原型</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 弱化了源码，只是用来理解jquery是如何使用原型的</span><br>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> jQuery = <span class="hljs-keyword">function</span> (<span class="hljs-params">selector</span>) &#123;<br>        <span class="hljs-comment">//出现了new关键字，所以去找它的构造函数</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> jQuery.<span class="hljs-property">fn</span>.<span class="hljs-title function_">init</span>(selector)<br>    &#125;<br><br>    <span class="hljs-comment">//初始化jquery.fn</span><br>    jQuery.<span class="hljs-property">fn</span> = &#123;<br>        <span class="hljs-attr">css</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">key, value</span>) &#123;<br>            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;css&#x27;</span>)<br>        &#125;,<br>        <span class="hljs-attr">html</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;html&#x27;</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 定义了构造函数</span><br>    <span class="hljs-keyword">var</span> init = jQuery.<span class="hljs-property">fn</span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">selector</span>) &#123;<br>        <span class="hljs-keyword">var</span> slice = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">slice</span><br>        <span class="hljs-keyword">var</span> dom = slice.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(selector))<br><br>        <span class="hljs-keyword">var</span> i, len = dom ? dom.<span class="hljs-property">length</span> : <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; length; i++)&#123;<br>            <span class="hljs-variable language_">this</span>[i] = dom[i]<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">length</span> = len<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">selector</span> = selector || <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br><br>    <span class="hljs-comment">//定义原型</span><br>    init.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = jQuery.<span class="hljs-property">fn</span><br><br>    <span class="hljs-variable language_">window</span>.<span class="hljs-property">$</span> = jQuery<br>&#125;)(<span class="hljs-variable language_">window</span>)<br></code></pre></td></tr></table></figure><p>注：如$(‘p’)，会先new一个jQuery.fn.init的实例，而jQuery.fn.init就是构造函数，最后初始化jQuery.fn并挂在了jQuery.fn.init的原型上。$.fn就是jquery的api或自定义扩展的api。</p><p>注：为何要把原型方法放在 $.fn ？</p><ul><li>只有 $ 会暴露在 window 全局变量</li><li>将插件扩展统一到 $.fn.xxx 这一个接口，方便使用</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>H5、CSS3总结</title>
    <link href="/2018/08/30/H5%E3%80%81CSS3%E6%80%BB%E7%BB%93/"/>
    <url>/2018/08/30/H5%E3%80%81CSS3%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、HTML5"><a href="#一、HTML5" class="headerlink" title="一、HTML5"></a>一、HTML5</h2><h4 id="1、新特性"><a href="#1、新特性" class="headerlink" title="1、新特性"></a>1、新特性</h4><ul><li>用于绘画的Canvas元素</li><li>用于媒介回放的video和audio元素</li><li>对本地离线存储的更好的支持</li><li>新的特殊内容元素，如：article、footer、header、nav、section</li><li>新的表单控件，如：calendar、date、time、email、url、search</li></ul><span id="more"></span><h4 id="2、H5拖放"><a href="#2、H5拖放" class="headerlink" title="2、H5拖放"></a>2、H5拖放</h4><p>步骤：</p><ol><li>设置元素为可拖放。<code>draggable=&quot;true&quot;</code></li><li>拖动什么。<code>ondragstarrt</code>和<code>setData()</code></li><li>放到何处。<code>ondragover</code>(ev.preventDefault())</li><li>进行放置。<code>ondrop</code>和<code>getData()</code>(ev.preventDefault())</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">HTML</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-id">#div1</span> &#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">198px</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">66px</span>;<span class="hljs-attribute">padding</span>:<span class="hljs-number">10px</span>;<span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#aaaaaa</span>;&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">allowDrop</span>(<span class="hljs-params">ev</span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript">ev.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drag</span>(<span class="hljs-params">ev</span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript">ev.<span class="hljs-property">dataTransfer</span>.<span class="hljs-title function_">setData</span>(<span class="hljs-string">&quot;Text&quot;</span>,ev.<span class="hljs-property">target</span>.<span class="hljs-property">id</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">drop</span>(<span class="hljs-params">ev</span>)</span><br><span class="language-javascript">&#123;</span><br><span class="language-javascript">ev.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> data=ev.<span class="hljs-property">dataTransfer</span>.<span class="hljs-title function_">getData</span>(<span class="hljs-string">&quot;Text&quot;</span>);</span><br><span class="language-javascript">ev.<span class="hljs-property">target</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(data));</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>请把 W3School 的图片拖放到矩形中：<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;div1&quot;</span> <span class="hljs-attr">ondrop</span>=<span class="hljs-string">&quot;drop(event)&quot;</span> <span class="hljs-attr">ondragover</span>=<span class="hljs-string">&quot;allowDrop(event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;drag1&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/i/eg_dragdrop_w3school.gif&quot;</span> <span class="hljs-attr">draggable</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">ondragstart</span>=<span class="hljs-string">&quot;drag(event)&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3、Canvas"><a href="#3、Canvas" class="headerlink" title="3、Canvas"></a>3、Canvas</h4><blockquote><p>Canvas拥有多种绘制路径、矩形、图形、字符及添加图像的方法。</p></blockquote><p>步骤：</p><ol><li>创建Canvas元素</li><li>通过javascript控制<ol><li>i、JS通过id寻找canvas元素</li><li>ii、创建context对象</li><li>ii、通过对象的方法绘制图形</li></ol></li><li>理解坐标，如：fillRect(0,0,150,75)是在画布上绘制150x75的矩形，从左上角开始(0,0)</li></ol><h4 id="4、svg"><a href="#4、svg" class="headerlink" title="4、svg"></a>4、svg</h4><ul><li>可伸缩矢量图形</li><li>用于定义用于网络的基于矢量的图形</li><li>使用XML格式定义图形</li></ul><h4 id="5、地理定位"><a href="#5、地理定位" class="headerlink" title="5、地理定位"></a>5、地理定位</h4><ul><li>检测是否支持地理定位</li><li>如支持，运行getCurrentPosition()，如不支持，向用户提示消息</li><li>getCurrentPosition()运行成功，向showposition中规定的函数返回一个coordinates对象</li><li>showPosition()函数获得并显示经度和纬度</li><li>getCurrentPosition(showPosition,showError)<ul><li>pemission denied 用户不允许地理定位</li><li>position unavailable 无法获取当前位置</li><li>Timeout 操作超时</li></ul></li><li>在地图中显示结果：将经纬度传入谷歌或百度地图的api<ul><li>watchPosition() 返回用户当前位置，并继续返回用户移动时的位置</li><li>clearWatch() 停止watchPosition()方法</li></ul></li></ul><h4 id="6、web存储"><a href="#6、web存储" class="headerlink" title="6、web存储"></a>6、web存储</h4><ul><li>localStorage(无时间限制)<ul><li>localStorage.setItem(“lastname”,”Chen”)</li><li>localStorage.getItem(“lastname”)</li><li>localStorage.pagecount</li></ul></li><li>sessionStorage(针对一个session进行数据存储，窗口关闭后，数据会被删除)<ul><li>sessionStorage.clickcount</li><li>sessionStorage.pagecount</li></ul></li></ul><h4 id="7、Manifest"><a href="#7、Manifest" class="headerlink" title="7、Manifest"></a>7、Manifest</h4><ul><li>文件扩展名：.appcache</li><li>在<code>&lt;hmtl&gt;</code>标签中包含此属性</li><li>分三部分，如下：<ul><li>CACHE MANIFEST<br>  　　＃ 2012-2-21  v1.0.0<br>  　　theme.css<br>  　　logo.gif<br>  　　main.js</li><li>NETWORK<br>  　　＃ 2012-2-21  v1.0.0<br>  　　theme.css<br>  　　logo.gif<br>  　　main.js</li><li>FALLBACK<br>  　　&#x2F;html5&#x2F;  &#x2F;404.html  (第一个是URI资源，第二个是替补)</li></ul></li></ul><h4 id="8、web-worker"><a href="#8、web-worker" class="headerlink" title="8、web worker"></a>8、web worker</h4><blockquote><p>运行在后台的JS</p></blockquote><p>步骤：</p><ol><li>创建web worker文件</li><li>创建web worker对象(w&#x3D;new worker(“demo.js”))</li><li>终止web worker(w.terminate())</li></ol><ul><li>postMessage()向HTML页面传回一段消息</li><li>onmessage事件监听器(event.data)</li></ul><h4 id="9、服务器发送事件server-sent-event"><a href="#9、服务器发送事件server-sent-event" class="headerlink" title="9、服务器发送事件server-sent event"></a>9、服务器发送事件server-sent event</h4><blockquote><p>网页自动获取来自服务器的更新</p></blockquote><p>步骤：</p><ol><li>创建EventSource对象，发送更新页面的URI(demo.php)</li><li>每接收一次更新，就会发生onmessage事件</li><li>将event.data更新到指定id的元素中</li></ol><h4 id="10、input类型"><a href="#10、input类型" class="headerlink" title="10、input类型"></a>10、input类型</h4><ul><li>email</li><li>url</li><li>number</li><li>range</li><li>date<ul><li>type&#x3D;date 选取日、月、年</li><li>type&#x3D;month 月、年</li><li>type&#x3D;week 选取周和年</li><li>type&#x3D;time 选取时间(小时和分钟)</li><li>type&#x3D;datetime 选取时间、日、月、年(UTC时间)</li><li>type&#x3D;datetime-local 选取时间、日、月、年(本地时间)</li></ul></li><li>search</li><li>tel</li><li>color</li></ul><h4 id="11、表单元素"><a href="#11、表单元素" class="headerlink" title="11、表单元素"></a>11、表单元素</h4><ul><li>datalist<br> - 是输入域的选项列表<br> - datalist内的option元素创建的<br> - datalist绑定到输入域，用输入域的list属性引用datalist的id</li><li>keygen<ul><li>密钥对生成器，私钥(private key)存储于客户端，公钥(public key)被发送到服务器，公钥可用于之后验证用户的客户端证书</li></ul></li><li>output</li></ul><h4 id="12、新表单属性"><a href="#12、新表单属性" class="headerlink" title="12、新表单属性"></a>12、新表单属性</h4><ul><li>autocomplete，适用于：<ul><li>form</li><li>input：text,search,url,telephone,email,password,datepickes,range,color</li></ul></li><li>form,适用于所有input类型，必须引用所属表单的id</li><li>表单重写属性<ul><li>formaction</li><li>formencype</li><li>formmethod</li><li>formnovalidate</li><li>formtarget</li></ul></li><li>height和width</li><li>list，规定输入域的datalist，datalist是输入域的选项列表</li><li>min、max、step，适用于：<ul><li>datepickers</li><li>number</li><li>range</li></ul></li><li>multiple，适用于：<ul><li>email</li><li>file</li></ul></li><li>novalidate</li><li>pattern</li><li>placeholder</li><li>required</li></ul><h2 id="二、CSS3"><a href="#二、CSS3" class="headerlink" title="二、CSS3"></a>二、CSS3</h2><h4 id="1、边框"><a href="#1、边框" class="headerlink" title="1、边框"></a>1、边框</h4><ul><li>border-radius</li><li>box-shadow，如：10px 10px 5px #888888</li><li>border-image，如：url(a.png) 30 30 round,参数分别为图片路径、图片边框向内偏移量、边框宽度、铺满方式。</li></ul><h4 id="2、背景"><a href="#2、背景" class="headerlink" title="2、背景"></a>2、背景</h4><ul><li>background-size</li><li>background-roigin,属性有：<ul><li>border-box</li><li>padding-box</li><li>content-box</li></ul></li><li>多重背景图片，如：background-image:url(a.gif),url(b.gif)</li></ul><h4 id="3、文本效果"><a href="#3、文本效果" class="headerlink" title="3、文本效果"></a>3、文本效果</h4><ul><li>text-shadow,如：5px 5px 5px #FF0000，参数分别为水平阴影、垂直阴影、模糊距离、颜色</li><li>自动换行,如：word-wrap:break-word</li><li>text-outline，文本轮廓</li><li>text-overflow，文本益处</li></ul><h4 id="4、字体"><a href="#4、字体" class="headerlink" title="4、字体"></a>4、字体</h4><p>@font-face{<br>    font-family<br>    src<br>    font-stretch<br>    font-style<br>    font-weight(100-900&#x2F;normal&#x2F;bold)<br>    unicode-range<br>}</p><h4 id="5、2D转换"><a href="#5、2D转换" class="headerlink" title="5、2D转换"></a>5、2D转换</h4><ul><li>translate(x,y)</li><li>translateX(n)</li><li>translateY(n)</li><li>scale(x,y)</li><li>rotate(angle)</li><li>skew(x-angle,y-angle)</li><li>matrix(n,n,n,n,n,n)，把所有转换方法组合在一起，需要六个参数，包含数学函数，允许旋转、缩放、移动及倾斜元素。</li></ul><p>属性：</p><ul><li>transform</li><li>transform：设置元素的基点位置</li></ul><h4 id="6、3D转换"><a href="#6、3D转换" class="headerlink" title="6、3D转换"></a>6、3D转换</h4><ul><li>translate3d(x,y,z)</li><li>translateX(x)</li><li>translateY(y)</li><li>translateZ(z)</li><li>scale3d(x,y,z)</li><li>rotate3d(x,y,z,angle)</li><li>perspective(n)</li><li>matrix(…),16个参数，4x4矩阵</li></ul><p>属性：</p><ul><li>transform</li><li>transform-origin</li><li>transform-style</li><li>perspective</li><li>perspective-origin</li><li>backface-visibility</li></ul><h4 id="7、过渡"><a href="#7、过渡" class="headerlink" title="7、过渡"></a>7、过渡</h4><ul><li>规定希望把效果添加到哪个css属性上</li><li>规定效果的时长</li></ul><p>例：transition:width 1s linear 2s;参数分别为css属性、过渡时间、过渡时间曲线(默认ease)、过渡何时开始。<br>transition:width 1s,-webkit-transform 2s;</p><h4 id="8、动画"><a href="#8、动画" class="headerlink" title="8、动画"></a>8、动画</h4><blockquote><p>是使元素从一种样式逐渐变化为另一种样式的效果</p></blockquote><ul><li>用百分比规定变化发生的时间，”from”、”to”等同于0%、100%</li><li>@keyframs规则用于创建动画</li></ul><p>例：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> myfirst&#123;<br>    <span class="hljs-number">0%</span>&#123;<br>        <span class="hljs-attribute">background</span>:red;<br>        <span class="hljs-attribute">left</span>:<span class="hljs-number">0px</span>;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">0px</span><br>    &#125;<br>    <span class="hljs-number">100%</span>&#123;<br>        <span class="hljs-attribute">background</span>:green;<br>        <span class="hljs-attribute">left</span>:<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">top</span>:<span class="hljs-number">100px</span><br>    &#125;<br>&#125;<br><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-comment">/*参数分别为：动画名称、周期、速度曲线(默认ease)、何时开始、播放次数(默认1次)、是否在下一期逆向播放(默认normal)*/</span><br>    <span class="hljs-attribute">animation</span>:myfirst <span class="hljs-number">5s</span> linear <span class="hljs-number">2s</span> infinite alternate<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9、多列"><a href="#9、多列" class="headerlink" title="9、多列"></a>9、多列</h4><ul><li>column-count，元素被分隔的列数</li><li>column-gap，列之间的间隔</li><li>column-rule，列之间的宽度、样式和颜色规则</li></ul><p>例：column-rule:3px outset #ff0000;</p><h4 id="10、用户界面"><a href="#10、用户界面" class="headerlink" title="10、用户界面"></a>10、用户界面</h4><ul><li>resize,规定是否可由用户调整元素尺寸，如：div{resize:both;overflow:auto}</li><li>box-sizing,以确切的方式定义适应某个区域的具体内容，属性有：<ul><li>content-box(只计算内容)</li><li>border-box(计算带内边距和边框)</li><li>inherit</li></ul></li><li>outline,对轮廓进行偏移(轮廓不占用空间)，如：div{border:2px solid black;outline:20px solid red;outline-offset:15px;}</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML5</tag>
      
      <tag>CSS3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前端实践总结</title>
    <link href="/2018/08/29/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/"/>
    <url>/2018/08/29/%E5%89%8D%E7%AB%AF%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="一、HTML"><a href="#一、HTML" class="headerlink" title="一、HTML"></a>一、HTML</h2><h4 id="1、HTML特质"><a href="#1、HTML特质" class="headerlink" title="1、HTML特质"></a>1、HTML特质</h4><blockquote><p>高语义、高易用性</p></blockquote><span id="more"></span><h4 id="2、输入控件水印提示"><a href="#2、输入控件水印提示" class="headerlink" title="2、输入控件水印提示"></a>2、输入控件水印提示</h4><blockquote><p>在IE浏览器(IE9以下)可以使用jquery-placeholder插件</p></blockquote><h4 id="3、表单"><a href="#3、表单" class="headerlink" title="3、表单"></a>3、表单</h4><ul><li>tabindex</li><li>placeholder</li><li>require</li></ul><h4 id="4、网页标题"><a href="#4、网页标题" class="headerlink" title="4、网页标题"></a>4、网页标题</h4><ul><li>使用<hx>标签</li><li>只使用一个<code>&lt;h1&gt;</code>标签</li><li><hx>标签不能跳级</li><li>不要单纯使用<hx>标签给内容设置样式</li></ul><h4 id="5、H5语义化标签"><a href="#5、H5语义化标签" class="headerlink" title="5、H5语义化标签"></a>5、H5语义化标签</h4><blockquote><p>section、article、aside、hgroup、header、footer、nav、figure、figcaption。</p></blockquote><h4 id="6、H5功能化标签"><a href="#6、H5功能化标签" class="headerlink" title="6、H5功能化标签"></a>6、H5功能化标签</h4><blockquote><p>svg、canvas、audio、video。</p></blockquote><h4 id="7、H5新的输入控件类型"><a href="#7、H5新的输入控件类型" class="headerlink" title="7、H5新的输入控件类型"></a>7、H5新的输入控件类型</h4><blockquote><p>tel、search、url、date、email、number、range、color。</p></blockquote><h4 id="8、base标签"><a href="#8、base标签" class="headerlink" title="8、base标签"></a>8、base标签</h4><ul><li><code>&lt;base target=&quot;_blank&quot;&gt;</code>——默认打开窗口在新窗口打开</li></ul><h4 id="9、html5shim框架"><a href="#9、html5shim框架" class="headerlink" title="9、html5shim框架"></a>9、html5shim框架</h4><blockquote><p>&lt;IE9的情况下html5shim框架支持h5新标签</p></blockquote><h4 id="10、Modernizr框架"><a href="#10、Modernizr框架" class="headerlink" title="10、Modernizr框架"></a>10、Modernizr框架</h4><blockquote><p>用于检查是否支持新特性。</p></blockquote><h2 id="二、CSS"><a href="#二、CSS" class="headerlink" title="二、CSS"></a>二、CSS</h2><h4 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h4><blockquote><p>结构清晰、模块分明</p></blockquote><h4 id="2、命名规则"><a href="#2、命名规则" class="headerlink" title="2、命名规则"></a>2、命名规则</h4><ul><li>通用类，分为：<ul><li>default.css(重置样式,ResetCSS和YUI ResetCSS)</li><li>common.css，分为：<ul><li>共通模块样式，分为：<ul><li>对话框、提示框…</li><li>页面头部、底部、侧边栏…</li></ul></li><li>基础样式，分为：<ul><li>页面布局设置</li><li>字体设置</li><li>背景和前景色</li><li>公有class</li></ul></li></ul></li><li>ie-style.css(&lt;　!–[if lt IE 8]&gt;　&lt;　link rel&#x3D;’stylesheet’ href&#x3D;’ie-sytle.css’&#x2F;&gt;　&lt;![endif]–&gt;)</li></ul></li><li>业务类<ul><li>_header.css、_content.css、_footer.css</li><li>从上到下，从左到右</li><li>Less可以帮助你编写出高复用性和高扩展性的CSS代码</li></ul></li></ul><h4 id="3、CSS排序工具"><a href="#3、CSS排序工具" class="headerlink" title="3、CSS排序工具"></a>3、CSS排序工具</h4><blockquote><p>CSScomb</p></blockquote><h4 id="4、基础选择器"><a href="#4、基础选择器" class="headerlink" title="4、基础选择器"></a>4、基础选择器</h4><ul><li>ID选择器(#reader_title{})</li><li>类选择器(.reader_title{})</li><li>属性选择器(a[href&#x3D;<a href="http://www.baidu.com&quot;]{}">www.baidu.com&quot;]{}</a>)</li><li>伪类和伪对象选择器(:hover{},::after{})</li><li>标签类型选择器(a{})</li><li>通配符选择器(body *{})</li></ul><h4 id="5、选择器组合方式"><a href="#5、选择器组合方式" class="headerlink" title="5、选择器组合方式"></a>5、选择器组合方式</h4><ul><li>后代选择符(reader　.title{})</li><li>子选择符(.reader&gt;.title{})</li><li>相邻选择符(.reader+.title{})</li></ul><h4 id="6、选择符权重"><a href="#6、选择符权重" class="headerlink" title="6、选择符权重"></a>6、选择符权重</h4><blockquote><p>ID:(类+属性+伪类):(标签+为对象)</p></blockquote><h4 id="7、一般浏览器默认字体大小"><a href="#7、一般浏览器默认字体大小" class="headerlink" title="7、一般浏览器默认字体大小"></a>7、一般浏览器默认字体大小</h4><blockquote><p>16px</p></blockquote><h4 id="8、高效CSS选择器"><a href="#8、高效CSS选择器" class="headerlink" title="8、高效CSS选择器"></a>8、高效CSS选择器</h4><ul><li>避免使用通配符</li><li>避免使用标签选择器和单个属性选择器作为关键选择器</li><li>不要在ID选择器前使用标签名</li><li>尽量不要在选择符中定义过多的层级，最好不要超过三层</li></ul><h4 id="9、图片大小"><a href="#9、图片大小" class="headerlink" title="9、图片大小"></a>9、图片大小</h4><blockquote><p>不要超过200kb</p></blockquote><h4 id="10、减少CSS代码量"><a href="#10、减少CSS代码量" class="headerlink" title="10、减少CSS代码量"></a>10、减少CSS代码量</h4><ul><li>合并CSS规则(p.title{font:italic bold 12px&#x2F;30px (microsoft yahei,serif)})</li><li>定义简介属性值(#F3E　.8em　0)</li><li>合并相同定义</li></ul><h2 id="三、JavaScript"><a href="#三、JavaScript" class="headerlink" title="三、JavaScript"></a>三、JavaScript</h2><h4 id="1、特点-1"><a href="#1、特点-1" class="headerlink" title="1、特点"></a>1、特点</h4><blockquote><p>高可读性、高性能、高安全性</p></blockquote><h4 id="2、提高可维护性"><a href="#2、提高可维护性" class="headerlink" title="2、提高可维护性"></a>2、提高可维护性</h4><ul><li>避免定义全局变量或函数，如：<ul><li>封装在一个变量对象上</li><li>通过定义一个匿名函数实现</li><li>确保在定义变量时使用var关键字</li></ul></li><li>简化编码方式，在以下情况要注意：<ul><li>对象创建</li><li>数组创建</li></ul></li><li>使用&#x3D;&#x3D;&#x3D;而不是&#x3D;&#x3D;</li><li>避免使用with语句</li><li>避免使用eval</li><li>不要编写检测浏览器的代码</li></ul><h4 id="3、使用严格的编码方式"><a href="#3、使用严格的编码方式" class="headerlink" title="3、使用严格的编码方式"></a>3、使用严格的编码方式</h4><ul><li>不要在全局中使用严格模式</li><li>在已有代码中谨慎启用严格模式(JSHint工具可检查JS的编写规范)</li></ul><h4 id="4、事件处理和业务逻辑分离"><a href="#4、事件处理和业务逻辑分离" class="headerlink" title="4、事件处理和业务逻辑分离"></a>4、事件处理和业务逻辑分离</h4><h4 id="5、配置数据和代码逻辑分离"><a href="#5、配置数据和代码逻辑分离" class="headerlink" title="5、配置数据和代码逻辑分离"></a>5、配置数据和代码逻辑分离</h4><h4 id="6、逻辑与结构样式分离"><a href="#6、逻辑与结构样式分离" class="headerlink" title="6、逻辑与结构样式分离"></a>6、逻辑与结构样式分离</h4><ul><li>从JS代码逻辑中分离CSS样式</li><li>从JS代码逻辑中分离HTML结构，如：<ul><li>从服务器端动态获取HTML(AJAX)</li><li>通过客户端动态生成页面结构(把JS模版代码放在<code>&lt;script&gt;</code>标签中)</li></ul></li></ul><h4 id="7、JS模版"><a href="#7、JS模版" class="headerlink" title="7、JS模版"></a>7、JS模版</h4><blockquote><p>页面中动态的HTMl结构不再由后端生成，后端仅仅提供一套RESTAPI，返回JSON数据。</p></blockquote><h4 id="8、在JS开发中使用MVC模式-AngularJS-或MVVM模式-Vue-js"><a href="#8、在JS开发中使用MVC模式-AngularJS-或MVVM模式-Vue-js" class="headerlink" title="8、在JS开发中使用MVC模式(AngularJS)或MVVM模式(Vue.js)"></a>8、在JS开发中使用MVC模式(AngularJS)或MVVM模式(Vue.js)</h4><h4 id="9、JS模块化开发"><a href="#9、JS模块化开发" class="headerlink" title="9、JS模块化开发"></a>9、JS模块化开发</h4><ul><li>CommonJS(Node.js),同步</li><li>AMD规范(requireJS),异步</li></ul><h4 id="10、AJAX"><a href="#10、AJAX" class="headerlink" title="10、AJAX"></a>10、AJAX</h4><ul><li>场景，包括：<ul><li>根据用户需求动态取得后端数据，然后更新界面</li><li>不刷新页面而取得任何资源或页面</li><li>动态进行用户输入的验证</li><li>通过异步方式取得资源</li></ul></li><li>借助AJAX框架，但不要忘记AJAX原生方法</li><li>做好和用户交互</li><li>使用JSON格式作为AJAX传输的数据格式</li><li>AJAX请求历史不会被浏览器记录</li></ul><h4 id="11、加快JS加载速度"><a href="#11、加快JS加载速度" class="headerlink" title="11、加快JS加载速度"></a>11、加快JS加载速度</h4><ul><li>压缩、合并代码</li><li>延迟加载</li><li>异步加载</li><li>动态创建JS</li></ul><h4 id="12、良好的编码习惯"><a href="#12、良好的编码习惯" class="headerlink" title="12、良好的编码习惯"></a>12、良好的编码习惯</h4><ul><li>嵌套循环时把大循环作为内循环</li><li>避免循环内定义变量</li><li>在条件分支中创建只在分支中才用到的对象</li><li>使用直接量代替对象(使用数字、字符串、布尔值这三个原始类型而不是通过使用Number、Strign、Boolean构造函数创建复杂对象)</li><li>缓存计算结果减少重复计算</li><li>少用for-in循环</li><li>慎用eval</li><li>使用数组保存类型单一的数据，其它情况下用对象</li><li>正确的内存回收，如：<ul><li>尽量不使用全局变量</li><li>解除不需要的事件监听</li><li>不要在闭包中返回外部不需要的对象</li></ul></li><li>尽量不要将外作用域的变量或对象上的属性值缓存在局部变量中，以提高读取性能</li></ul><h4 id="13、高效的DOM操作"><a href="#13、高效的DOM操作" class="headerlink" title="13、高效的DOM操作"></a>13、高效的DOM操作</h4><ul><li>合并多次的DOM操作作为单次的DOM操作</li><li>把DOM元素离线或隐藏后修改，如：<ul><li>使用文档片段</li><li>通过设置DOM元素的display为none来隐藏元素</li><li>克隆DOM元素到内存中</li></ul></li><li>设置动画效果的DOM元素的position属性为fixed或absolute</li><li>谨慎取得DOM元素的布局信息</li><li>使用事件托管方式绑定事件</li></ul><h4 id="14、移动设备设置meta标签的viewport属性"><a href="#14、移动设备设置meta标签的viewport属性" class="headerlink" title="14、移动设备设置meta标签的viewport属性"></a>14、移动设备设置meta标签的viewport属性</h4><blockquote><p>&lt;　meta　name&#x3D;”viewport”　content&#x3D;”width&#x3D;device-width,initial-scale&#x3D;1.0,user-scalable&#x3D;no”　&#x2F;&gt;</p></blockquote><h4 id="15、移动设备的多点触摸操作"><a href="#15、移动设备的多点触摸操作" class="headerlink" title="15、移动设备的多点触摸操作"></a>15、移动设备的多点触摸操作</h4><ul><li>事件：touchstart、touchmove、touchend、touchcancel(每个事件包含3个列表：touches、targetTouches、changedTouches)</li><li>active伪类代替hover伪类</li><li>虚拟键盘遮挡问题</li></ul><h4 id="16、移动设备兼容"><a href="#16、移动设备兼容" class="headerlink" title="16、移动设备兼容"></a>16、移动设备兼容</h4><ul><li>使用流式布局</li><li>CSS　Media　queries(媒体查询技术),如：<ul><li>智能手机　&lt;480px(@media(max-width:480px){})</li><li>竖屏的平板　&lt;768px</li><li>横屏的平板　&gt;768px</li><li>桌面PC　&gt;1024px</li></ul></li><li>使用合适的图片显示兼容方案，如：<ul><li>img{max-width:100%}</li><li>在像素比不同的设备中，加载不同的图片，如：<ul><li>CSS样式中使用Media　queries和image-set</li></ul></li><li>自适应窗口，如：<ul><li>在html中在img标签中使用srcset属性</li><li>h5中picture标签</li></ul></li></ul></li><li>页面简洁，不使用移动设备不兼容的技术，如：<ul><li>优先使用HTML5　Canvas技术，Flash只是降级方案</li><li>避免使用插件(播放、网络连接、存储、访问本地文件等，因为这些在移动设备会失去作用)</li></ul></li><li>设置viewport(&lt;　meta name&#x3D;”viewport” content&#x3D;”width&#x3D;device-width,inital-scale&#x3D;1”　&gt;)</li><li>增加链接和按钮的可操作区域</li><li>使用响应式设计框架(Bootstrap框架)</li><li>使工具检查移动设备的兼容性(iPadPeek、Howtogomo等)</li></ul><h4 id="17、JS判断是否为移动设备"><a href="#17、JS判断是否为移动设备" class="headerlink" title="17、JS判断是否为移动设备"></a>17、JS判断是否为移动设备</h4><blockquote><p>isMobile库和Mobile-Detect库</p></blockquote><h4 id="18、移动前端框架"><a href="#18、移动前端框架" class="headerlink" title="18、移动前端框架"></a>18、移动前端框架</h4><blockquote><p>jQuery　mobile、SenchaTouch</p></blockquote><h4 id="19、字体、行高"><a href="#19、字体、行高" class="headerlink" title="19、字体、行高"></a>19、字体、行高</h4><blockquote><p>字体16px，行高1.5</p></blockquote><h4 id="20、禁用控件选中效果"><a href="#20、禁用控件选中效果" class="headerlink" title="20、禁用控件选中效果"></a>20、禁用控件选中效果</h4><blockquote><p>-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;</p></blockquote><h4 id="21、在移动设备点击浏览器页面触发的事件"><a href="#21、在移动设备点击浏览器页面触发的事件" class="headerlink" title="21、在移动设备点击浏览器页面触发的事件"></a>21、在移动设备点击浏览器页面触发的事件</h4><blockquote><p>touchstart-&gt;touchmove-&gt;touchend-&gt;mouseover-&gt;mousemove-&gt;mousedown-&gt;mouseup-&gt;click</p></blockquote><h4 id="22、标准对话框"><a href="#22、标准对话框" class="headerlink" title="22、标准对话框"></a>22、标准对话框</h4><blockquote><p>alert,confirm,prompt,print,window.open(移动设备避免使用)</p></blockquote><h4 id="23、setInterval-和setTimeout"><a href="#23、setInterval-和setTimeout" class="headerlink" title="23、setInterval()和setTimeout()"></a>23、setInterval()和setTimeout()</h4><blockquote><p>setInterval()页面不可见时会停止执行，setTimeout()设定时间不准确。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端实践</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>灭霸小程序项目笔记</title>
    <link href="/2018/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2018/08/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Es6"><a href="#一、Es6" class="headerlink" title="一、Es6"></a>一、Es6</h2><h4 id="1、要了解"><a href="#1、要了解" class="headerlink" title="1、要了解"></a>1、要了解</h4><blockquote><p>JavaScript 语言的下一代标准，使用 babel 语法转换器，支持低端浏览器。</p></blockquote><h4 id="2、换行"><a href="#2、换行" class="headerlink" title="2、换行"></a>2、换行</h4><p>例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello &#123;name&#125;</span><br><span class="hljs-string">        hello world</span><br><span class="hljs-string">       &#x27;</span>)<br></code></pre></td></tr></table></figure><span id="more"></span><h4 id="3、箭头函数"><a href="#3、箭头函数" class="headerlink" title="3、箭头函数"></a>3、箭头函数</h4><p>例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">add</span> = (<span class="hljs-params">num1, num2</span>) =&gt; num1 + num2;<br></code></pre></td></tr></table></figure><p>释 1：相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> add = <span class="hljs-keyword">function</span> (<span class="hljs-params">num1, num2</span>) &#123;<br>  <span class="hljs-keyword">return</span> num1 + num2;<br>&#125;;<br></code></pre></td></tr></table></figure><p>注：</p><ul><li>箭头函数是匿名函数，不能作为构造函数，不能使用 new</li><li>箭头函数不绑定 arguments，取而代之用 rest 参数…解决</li><li>箭头函数不绑定 this，会捕获其所在的上下文的 this 值，作为自己的 this 值</li><li>箭头函数通过 call() 或 apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响</li><li>箭头函数没有原型属性</li><li>箭头函数不能当做 Generator 函数,不能使用 yield 关键字<br/></li></ul><h4 id="4、数组与对象的解构"><a href="#4、数组与对象的解构" class="headerlink" title="4、数组与对象的解构"></a>4、数组与对象的解构</h4><p>例 1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((...arr))<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,...arr])<br></code></pre></td></tr></table></figure><p>释 1：</p><pre><code class="hljs">5，61，2，3，5，6</code></pre><br/><p>例 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> key = <span class="hljs-string">&quot;job&quot;</span>;<br><span class="hljs-keyword">const</span> obj = &#123;<br>  key,<br>  <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">str</span>: <span class="hljs-string">&quot;mieba&quot;</span>,<br>  <span class="hljs-title function_">work</span>(<span class="hljs-params"></span>) &#123;&#125;,<br>  [key]: <span class="hljs-string">&quot;fe&quot;</span>,<br>  [key + <span class="hljs-string">&quot;work&quot;</span>]: <span class="hljs-string">&quot;fe&quot;</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>释 2:</p><pre><code class="hljs">key 相当于 key = key,[key] ：&#39;fe&#39; 相当于 job ：fe[key+&#39;&#39;] ：&#39;fe&#39; 相当于 jobwork ：fe</code></pre><br/><p>例 3:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">let</span> [num1, num2] = arr;<br></code></pre></td></tr></table></figure><p>释 3: 相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> num1 = arr[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">let</span> num2 = arr[<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><br/><p>例 4:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;IT&#x27;</span>,name = <span class="hljs-string">&#x27;work&#x27;</span>&#125;<br><span class="hljs-keyword">const</span> &#123;type,name&#125; = obj<br></code></pre></td></tr></table></figure><p>释 4: 相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;work&quot;</span>;<br><span class="hljs-keyword">const</span> type = <span class="hljs-string">&quot;IT&quot;</span>;<br></code></pre></td></tr></table></figure><br/>               <h4 id="5、模块化"><a href="#5、模块化" class="headerlink" title="5、模块化"></a>5、模块化</h4><h6 id="i、要了解"><a href="#i、要了解" class="headerlink" title="i、要了解"></a>i、要了解</h6><blockquote><p>import { }　－－　 export<br>import 　　－－　 export default</p></blockquote><p><code>注：Node现在还不支持，还需要用require来加载文件。</code></p><h6 id="ii、示例"><a href="#ii、示例" class="headerlink" title="ii、示例"></a>ii、示例</h6><p>例 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* module1.js */</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">&quot;mieba&quot;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">import</span> &#123; name &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module1&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br></code></pre></td></tr></table></figure><p>释 1:</p><pre><code class="hljs">mieba</code></pre> <br/><p>例 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* module1.js */</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">sayHello</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Vue不错哟！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* main.js */</span><br><br><span class="hljs-keyword">import</span> sayHello <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module1&quot;</span>;<br><span class="hljs-title function_">sayHello</span>();<br></code></pre></td></tr></table></figure><p>释 2:</p><pre><code class="hljs"> Vue不错哟！</code></pre>  <br/><p>注：</p><ul><li>在一个文件或模块中，export、import 可以有多个，export default 仅有一个</li><li>通过 export 方式导出，在导入时要加{ }，export default 则不需要</li></ul><h4 id="6、数组"><a href="#6、数组" class="headerlink" title="6、数组"></a>6、数组</h4><h6 id="i、遍历及筛选"><a href="#i、遍历及筛选" class="headerlink" title="i、遍历及筛选"></a>i、遍历及筛选</h6><p>例 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];<br>arr.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v);<br>&#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v * <span class="hljs-number">2</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v &gt; <span class="hljs-number">0</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v &lt; <span class="hljs-number">3</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v * <span class="hljs-number">2</span>).<span class="hljs-title function_">filter</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> v &lt;= <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><p>释 1:</p><pre><code class="hljs"> [2,4,6,8] false [1,2,3] [2]</code></pre>  <br/><h6 id="ii、去重"><a href="#ii、去重" class="headerlink" title="ii、去重"></a>ii、去重</h6><p>例 2:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr1);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr1)]);<br></code></pre></td></tr></table></figure><p>释 2:</p><pre><code class="hljs"> Set &#123;1,2,3,4&#125; [1,2,3,4]</code></pre>  <br/><h6 id="iii、并集"><a href="#iii、并集" class="headerlink" title="iii、并集"></a>iii、并集</h6><p>例 3:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> arr1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> arr2 = [<span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([...arr1, ...arr2])]);<br></code></pre></td></tr></table></figure><p>释 3:</p><pre><code class="hljs"> [1,2,3,4,6,8]</code></pre>  <br/><h4 id="7、对象"><a href="#7、对象" class="headerlink" title="7、对象"></a>7、对象</h4><p>例 1:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj1 = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;mieba&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>&#125;;<br><br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">sex</span>: male,<br>&#125;;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj1).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">v</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(v, obj1[v]);<br>&#125;);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123; ...obj1, ...obj2, <span class="hljs-attr">job</span>: <span class="hljs-string">&quot;fe&quot;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">16</span> &#125;);<br></code></pre></td></tr></table></figure><p>释 1:</p><pre><code class="hljs"> mame mieba age 18 &#123;   name: &#39;mieba&#39;,   age: 16,   sex: male,   job:&#39;fe&#39; &#125;</code></pre>  <br/><h2 id="二、vue"><a href="#二、vue" class="headerlink" title="二、vue"></a>二、vue</h2><h4 id="1、要了解-1"><a href="#1、要了解-1" class="headerlink" title="1、要了解"></a>1、要了解</h4><blockquote><p>vue 是三大框架之一，一套用于构建用户界面的渐进式框架,具有良好的生态。</p></blockquote><p>特性：</p><ul><li>Vue-cli</li><li>单文件组件+声明式渲染</li><li>生命周期</li></ul><h4 id="2、构建项目脚手架-vue-cli"><a href="#2、构建项目脚手架-vue-cli" class="headerlink" title="2、构建项目脚手架 vue-cli"></a>2、构建项目脚手架 vue-cli</h4><h6 id="i、要了解-1"><a href="#i、要了解-1" class="headerlink" title="i、要了解"></a>i、要了解</h6><blockquote><p>vue-cli 是 vue.js 的脚手架，用于自动生成 vue.js+webpack 的项目模板。</p></blockquote><h6 id="ii、构建步骤"><a href="#ii、构建步骤" class="headerlink" title="ii、构建步骤"></a>ii、构建步骤</h6><ol><li>npm install -g vue-cli</li><li>vue init webpack my-project（都是用默认值即可）</li><li>npm install &amp;&amp; npm run dev</li></ol><h6 id="iii、基础使用"><a href="#iii、基础使用" class="headerlink" title="iii、基础使用"></a>iii、基础使用</h6><ul><li>{ {渲染变量} }</li><li>v-if 控制显示</li><li>v-for&#x3D;“todo in todos” 显示列表</li><li>@click、v-model 处理事件</li><li>组件化构建+单文件 xxx.vue</li><li>生命周期</li><li>状态管理</li><li>响应式原理</li></ul><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*src main.js  入口文件*/</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Todolist</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Todolist&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Todolist</span> &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;Todolist/&gt;&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*src Todolist.vue Todolist组件*/</span><br><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">Title</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">&quot;title&quot;</span> <span class="hljs-attr">:subtitle</span>=<span class="hljs-string">&quot;subtitle&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;handleClick&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;mytodo&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleClick&quot;</span>&gt;</span>添加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&#x27;clean&#x27;</span>&gt;</span>清空<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123;&#x27;done&#x27;:todo.done&#125;&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;toggle(index)&quot;</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&#x27;(todo,index) in todos&#x27;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;:&#123;&#123;todo.text&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;remain&#125;&#125;/&#123;&#123;todos.length&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Title</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/Title&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Todolist&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">components</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title class_">Title</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  data () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;hello vuejs&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">subtitle</span>: <span class="hljs-string">&#x27;Vue React Angular is good&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">mytodo</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">todos</span>: [</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;吃饭&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;睡觉&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;,</span></span><br><span class="language-javascript"><span class="language-xml">        &#123;<span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;写代码&#x27;</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;</span></span><br><span class="language-javascript"><span class="language-xml">      ]</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    remain () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> !v.<span class="hljs-property">done</span>).<span class="hljs-property">length</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    handleClick () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">push</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">text</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">mytodo</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span></span></span><br><span class="language-javascript"><span class="language-xml">      &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">mytodo</span> = <span class="hljs-string">&#x27;&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    toggle (i) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>[i].<span class="hljs-property">done</span> = !<span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>[i].<span class="hljs-property">done</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    clean () &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">todos</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">v</span> =&gt;</span> !v.<span class="hljs-property">done</span>)</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-tag">li</span><span class="hljs-selector-class">.done</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">text-decoration</span>: line-through;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>:<span class="hljs-string">&#x27;red&#x27;</span></span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*src component Title.vue Title组件*/</span><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;subtitle&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;subtitle&#x27;</span>]</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.title</span> <span class="hljs-selector-tag">p</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">color</span>:red;</span></span><br><span class="language-css"><span class="language-xml">  &#125;</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><br/><p style='text-align:center'>附：vue生命周期</p><p><img src="/images/vue_life_cycle.jpg" alt="vue生命周期"></p><p>注：</p><ol><li>在 beforeCreate 和 created 钩子函数之间的生命周期<br>　　在这个生命周期之间，进行初始化事件，进行数据的观测，在 created 的时候数据已经和 data 属性进行绑定。</li><li>created 钩子函数和 beforeMount 间的生命周期<br>　　首先会判断对象是否有 el 选项。如果有的话就继续向下编译，如果没有 el 选项，则停止编译，也就意味着停止了生命周期，直到在该 vue 实例上调用 vm.$mount(el)。</li></ol><p>注：</p><ul><li>如果 vue 实例对象中有 template 参数选项，则将其作为模板编译成 render 函数。</li><li>如果没有 template 选项，则将外部 HTML 作为模板编译。</li><li>可以看到 template 中的模板优先级要高于 outer HTML 的优先级。<br/></li></ul><p>在 vue 对象中还有一个 render 函数:<br><code>javascript new Vue(&#123; el: &#39;#app&#39;, render: function(createElement) &#123; return createElement(&#39;h1&#39;, &#39;this is createElement&#39;) &#125; &#125;) </code><br>　　如果在 HTML 结构中增加了一串 html，在 vue 对象中增加了 template 选项，那么会先渲染 template。</p><p><code>所以综合排名优先级：render函数选项 &gt; template选项 &gt; outer HTML</code></p><p>3.beforeMount 和 mounted 钩子函数间的生命周期</p><p>此时是给 vue 实例对象添加$el 成员，并且替换掉挂载的 DOM 元素。因为在 beforeMount 之前 el 上还是 undefined。</p><p>4.mounted</p><p>在 mounted 之前还是通过{ {message} }进行占位的，因为此时还有挂载到页面上，还是 JavaScript 中的虚拟 DOM 形式存在的。在 mounted 之后可以看到内容发生了变化。</p><p>5.beforeUpdate 钩子函数和 updated 钩子函数间的生命周期</p><p>当 vue 发现 data 中的数据发生了改变，会触发对应组件的重新渲染，先后调用 beforeUpdate 和 updated 钩子函数。</p><p>6.beforeDestroy 和 destroyed 钩子函数间的生命周期</p><p>beforeDestroy 钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。<br>　　 destroyed 钩子函数在 Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解除绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p><p>(生命周期总结摘自<a href="https://segmentfault.com/a/1190000011381906">https://segmentfault.com/a/1190000011381906</a> ,作者 fsrookie)<br><br/></p><p style='text-align:center'>附：vue状态管理</p><blockquote><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p></blockquote><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*store index.js*/</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br><span class="hljs-keyword">import</span> countModule <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./module/countModule/&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>);<br><br><span class="hljs-comment">// 定义一个状态管理容器</span><br><span class="hljs-keyword">let</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">modules</span>: &#123;<br>    countModule,<br>  &#125;,<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*store countModule index.js*/</span><br><br><span class="hljs-comment">// 定义一个状态管理容器</span><br><span class="hljs-keyword">let</span> countModule = &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">count</span>: <span class="hljs-number">10086</span>,<br>  &#125;,<br>  <span class="hljs-comment">// state 中定义的所有状态，都必需也只能通过 mutations 中的方法来进行修改，</span><br>  <span class="hljs-comment">// 在其它组件中通过调用此方法来间接地修改 state 中的状态</span><br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-title function_">add</span>(<span class="hljs-params">state</span>) &#123;<br>      state.<span class="hljs-property">count</span>++;<br>    &#125;,<br>    <span class="hljs-title function_">del</span>(<span class="hljs-params">state, params</span>) &#123;<br>      state.<span class="hljs-property">count</span> -= params.<span class="hljs-property">step</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    <span class="hljs-title function_">filterCount</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> &gt; <span class="hljs-number">10088</span> ? <span class="hljs-number">10088</span> : state.<span class="hljs-property">count</span>;<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-title function_">dispatchDel</span>(<span class="hljs-params">context, params</span>) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&quot;del&quot;</span>, params);<br>      &#125;, <span class="hljs-number">1000</span>);<br>    &#125;,<br>  &#125;,<br>&#125;;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> countModule;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*src main.js*/</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Demo</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./Demo&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./store&quot;</span>;<br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  router,<br>  store,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">Demo</span> &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&quot;&lt;Demo/&gt;&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*src Demo.vue*/</span><br><br>&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;mian&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn-wrapper&quot;</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;delHandleClick(&#123;step: 6&#125;)&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        &#123;&#123;count&#125;&#125;-&#123;&#123;filterCount&#125;&#125;</span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn btn-primary&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addHandleClick&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">import</span> &#123;mapState, mapGetters, mapActions, mapMutations&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Demo&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">computed</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// num () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   return this.$store.state.count</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;,</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// filterNum () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   return this.$store.getters.filterCount</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapState</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">countModule</span>.<span class="hljs-property">count</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;),</span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapGetters</span>(&#123;<span class="hljs-attr">filterCount</span>: <span class="hljs-string">&#x27;filterCount&#x27;</span>&#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// delHandleClick () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   this.$store.dispatch(&#x27;dispatchDel&#x27;, &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//     step: 6</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   &#125;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;,</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// addHandleClick () &#123;</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">//   this.$store.commit(&#x27;add&#x27;)</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// &#125;</span></span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapActions</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">delHandleClick</span>: <span class="hljs-string">&#x27;dispatchDel&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;),</span></span><br><span class="language-javascript"><span class="language-xml">    ...<span class="hljs-title function_">mapMutations</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-attr">addHandleClick</span>: <span class="hljs-string">&#x27;add&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">    &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;stylus&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">  <span class="hljs-selector-class">.mian</span></span></span><br><span class="language-css"><span class="language-xml">    <span class="hljs-attribute">display</span>:flex</span></span><br><span class="language-css"><span class="language-xml">    flex-direction:column</span></span><br><span class="language-css"><span class="language-xml">    justify-content:center</span></span><br><span class="language-css"><span class="language-xml">    width:<span class="hljs-number">100%</span></span></span><br><span class="language-css"><span class="language-xml">    height:<span class="hljs-number">4rem</span></span></span><br><span class="language-css"><span class="language-xml">    .btn-wrapper</span></span><br><span class="language-css"><span class="language-xml">      margin:<span class="hljs-number">0</span> auto</span></span><br><span class="language-css"><span class="language-xml">      .btn</span></span><br><span class="language-css"><span class="language-xml">        width:<span class="hljs-number">1rem</span></span></span><br><span class="language-css"><span class="language-xml">        height:.<span class="hljs-number">5rem</span></span></span><br><span class="language-css"><span class="language-xml">        border-radius:.<span class="hljs-number">5rem</span></span></span><br><span class="language-css"><span class="language-xml">      .btn-primary</span></span><br><span class="language-css"><span class="language-xml">        background:indianred</span></span><br><span class="language-css"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>注：</p><ul><li>其它组件中通过 $store.state.count 来获取状态，通过 this.$stroe.commit() 方法来提交对应的方法名告诉 store 要执行 mutations 中的哪一个方法来修改状态。commit() 可以接收第二个参数，表示要传给 add() 方法的参数，参数可以是一个单纯的数字，字符串或者其它基本类型，也可以是一个对象</li><li>如果我们在点击减按钮时要先去请求主个接口，请接口返回来后再去变更状态，此时我们就需要用到状态管理中的 actiions。通过 actions 的 commit() 来提交 mutations。然后在其它组件中通过 dispatch() 方法来触发一个 actions 动作。</li><li>不过有时候我们在一个组件中两个地方都使用到了这个 count 状态，但是需要给其中一个添加一个约束条件，比如大于 10088 就不能再往上加了。这时我们就可以使用 getters 属性实现这个效果，这个 getters 属性相当于组件中的计算属性，如实例所示。</li><li>辅助函数<blockquote><p>辅助函数就是为了简单我们使用状态管理的操作，让代码看起来更加简洁。state、getters、actions、mutations 都会有自己相对的一个用于简化调用状态的函数 mapState、 mapGetters、mapActions、mapMutations。在使用它们之前，我们必需得先从 vuex 中引入它们。</p></blockquote></li></ul><p>以 mapState 为例:</p><ol><li>引用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; mapState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vuex&quot;</span>;<br></code></pre></td></tr></table></figure><p>2.写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 传对象方式</span><br><span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>(&#123;<br>  <span class="hljs-comment">// 写法一</span><br>  <span class="hljs-attr">count</span>: <span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span> state.<span class="hljs-property">count</span><br>  <span class="hljs-comment">// 写法二</span><br>  <span class="hljs-attr">count</span>: <span class="hljs-string">&quot;count&quot;</span><br>  <span class="hljs-comment">// 写法三</span><br>  <span class="hljs-title function_">count</span>(<span class="hljs-params">state</span>) &#123;<br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">count</span> + <span class="hljs-number">100</span>;<br>  &#125;<br>  &#125;)<br><br>  <span class="hljs-comment">// 传数组方式（数组的话就只有一种写法）</span><br>  <span class="hljs-attr">computed</span>: <span class="hljs-title function_">mapState</span>([<span class="hljs-string">&quot;count&quot;</span>])<br></code></pre></td></tr></table></figure><ul><li>模块化　需要在 store 目录下的 index.js 文件引入这个模块，也就是现在我们把 store&#x2F;index.js 文件当作一个所有状态的入口，统一在这里引入所有的状态模块。不过把状态分割成模块后，我们在组件中调用状态的时候就需要带上模块名了。</li></ul><p>(vuex 状态管理总结摘自<a href="http://yunkus.com/vue-vuex/">http://yunkus.com/vue-vuex/</a> ,作者朝夕熊)</p><h2 id="三、mpvue"><a href="#三、mpvue" class="headerlink" title="三、mpvue"></a>三、mpvue</h2><h4 id="1、要了解-2"><a href="#1、要了解-2" class="headerlink" title="1、要了解"></a>1、要了解</h4><blockquote><p>mpvue 是一个使用 Vue.js 开发小程序的前端框架,全称即 Vue.js in mini program,从底层支持 Vue.js 语法和构建工具体系。</p></blockquote><p>特性：</p><ul><li>彻底的组件化开发能力：提高代码复用性</li><li>完整的 Vue.js 开发体验</li><li>方便的 Vuex 数据管理方案：方便构建复杂应用</li><li>快捷的 webpack 构建机制：自定义构建策略、开发阶段 hotReload</li><li>支持使用 npm 外部依赖</li><li>使用 Vue.js 命令行工具 vue-cli 快速初始化项目</li><li>H5 代码转换编译成小程序目标代码的能力<br/></li></ul><p>配套工具和插件：</p><ul><li>mpvue-loader 　　　　提供 webpack 版本的加载器</li><li>mpvue-webpack-target 　　　　 webpack 构建目标</li><li>postcss-mpvue-wxss 　　　　样式代码转换预处理工具</li><li>px2rpx-loader 　　　　样式转化插件</li><li>mpvue-lint 　　　　开发辅助插件，包括语法检查，内存检查等功能</li></ul><h4 id="2、构建项目"><a href="#2、构建项目" class="headerlink" title="2、构建项目"></a>2、构建项目</h4><h6 id="i、构建步骤"><a href="#i、构建步骤" class="headerlink" title="i、构建步骤"></a>i、构建步骤</h6><pre><code class="hljs">1. vue init mpvue/mpvue-quickstart my-project2. npm run dev</code></pre><p>注：<code>my-project</code>为项目名称,构建过程可自行选择配置选项。</p><h6 id="ii、项目结构及解释"><a href="#ii、项目结构及解释" class="headerlink" title="ii、项目结构及解释"></a>ii、项目结构及解释</h6><pre><code class="hljs">├── src│   ├── App.vue                         app.wxss+app.js 生命周期使用vue的入口│   ├── main.js                         export的内容相当于app.json│   ├── components                      自定义组件│   │   ││   │   └── card.vue                    单文件组件│   ├── pages                           页面目录│   │   ├── counter│   │   │   ├── index.vue               页面模版+样式+逻辑│   │   │   ├── main.js                 入口文件，配置vue+返回配置│   ││   └── utils│       └── index.js                    帮助函数</code></pre><h6 id="iii、生命周期"><a href="#iii、生命周期" class="headerlink" title="iii、生命周期"></a>iii、生命周期</h6><p>vue 生命周期+兼容小程序生命周期</p><ul><li>Created 创建初始化</li><li>Vue 不支持的 用小程序自己的 比如 onPullDownRefresh</li></ul><h6 id="iv、模板语法"><a href="#iv、模板语法" class="headerlink" title="iv、模板语法"></a>iv、模板语法</h6><p>computed+模板+熟悉的 html</p><ul><li>动态 style 和 class 使用计算属性返回字符串</li><li>V-if 和 v-for 用法不变</li><li>表单 v-model 全支持</li></ul><h6 id="v、模板语法"><a href="#v、模板语法" class="headerlink" title="v、模板语法"></a>v、模板语法</h6><p>bind 换成@ 使用 vue 的绑定语法</p><h6 id="vi、模板"><a href="#vi、模板" class="headerlink" title="vi、模板"></a>vi、模板</h6><p>除了动态渲染，别的都支持</p><ul><li>.vue 单文件组件</li><li>小程序自带组件也可以用</li><li>自带组件事件绑定也使用 vue 的，比如@click<br/></li></ul><h2 id="四、koa2"><a href="#四、koa2" class="headerlink" title="四、koa2"></a>四、koa2</h2><h4 id="1、要了解-3"><a href="#1、要了解-3" class="headerlink" title="1、要了解"></a>1、要了解</h4><blockquote><p>koa2 是基于 nodejs 平台的下一代 web 开发框架,是基于 node 的自带的 http 模块。</p></blockquote><p>特性：</p><ul><li>Express 原班人马打造，更精简</li><li>Async+await 处理异步</li><li>洋葱圈型的中间件机制</li></ul><p>注：</p><ul><li>ctx 是什么 就是 context,封装了 request 和 response 的对象</li><li>Next 是什么 下一个中间件</li><li>App 是什么 启动应用</li></ul><p>Promise 和 then()方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">word</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reslove</span>(<span class="hljs-string">&quot;hello&quot;</span> + word);<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-title function_">delay</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">word</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(word);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">delay</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>);<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">word</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(word);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">delay</span>(<span class="hljs-string">&quot;沙悟净&quot;</span>);<br>  &#125;);<br></code></pre></td></tr></table></figure><pre><code class="hljs">结果每隔两秒依次打印出：　hello孙悟空　hello猪八戒</code></pre><p>注：</p><ul><li>Promise.prototype.then(onFulfilled, onRejected)</li><li>then()方法用于指定当前实例状态发生改变时的回调函数。它返回一个新的 Promise 实例。</li><li>onFulfilled 当前实例变成 fulfilled 状态时，该参数作为回调函数被调用。</li><li>onRejected 当前实例变成 reject 状态时，该参数作为回调函数被调用。</li><li>onFulfilled 将接收一个参数，参数值由当前 Promise 实例内部的 resolve()方法传值决定；onRejected 将接收一个参数，参数值由当前 Promise 实例内部的 reject()方法传值决定。</li></ul><p>async+await 一起使用处理异步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params">word</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reslove</span>(<span class="hljs-string">&quot;hello&quot;</span> + word);<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> word1 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-string">&quot;孙悟空&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(word1);<br><br>  <span class="hljs-keyword">const</span> word2 = <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>(<span class="hljs-string">&quot;猪八戒&quot;</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(word2);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code class="hljs">结果每隔两秒依次打印出：　hello孙悟空　hello猪八戒</code></pre><br/><h4 id="2、koa-进阶"><a href="#2、koa-进阶" class="headerlink" title="2、koa 进阶"></a>2、koa 进阶</h4><h6 id="i、Koa-router"><a href="#i、Koa-router" class="headerlink" title="i、Koa-router"></a>i、Koa-router</h6><ul><li>安装：npm install koa-router –save</li><li>引入：const Router &#x3D; require(‘koa-router’)</li><li>新建实例(如下)：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;hello koa&quot;</span>;<br>&#125;);<br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/vue&quot;</span>, <span class="hljs-function">(<span class="hljs-params">ctx, next</span>) =&gt;</span> &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;hello vue&quot;</span>;<br>&#125;);<br></code></pre></td></tr></table></figure><h6 id="ii、操作数据库"><a href="#ii、操作数据库" class="headerlink" title="ii、操作数据库"></a>ii、操作数据库</h6><ul><li><p>安装：brew install mysql</p></li><li><p>启动：1.mysql.server.start 　&#x2F;or 　 service mysqld restart 　 2.mysql -u root</p></li><li><p>CentOS 下 mysql 数据库常用命令(如下)</p><p>1.更改 root 密码　　 mysqladmin -uroot password ‘yourpassword’ 2.远程登陆 mysql 服务器　　 mysql -uroot -p -h192.168.137.10 -P3306 3.查询数据库　　 show databases; 4.进入某个数据库　　 use databasename; 5.列出数据库中的表　　 show tables; 6.查看某个表全部字段　　 desc slow_log;　　&#x2F;or 　　 show create table slow_log\G; （不仅可以显示表信息，还可以显示建表语句） 7.查看当前用户　　 select user(); 8.查看当前所在数据库　　 select database(); 9.创建新数据库（可以指定字符集)　　 create database db1 charset utf8; 10.创建新表　　 create table t1 (`id` int(4), `name` char(40)); 11.查看数据库版本　　 select version(); 12.查看数据库状态　　 show status;　　当前会话状态　　 show global status;　　全局数据库状态　　 show slave status\G;　　查看主从数据库状态信息 13.查询数据库参数　　 show variables; 14.修改数据库参数　　 show variables like ‘max_connect%’;　&#x2F;or 　 set global max_connect_errors &#x3D; 1000;（重启数据库会失效，要在配置文件中修改） 15.查看当前数据库队列　　 show processlist; 16.创建普通用户并授权给某个数据库　　 grant all on databasename._ to ‘user1‘@’localhost’ identified by ‘123456’; 17.查询表数据　　 select _ from mysql.db;　　查询该表中的所有字段　　 select count(<em>) from mysql.user;　　 count(</em>)表示表中有多少行　　 select db,user from mysql.db;　　查询表中的多个字段　　 select * from mysql.db where host like ‘10.0.%’;　　在查询语句中可以使用万能匹配 “%” 18.插入一行数据　　 insert into db1.t1 values (1, ‘abc’); 19.更改表的某一行数据　　 update db1.t1 set name&#x3D;’aaa’ where id&#x3D;1; 20.清空表数据　　 truncate table db1.t1; 21.删除表　　 drop table db1.t1; 22.清空数据库中的所有表（数据库名是 eab12）　　 mysql -N -s information_schema -e “SELECT CONCAT(‘TRUNCATE TABLE ‘,TABLE_NAME,’;’) FROM TABLES WHERE TABLE_SCHEMA&#x3D;’eab12’” | mysql -f eab12 23.删除数据库　　 drop database db1; 24.数据库备份　　 mysqldump -uroot -p’yourpassword’ mysql &gt;&#x2F;tmp&#x2F;mysql.sql 25.数据库恢复　　 mysql -uroot -p’yourpassword’ mysql &lt;&#x2F;tmp&#x2F;mysql.sql 26.新建普通用户　　 CREATE USER name IDENTIFIED BY ‘ssapdrow’; 27.更改普通用户密码　　 SET PASSWORD FOR name&#x3D;PASSWORD(‘fdddfd’); 28.查看 name 用户权限　　 SHOW GRANTS FOR name; 29.脚本中执行 mysql 命令　　 mysql -uuser -ppasswd -e”show databases”　　 echo “show databases”|mysql -uuser -ppassword 　　　 or 　　 mysql -uuser -hhostname -ppasswd &lt;&lt;EOF 　　 mysql 语句　　 EOF 　　(这是执行大量 mysql 语句采用的方式)</p></li></ul><p>(此总结摘自<a href="https://www.cnblogs.com/Mr-Zhong/p/7798186.html">https://www.cnblogs.com/Mr-Zhong/p/7798186.html</a> ,作者 Bruce)</p><h6 id="iii、了解原理-自己造一个"><a href="#iii、了解原理-自己造一个" class="headerlink" title="iii、了解原理(自己造一个)"></a>iii、了解原理(自己造一个)</h6><p>实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*koa-demo server.js*/</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./application&quot;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;1&quot;</span>;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>  ctx.<span class="hljs-property">body</span> += <span class="hljs-string">&quot;2&quot;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&quot;3&quot;</span>;<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">delay</span>();<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>  ctx.<span class="hljs-property">body</span> += <span class="hljs-string">&quot;4&quot;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;<br>  ctx.<span class="hljs-property">body</span> += <span class="hljs-string">&quot;5&quot;</span>;<br>&#125;);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">delay</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">reslove, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-title function_">reslove</span>();<br>    &#125;, <span class="hljs-number">2000</span>);<br>  &#125;);<br>&#125;<br><span class="hljs-comment">// app.use((req, res) =&gt; &#123;</span><br><span class="hljs-comment">//     res.writeHead(200)</span><br><span class="hljs-comment">//     res.end(&#x27;hello koa&#x27;)</span><br><span class="hljs-comment">// &#125;)</span><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">9092</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;server running on port 9092&quot;</span>);<br>&#125;);<br><br><span class="hljs-comment">// const http = require(&#x27;http&#x27;)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// const server = http.createServer((req, res) =&gt; &#123;</span><br><span class="hljs-comment">//     res.writeHead(200)</span><br><span class="hljs-comment">//     res.end(&#x27;hello koa&#x27;)</span><br><span class="hljs-comment">// &#125;)</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// server.listen(9092, ()=&gt; &#123;</span><br><span class="hljs-comment">//     console.log(&#x27;server start on port 9092&#x27;)</span><br><span class="hljs-comment">// &#125;)</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* koa-demo application.js*/</span><br><br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;http&quot;</span>);<br><br><span class="hljs-keyword">let</span> request = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">url</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">req</span>.<span class="hljs-property">url</span>;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">let</span> response = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">body</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_body</span>;<br>  &#125;,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_body</span> = val;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">let</span> context = &#123;<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">url</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>  &#125;,<br>  <span class="hljs-keyword">get</span> <span class="hljs-title function_">body</span>() &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>.<span class="hljs-property">body</span>;<br>  &#125;,<br>  <span class="hljs-keyword">set</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">val</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>.<span class="hljs-property">body</span> = val;<br>  &#125;,<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// this.callback = () =&gt; &#123;&#125;</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span> = context;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span> = request;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span> = response;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span> = [];<br>  &#125;<br>  <span class="hljs-title function_">use</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>.<span class="hljs-title function_">push</span>(callback);<br>    <span class="hljs-comment">// this.callback = callback</span><br>  &#125;<br>  <span class="hljs-title function_">compose</span>(<span class="hljs-params">middlewares</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span>(<span class="hljs-params">i</span>) &#123;<br>        <span class="hljs-keyword">let</span> fn = middlewares[i];<br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(<br>          <span class="hljs-title function_">fn</span>(context, <span class="hljs-keyword">function</span> <span class="hljs-title function_">next</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_">dispatch</span>(i + <span class="hljs-number">1</span>);<br>          &#125;)<br>        );<br>      &#125;<br>    &#125;;<br>  &#125;<br>  <span class="hljs-title function_">listen</span>(<span class="hljs-params">...args</span>) &#123;<br>    <span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>      <span class="hljs-keyword">let</span> ctx = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">createCtx</span>(req, res);<br>      <span class="hljs-keyword">const</span> fn = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">compose</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">middlewares</span>);<br>      <span class="hljs-keyword">await</span> <span class="hljs-title function_">fn</span>(ctx);<br>      ctx.<span class="hljs-property">res</span>.<span class="hljs-title function_">end</span>(ctx.<span class="hljs-property">body</span>);<br>      <span class="hljs-comment">// this.callback(req, res)</span><br>    &#125;);<br>    server.<span class="hljs-title function_">listen</span>(...args);<br>  &#125;<br>  <span class="hljs-title function_">createCtx</span>(<span class="hljs-params">req, res</span>) &#123;<br>    <span class="hljs-keyword">let</span> ctx = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">context</span>);<br>    ctx.<span class="hljs-property">request</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">request</span>);<br>    ctx.<span class="hljs-property">response</span> = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">response</span>);<br>    ctx.<span class="hljs-property">req</span> = ctx.<span class="hljs-property">request</span>.<span class="hljs-property">req</span> = req;<br>    ctx.<span class="hljs-property">res</span> = ctx.<span class="hljs-property">response</span>.<span class="hljs-property">res</span> = res;<br>    <span class="hljs-keyword">return</span> ctx;<br>  &#125;<br>&#125;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Application</span>;<br></code></pre></td></tr></table></figure><pre><code class="hljs">在目录执行node server.js运行结果为3542</code></pre><br/><h2 id="五、小程序"><a href="#五、小程序" class="headerlink" title="五、小程序"></a>五、小程序</h2><h4 id="1、文件结构"><a href="#1、文件结构" class="headerlink" title="1、文件结构"></a>1、文件结构</h4><ul><li>App.json 配置文件</li><li>wxml 模版+wxss 样式</li><li>Js 页面渲染，数据驱动页面</li></ul><p><img src="/images/xiaochengxu_jiegou.png" alt="小程序文件结构"></p><p><img src="/images/xiaochengxu_jiegou2.png" alt="小程序文件结构"></p><h6 id="i、App-js"><a href="#i、App-js" class="headerlink" title="i、App.js"></a>i、App.js</h6><blockquote><p>项目全局的入口和配置</p></blockquote><ul><li>生命周期（如下总结）</li><li>全局 getApp 函数获取实例</li><li>全局维一</li></ul><p><img src="/images/xiaochengxu_app.js.png" alt="小程序文件结构"></p><p style='text-align:center'>附：生命周期</p><p>1、应用生命周期</p><ul><li>用户首次打开小程序，触发 onLaunch（全局只触发一次）。</li><li>小程序初始化完成后，触发 onShow 方法，监听小程序显示。</li><li>小程序从前台进入后台，触发 onHide 方法。</li><li>小程序从后台进入前台显示，触发 onShow 方法。</li><li>小程序后台运行一定时间，或系统资源占用过高，会被销毁。</li></ul><p>注：<br>　　前台、后台定义： 当用户点击左上角关闭，或者按了设备 Home 键离开微信，小程序并没有直接销毁，而是进入了后台；当再次进入微信或再次打开小程序，又会从后台进入前台。</p><p>2、页面生命周期</p><ul><li>小程序注册完成后，加载页面，触发 onLoad 方法。</li><li>页面载入后触发 onShow 方法，显示页面。</li><li>首次显示页面，会触发 onReady 方法，渲染页面元素和样式，一个页面只会调用一次。</li><li>当小程序后台运行或跳转到其他页面时，触发 onHide 方法。</li><li>当小程序有后台进入到前台运行或重新进入页面时，触发 onShow 方法。</li><li>当使用重定向方法 wx.redirectTo(OBJECT)或关闭当前页返回上一页 wx.navigateBack()，触发 onUnload</li></ul><p>3、应用生命周期影响页面生命周期</p><ul><li>小程序初始化完成后，页面首次加载触发 onLoad，只会触发一次。</li><li>当小程序进入到后台，先执行页面 onHide 方法再执行应用 onHide 方法。</li><li>当小程序从后台进入到前台，先执行应用 onShow 方法再执行页面 onShow 方法。</li></ul><p>(此总结摘自<a href="https://www.cnblogs.com/nosqlcoco/p/wxsmallcycle.html">https://www.cnblogs.com/nosqlcoco/p/wxsmallcycle.html</a> ,作者 nosqlcoco)</p><h6 id="ii、App-json"><a href="#ii、App-json" class="headerlink" title="ii、App.json"></a>ii、App.json</h6><blockquote><p>项目全局的入口和配置</p></blockquote><ul><li>pages</li><li>windws</li><li>tabbar</li></ul><p><img src="/images/xiaochengxu_app.json.png" alt="小程序文件结构"></p><p><img src="/images/xiaochengxu_tabbar.png" alt="小程序文件结构"></p><h6 id="iii、wxml-wxss"><a href="#iii、wxml-wxss" class="headerlink" title="iii、wxml+wxss"></a>iii、wxml+wxss</h6><blockquote><p>类似于 html+css</p></blockquote><ul><li>wxml 类似 html，数据驱动</li><li>wxss 样式，新增单位 rpx(宽度 750rpx 满屏 自适应)</li><li>配置文件，覆盖 app.json 里的 window 比如修改 title</li></ul><h6 id="iv、js"><a href="#iv、js" class="headerlink" title="iv、js"></a>iv、js</h6><blockquote><p>自带数据驱动功能</p></blockquote><ul><li>{ {显示数据} }</li><li>setData，数据驱动不用深究，我们后期用 vue 语法开发</li><li>自带组件和 API</li></ul><h4 id="2、API"><a href="#2、API" class="headerlink" title="2、API"></a>2、API</h4><blockquote><p>框架提供很多 api，方便调用微信原生的能力</p></blockquote><ul><li>Wx.request 发送请求</li><li>Wx.previewImage 预览图片</li><li>Wx.setStorage|getStorage 本地存储</li><li>Location 地理位置</li><li>ScanCode 扫码</li><li>showToast 显示提示信息</li><li>设置导航条</li><li>获取用户信息</li><li>页面导航 navigateTo,redirectTo,switchTab</li><li>…</li><li>动画、振动、截屏，亮度</li><li>音乐、视频、地图、文件</li><li>加速计 罗盘 wifi nfc 等等</li></ul><h4 id="3、小程序自带组件"><a href="#3、小程序自带组件" class="headerlink" title="3、小程序自带组件"></a>3、小程序自带组件</h4><blockquote><p>提供了一些基础组件，也可以自定义组件</p></blockquote><ul><li>视图</li><li>表单</li><li>媒体</li></ul><p>注(小程序语法缺点)：</p><ul><li>不能使用 npm，使用第三方包的方式太原始</li><li>需要为小程序单独开发代码，不能和 web 系统重用</li><li>开发效率和学习成本（小程序特有的语法）</li><li>所以使用 mpvue 好处多多，^_^</li></ul>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
